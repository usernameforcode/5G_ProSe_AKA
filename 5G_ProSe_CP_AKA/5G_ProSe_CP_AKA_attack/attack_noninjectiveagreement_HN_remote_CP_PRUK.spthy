theory CP_5G_Prose_authentication_protocol begin

// Function signature and definition of the equational theory E

builtins: multiset, xor
functions: Int/2, KDF/2, adec/2, aenc/2, f1/2, f1_star/2, f2/2,
           f3/2, f4/2, f5/2, f5_star/2, fst/1, pair/2, pk/1, sdec/2, senc/2,
           snd/1
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2



/* looping facts with injective instances: Sqn_HN/5, Sqn_UE/5 */

rule (modulo E) send_secure:
   [ SndS( ~cid, A, B, m ) ] --> [ Sec( ~cid, A, B, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) receive_secure:
   [ Sec( ~cid, A, B, m ) ] --> [ RcvS( ~cid, A, B, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) secureChannel_compromised_in:
   [ In( <~cid, A, B, x> ) ]
  --[ Rev( A, 'secureChannel' ), Injected( x ) ]->
   [ Sec( ~cid, A, B, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) secureChannel_compromised_out:
   [ Sec( ~cid, A, B, m ) ]
  --[ Rev( B, 'secureChannel' ) ]->
   [ Out( <~cid, m> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) init_servNet:
   [ Fr( ~idSN ) ]
  --[ ServNet( ~idSN ) ]->
   [ !AMF( ~idSN, <'5G', ~idSN> ), Out( <'5G', ~idSN> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) init_homeNet:
   [ Fr( ~sk_HN ), Fr( ~idHN ) ]
  --[ HomeNet( ~idHN ) ]->
   [
   !HN( ~idHN, ~sk_HN ), !Pk( ~idHN, pk(~sk_HN) ),
   Out( <~idHN, pk(~sk_HN)> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) add_RSC:
   [ Fr( ~RSC ), Fr( ~DUCK ), Fr( ~DUIK ) ]
  -->
   [ !Ltk_Prose( ~RSC, ~DUCK, ~DUIK ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) add_subscription:
   [
   Fr( ~supi ), Fr( ~k ), Fr( ~sqn_root ), Fr( ~User_info_remote ),
   !HN( ~idHN, ~sk_HN )
   ]
  --[
  Subscribe( ~supi, ~idHN ), Sqn_Create( ~supi, ~idHN, ~sqn_root ),
  CreateUser( ~supi, ~k, ~idHN )
  ]->
   [
   !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root, ~User_info_remote ),
   Sqn_UE( ~supi, ~idHN, ('1'+~sqn_root), ~sqn_root, '1' ),
   Sqn_HN( ~supi, ~idHN, ('1'+~sqn_root), ~sqn_root, '1' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) init_Relay:
   [ Fr( ~User_info_relay ), !AMF( ~idSN, SNID ), Fr( ~supi_relay ) ]
  --[ CreateRelay( ~supi_relay ) ]->
   [ !Relay( ~User_info_relay, ~supi_relay, ~idSN ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) reveal_Ltk_Sym:
   [ !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root, ~User_info_remote ) ]
  --[ Rev( ~supi, <'k', ~k> ), Rev( ~idHN, <'k', ~k> ) ]->
   [ Out( ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) reveal_Ltk_Sqn:
   [ !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root, ~User_info_remote ) ]
  --[
  Rev( ~supi, <'sqn', ~sqn_root> ), Rev( ~idHN, <'sqn', ~sqn_root> )
  ]->
   [ Out( ~sqn_root ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) reveal_Ltk_supi:
   [ !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root, ~User_info_remote ) ]
  --[ Rev( ~supi, <'supi', ~supi> ), Rev( ~idHN, <'supi', ~supi> )
  ]->
   [ Out( ~supi ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) reveal_Ltk_supi_relay:
   [ !Relay( ~User_info_relay, ~supi_relay, ~idSN ) ]
  --[
  Rev( ~supi_relay, <'supi_relay', ~supi_relay> ),
  Rev( ~idSN, <'supi_relay', ~supi_relay> )
  ]->
   [ Out( ~supi_relay ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) reveal_Ltk_RSC:
   [
   !Ltk_Prose( ~RSC, ~DUCK, ~DUIK ),
   !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root, ~User_info_remote ),
   !Relay( ~User_info_relay, ~supi_relay, ~idSN )
   ]
  --[ Rev( ~supi, <'RSC', ~RSC> ), Rev( ~supi_relay, <'RSC', ~RSC> )
  ]->
   [ Out( ~RSC ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) reveal_Ltk_DUIK:
   [
   !Ltk_Prose( ~RSC, ~DUCK, ~DUIK ),
   !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root, ~User_info_remote ),
   !Relay( ~User_info_relay, ~supi_relay, ~idSN )
   ]
  --[
  Rev( ~supi, <'DUIK', ~DUIK> ), Rev( ~supi_relay, <'DUIK', ~DUIK> )
  ]->
   [ Out( ~DUIK ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) reveal_Ltk_DUCK:
   [
   !Ltk_Prose( ~RSC, ~DUCK, ~DUIK ),
   !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root, ~User_info_remote ),
   !Relay( ~User_info_relay, ~supi_relay, ~idSN )
   ]
  --[
  Rev( ~supi, <'DUCK', ~DUCK> ), Rev( ~supi_relay, <'DUCK', ~DUCK> )
  ]->
   [ Out( ~DUCK ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) reveal_sk_HN:
   [ !HN( ~idHN, ~sk_HN ) ]
  --[ Rev( ~idHN, <'skHN', ~sk_HN> ) ]->
   [ Out( ~sk_HN ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ue_sqn_increase:
   [ Sqn_UE( ~supi, ~idHN, Sqn, ~sqn_root, count ), In( m ) ]
  --[
  Sqn_UE_Invariance( ~supi, ~idHN, (Sqn+m), ~sqn_root, (count+m) ),
  Sqn_UE_Change( ~supi, ~idHN, (Sqn+m) ), Sqn_UE_Desync( )
  ]->
   [ Sqn_UE( ~supi, ~idHN, (Sqn+m), ~sqn_root, (count+m) ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) ue_send_DCR_step1:
   [
   !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root, ~User_info_remote ),
   !Ltk_Prose( ~RSC, ~DUCK, ~DUIK ), !Pk( ~idHN, pk_HN ),
   Fr( ~SeCap ), Fr( ~CP_Se_Po ), Fr( ~UP_Se_Po ), Fr( ~R ),
   Fr( ~MSB_KsessID ), Fr( ~Nonce1 ),
   !Relay( ~User_info_relay, ~supi_relay, ~idSN )
   ]
  --[ Start_UE_Session( ~supi ) ]->
   [
   St_1_UE( ~supi, ~supi_relay, ~User_info_remote, ~User_info_relay,
            ~idHN, ~k, ~sqn_root, ~RSC, ~Nonce1, ~DUCK, ~DUIK, ~SeCap,
            ~CP_Se_Po, ~UP_Se_Po, ~MSB_KsessID
   ),
   Out( <<aenc(<~supi, ~R>, pk_HN), ~idHN>, ~User_info_remote, 
         ~User_info_relay, (~RSC⊕KDF(~DUCK, <~Nonce1, ~RSC>)), ~Nonce1, 
         ~SeCap, ~CP_Se_Po, ~MSB_KsessID, 
         KDF(~DUIK,
             <<aenc(<~supi, ~R>, pk_HN), ~idHN>, ~User_info_remote, 
              ~User_info_relay, (~RSC⊕KDF(~DUCK, <~Nonce1, ~RSC>)), ~Nonce1, 
              ~SeCap, ~CP_Se_Po, ~MSB_KsessID>)
        >
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) relay_send_relaykeyrequest_step2:
   [
   Fr( ~transactionid ),
   In( <<aenc(<~supi, ~R>, pk_HN), ~idHN>, ~User_info_remote, 
        ~User_info_relay, (~RSC⊕KDF(~DUCK, <Nonce1, ~RSC>)), Nonce1, 
        ~SeCap, ~CP_Se_Po, ~MSB_KsessID, 
        KDF(~DUIK,
            <<aenc(<~supi, ~R>, pk_HN), ~idHN>, ~User_info_remote, 
             ~User_info_relay, (~RSC⊕KDF(~DUCK, <Nonce1, ~RSC>)), Nonce1, 
             ~SeCap, ~CP_Se_Po, ~MSB_KsessID>)
       >
   ),
   !Ltk_Prose( ~RSC, ~DUCK, ~DUIK ),
   !Relay( ~User_info_relay, ~supi_relay, ~idSN )
   ]
  --[
  Out_relay( ~transactionid, <aenc(<~supi, ~R>, pk_HN), ~idHN>, ~RSC,
             Nonce1
  ),
  Start_relay_Session( ~supi_relay )
  ]->
   [
   St_1_relay( ~transactionid, ~User_info_remote, ~supi,
               ~User_info_relay, ~idSN, ~idHN, ~supi_relay, ~RSC, Nonce1, ~SeCap,
               ~CP_Se_Po, ~MSB_KsessID
   ),
   SndS( ~transactionid, ~supi_relay, ~idSN,
         <'relaykeyrequest', ~transactionid, 
          <aenc(<~supi, ~R>, pk_HN), ~idHN>, ~RSC, Nonce1>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) AMF_receive_relaykeyrequest_step3:
   [
   !AMF( ~idSN, SNID ), Fr( ~cid ),
   !Relay( User_info_relay, supi_relay, ~idSN ),
   RcvS( transactionid, supi_relay, ~idSN,
         <'relaykeyrequest', transactionid, 
          <aenc(<~supi, ~R>, pk_HN), ~idHN>, RSC, Nonce1>
   )
   ]
  --[
  Start_AMF_Session( ~idSN ),
  In_AMF( transactionid, <aenc(<~supi, ~R>, pk_HN), ~idHN>, RSC,
          Nonce1
  )
  ]->
   [
   St_1_AMF( transactionid, ~idSN, ~supi, supi_relay, ~idHN, RSC,
             Nonce1, ~cid
   ),
   SndS( ~cid, ~idSN, ~idHN,
         <'ProseAuthenticateRequest', <aenc(<~supi, ~R>, pk_HN), ~idHN>, 
          RSC, Nonce1, SNID>
   )
   ]

  // loop breaker: [3]
  /* has exactly the trivial AC variant */

rule (modulo E) HN_receive_Nausf_UE_PAR_step4:
   [
   !HN( ~idHN, ~sk_HN ),
   RcvS( ~cid, idSN, ~idHN,
         <'ProseAuthenticateRequest', 
          <aenc(<~supi, ~R>, pk(~sk_HN)), ~idHN>, ~RSC, Nonce1, '5G', idSN>
   ),
   !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root, ~User_info_remote ),
   !Relay( ~User_info_relay, ~supi_relay, idSN ),
   Sqn_HN( ~supi, ~idHN, SqnHN, ~sqn_root, count ), Fr( ~RAND ),
   In( count )
   ]
  --[
  Sqn_HN_Invariance( ~idHN, ~supi, ('1'+SqnHN), ~sqn_root,
                     ('1'+count)
  ),
  Out_HN( <~RAND, 
           <(f5(~k, ~RAND)⊕('1'+SqnHN)), f1(~k, <('1'+SqnHN), ~RAND>)>, 
           <'5G', idSN>, 
           KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                       <<'5G', idSN>, (f5(~k, ~RAND)⊕('1'+SqnHN))>),
                   <'EAPAKA', ~supi, 'K_aut'>),
               <~RAND, 
                <(f5(~k, ~RAND)⊕('1'+SqnHN)), f1(~k, <('1'+SqnHN), ~RAND>)>, '5G', 
                idSN>)
          >
  ),
  Start_HN_Session( ~idHN )
  ]->
   [
   St_1_HN( ~idHN, ~supi, ~supi_relay, idSN, ~k, ('1'+SqnHN),
            f2(~k, ~RAND), ~RAND, ~sqn_root, ~sk_HN, ~cid, ~RSC, Nonce1
   ),
   Sqn_HN( ~supi, ~idHN, ('1'+SqnHN), ~sqn_root, ('1'+count) ),
   SndS( ~cid, ~idHN, idSN,
         <'ProseAuthenticateResponse', ~RAND, 
          <(f5(~k, ~RAND)⊕('1'+SqnHN)), f1(~k, <('1'+SqnHN), ~RAND>)>, 
          <'5G', idSN>, 
          KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                      <<'5G', idSN>, (f5(~k, ~RAND)⊕('1'+SqnHN))>),
                  <'EAPAKA', ~supi, 'K_aut'>),
              <~RAND, 
               <(f5(~k, ~RAND)⊕('1'+SqnHN)), f1(~k, <('1'+SqnHN), ~RAND>)>, '5G', 
               idSN>)
         >
   )
   ]

  // loop breakers: [1,4]
  /* has exactly the trivial AC variant */

rule (modulo E) AMF_receive_Nausf_UE_PAResponse_step5:
   [
   St_1_AMF( transactionid, ~idSN, ~supi, supi_relay, idHN, RSC,
             Nonce1, ~cid
   ),
   RcvS( ~cid, idHN, ~idSN,
         <'ProseAuthenticateResponse', RAND, AUTN, SNID, AT_MAC>
   )
   ]
  --[
  In_AMF2( <RAND, AUTN, SNID, AT_MAC> ),
  Out_AMF2( transactionid, RAND, AUTN, SNID, AT_MAC )
  ]->
   [
   St_2_AMF( transactionid, ~idSN, ~supi, supi_relay, idHN, RSC,
             Nonce1, ~cid, RAND
   ),
   SndS( transactionid, ~idSN, supi_relay,
         <'relay_auth_request', transactionid, RAND, AUTN, SNID, AT_MAC>
   )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) relay_receive_relay_auth_request_step6:
   [
   St_1_relay( ~transactionid, ~User_info_remote, ~supi,
               ~User_info_relay, ~idSN, idHN, ~supi_relay, ~RSC, Nonce1, ~SeCap,
               ~CP_Se_Po, ~MSB_KsessID
   ),
   RcvS( ~transactionid, ~idSN, ~supi_relay,
         <'relay_auth_request', ~transactionid, RAND, AUTN, SNID, AT_MAC>
   )
   ]
  --[ In_relay2( ~transactionid, RAND, AUTN, SNID, AT_MAC ) ]->
   [
   St_2_relay( ~transactionid, ~User_info_remote, ~supi,
               ~User_info_relay, ~idSN, idHN, ~supi_relay, ~RSC, Nonce1, ~SeCap,
               ~CP_Se_Po, ~MSB_KsessID, RAND
   ),
   Out( <RAND, AUTN, SNID, AT_MAC> )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) ue_receive_EAPReq_freshness_success_send_EAPResp_step7a:
   [
   St_1_UE( ~supi, ~supi_relay, ~User_info_remote, ~User_info_relay,
            ~idHN, ~k, ~sqn_root, ~RSC, ~Nonce1, ~DUCK, ~DUIK, ~SeCap,
            ~CP_Se_Po, ~UP_Se_Po, ~MSB_KsessID
   ),
   Sqn_UE( ~supi, ~idHN, SqnUE, ~sqn_root, count ),
   In( <RAND, 
        <(f5(~k, RAND)⊕(SqnUE+dif)), f1(~k, <(SqnUE+dif), RAND>)>, 
        <'5G', idSN>, 
        KDF(KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                    <<'5G', idSN>, (f5(~k, RAND)⊕(SqnUE+dif))>),
                <'EAPAKA', ~supi, 'K_aut'>),
            <RAND, <(f5(~k, RAND)⊕(SqnUE+dif)), f1(~k, <(SqnUE+dif), RAND>)>, 
             '5G', idSN>)
       >
   )
   ]
  --[
  Sqn_UE_Invariance( ~supi, ~idHN, (SqnUE+dif), ~sqn_root,
                     (count+dif)
  ),
  Sqn_UE_Change( ~supi, ~idHN, (SqnUE+dif) ),
  Sqn_UE_Use( ~supi, ~idHN, (SqnUE+dif) ),
  Running( ~supi, ~idHN, <'HN', 'remote', 'RSC', ~RSC> ),
  Running( ~supi, ~idHN, <'HN', 'remote', 'supi', ~supi> ),
  Running( ~supi, ~idHN,
           <'HN', 'remote', 'CP_PRUK', 
            KDF(KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                        <<'5G', idSN>, (f5(~k, RAND)⊕(SqnUE+dif))>),
                    <'EAPAKA', ~supi, 'K_ausf'>),
                <~supi, ~RSC>)
           >
  ),
  Running( ~supi, ~idHN,
           <'HN', 'remote', 'CP_PRUKID', 
            KDF(KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                        <<'5G', idSN>, (f5(~k, RAND)⊕(SqnUE+dif))>),
                    <'EAPAKA', ~supi, 'K_ausf'>),
                <'CP_PRUKID', ~RSC, ~supi>)
           >
  ),
  Running( ~supi, ~idHN, <'HN', 'remote', 'PLMNID', idSN> )
  ]->
   [
   St_2_UE( ~supi, ~supi_relay, ~User_info_remote, ~User_info_relay,
            ~idHN, ~k, ~sqn_root, ~RSC, ~Nonce1, ~DUCK, ~DUIK, ~SeCap,
            ~CP_Se_Po, ~UP_Se_Po, ~MSB_KsessID, idSN,
            KDF(KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                        <<'5G', idSN>, (f5(~k, RAND)⊕(SqnUE+dif))>),
                    <'EAPAKA', ~supi, 'K_ausf'>),
                <~supi, ~RSC>),
            KDF(KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                        <<'5G', idSN>, (f5(~k, RAND)⊕(SqnUE+dif))>),
                    <'EAPAKA', ~supi, 'K_ausf'>),
                <'CP_PRUKID', ~RSC, ~supi>)
   ),
   Out( <f2(~k, RAND), 
         KDF(KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                     <<'5G', idSN>, (f5(~k, RAND)⊕(SqnUE+dif))>),
                 <'EAPAKA', ~supi, 'K_aut'>),
             f2(~k, RAND))
        >
   ),
   Sqn_UE( ~supi, ~idHN, (SqnUE+dif), ~sqn_root, (count+dif) )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) ue_receive_EAPReq_fail_freshness_send_sync_failure_step7b:
   [
   St_1_UE( ~supi, ~supi_relay, ~User_info_remote, ~User_info_relay,
            ~idHN, ~k, ~sqn_root, ~RSC, ~Nonce1, ~DUCK, ~DUIK, ~SeCap,
            ~CP_Se_Po, ~UP_Se_Po, ~MSB_KsessID
   ),
   Sqn_UE( ~supi, ~idHN, SqnUE, ~sqn_root, count ),
   In( <RAND, <(SqnHN⊕f5(~k, RAND)), f1(~k, <SqnHN, RAND>)>, 
        <'5G', idSN>, 
        KDF(KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                    <<'5G', idSN>, (SqnHN⊕f5(~k, RAND))>),
                <'EAPAKA', ~supi, 'K_aut'>),
            <RAND, <(SqnHN⊕f5(~k, RAND)), f1(~k, <SqnHN, RAND>)>, '5G', idSN>)
       >
   ),
   In( count )
   ]
  --[
  Greater_Or_Equal_Than( SqnUE, SqnHN ),
  Sqn_UE_Invariance( ~supi, ~idHN, SqnUE, ~sqn_root, count ),
  Sqn_UE_Nochange( ~supi, ~idHN, SqnUE )
  ]->
   [
   Out( <(SqnUE⊕f5_star(~k, RAND)), f1_star(~k, <SqnUE, RAND>)> ),
   Sqn_UE( ~supi, ~idHN, SqnUE, ~sqn_root, count )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) ue_receive_EAPReq_fail_freshness_send_sync_failure_step7b:
     [
     St_1_UE( ~supi, ~supi_relay, ~User_info_remote, ~User_info_relay,
              ~idHN, ~k, ~sqn_root, ~RSC, ~Nonce1, ~DUCK, ~DUIK, ~SeCap,
              ~CP_Se_Po, ~UP_Se_Po, ~MSB_KsessID
     ),
     Sqn_UE( ~supi, ~idHN, SqnUE, ~sqn_root, count ),
     In( <RAND, <z, f1(~k, <SqnHN, RAND>)>, <'5G', idSN>, 
          KDF(KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>, <<'5G', idSN>, z>),
                  <'EAPAKA', ~supi, 'K_aut'>),
              <RAND, <z, f1(~k, <SqnHN, RAND>)>, '5G', idSN>)
         >
     ),
     In( count )
     ]
    --[
    Greater_Or_Equal_Than( SqnUE, SqnHN ),
    Sqn_UE_Invariance( ~supi, ~idHN, SqnUE, ~sqn_root, count ),
    Sqn_UE_Nochange( ~supi, ~idHN, SqnUE )
    ]->
     [
     Out( <z.1, f1_star(~k, <SqnUE, RAND>)> ),
     Sqn_UE( ~supi, ~idHN, SqnUE, ~sqn_root, count )
     ]
    variants (modulo AC)
     1. ~k    = ~k.31
        RAND  = RAND.35
        SqnHN = f5(~k.31, RAND.35)
        SqnUE = f5_star(~k.31, RAND.35)
        z     = zero
        z.1   = zero
    
     2. ~k    = ~k.31
        RAND  = RAND.35
        SqnHN = f5(~k.31, RAND.35)
        SqnUE = zero
        z     = zero
        z.1   = f5_star(~k.31, RAND.35)
    
     3. ~k    = ~k.31
        RAND  = RAND.35
        SqnHN = zero
        SqnUE = f5_star(~k.31, RAND.35)
        z     = f5(~k.31, RAND.35)
        z.1   = zero
    
     4. ~k    = ~k.31
        RAND  = RAND.35
        SqnHN = zero
        SqnUE = zero
        z     = f5(~k.31, RAND.35)
        z.1   = f5_star(~k.31, RAND.35)
    
     5. ~k    = ~k.32
        RAND  = RAND.36
        SqnHN = SqnHN.37
        SqnUE = f5_star(~k.32, RAND.36)
        z     = (SqnHN.37⊕f5(~k.32, RAND.36))
        z.1   = zero
    
     6. ~k    = ~k.32
        RAND  = RAND.36
        SqnHN = SqnHN.37
        SqnUE = zero
        z     = (SqnHN.37⊕f5(~k.32, RAND.36))
        z.1   = f5_star(~k.32, RAND.36)
    
     7. ~k    = ~k.33
        RAND  = RAND.37
        SqnHN = SqnHN.38
        SqnUE = SqnUE.39
        z     = (SqnHN.38⊕f5(~k.33, RAND.37))
        z.1   = (SqnUE.39⊕f5_star(~k.33, RAND.37))
    
     8. ~k    = ~k.33
        RAND  = RAND.37
        SqnHN = f5(~k.33, RAND.37)
        SqnUE = SqnUE.39
        z     = zero
        z.1   = (SqnUE.39⊕f5_star(~k.33, RAND.37))
    
     9. ~k    = ~k.33
        RAND  = RAND.37
        SqnHN = zero
        SqnUE = SqnUE.39
        z     = f5(~k.33, RAND.37)
        z.1   = (SqnUE.39⊕f5_star(~k.33, RAND.37))
    
    10. ~k    = ~k.36
        RAND  = RAND.40
        SqnHN = (z.45⊕f5(~k.36, RAND.40))
        SqnUE = SqnUE.42
        z     = z.45
        z.1   = (SqnUE.42⊕f5_star(~k.36, RAND.40))
    
    11. ~k    = ~k.36
        RAND  = RAND.40
        SqnHN = (z.45⊕f5(~k.36, RAND.40))
        SqnUE = f5_star(~k.36, RAND.40)
        z     = z.45
        z.1   = zero
    
    12. ~k    = ~k.36
        RAND  = RAND.40
        SqnHN = (z.45⊕f5(~k.36, RAND.40))
        SqnUE = zero
        z     = z.45
        z.1   = f5_star(~k.36, RAND.40)
    
    13. ~k    = ~k.40
        RAND  = RAND.44
        SqnHN = SqnHN.45
        SqnUE = (z.53⊕f5_star(~k.40, RAND.44))
        z     = (SqnHN.45⊕f5(~k.40, RAND.44))
        z.1   = z.53
    
    14. ~k    = ~k.40
        RAND  = RAND.44
        SqnHN = f5(~k.40, RAND.44)
        SqnUE = (z.53⊕f5_star(~k.40, RAND.44))
        z     = zero
        z.1   = z.53
    
    15. ~k    = ~k.40
        RAND  = RAND.44
        SqnHN = zero
        SqnUE = (z.53⊕f5_star(~k.40, RAND.44))
        z     = f5(~k.40, RAND.44)
        z.1   = z.53
    
    16. ~k    = ~k.40
        RAND  = RAND.44
        SqnHN = (z.49⊕f5(~k.40, RAND.44))
        SqnUE = (z.53⊕f5_star(~k.40, RAND.44))
        z     = z.49
        z.1   = z.53
    // loop breaker: [1]
  */

rule (modulo E) relay_receive_EAPResp_step8a:
   [
   St_2_relay( ~transactionid, ~User_info_remote, ~supi,
               ~User_info_relay, ~idSN, ~idHN, ~supi_relay, ~RSC, Nonce1, ~SeCap,
               ~CP_Se_Po, ~MSB_KsessID, RAND
   ),
   In( <XRES, AT_MAC_UE> )
   ]
  --[
  Out_relay4( XRES, AT_MAC_UE ),
  Running( ~supi_relay, ~idSN, <'SN', 'relay', 'RSC', ~RSC> ),
  Running( ~supi_relay, ~idSN,
           <'SN', 'relay', 'supi_relay', ~supi_relay>
  ),
  Running( ~supi_relay, ~idSN, <'SN', 'relay', 'PLMNID', ~idSN> )
  ]->
   [
   St_3_relay( ~transactionid, ~User_info_remote, ~supi,
               ~User_info_relay, ~idSN, ~idHN, ~supi_relay, ~RSC, Nonce1, ~SeCap,
               ~CP_Se_Po, ~MSB_KsessID, RAND
   ),
   SndS( ~transactionid, ~supi_relay, ~idSN,
         <'relayauthresponse', XRES, AT_MAC_UE>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) relay_receive_syncFailure_authResp_step8b:
   [
   St_2_relay( ~transactionid, ~User_info_remote, ~supi,
               ~User_info_relay, ~idSN, idHN, ~supi_relay, ~RSC, Nonce1, ~SeCap,
               ~CP_Se_Po, ~MSB_KsessID, RAND
   ),
   In( AUTS )
   ]
  --[ Out_relay5( AUTS ) ]->
   [ SndS( ~transactionid, ~supi_relay, ~idSN, <'resync', AUTS> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) AMF_receive_relayauthResponse_step9a:
   [
   St_2_AMF( transactionid, ~idSN, ~supi, supi_relay, idHN, RSC,
             Nonce1, ~cid, RAND
   ),
   RcvS( transactionid, supi_relay, ~idSN,
         <'relayauthresponse', XRES, AT_MAC_UE>
   )
   ]
  --[
  In_AMF4( XRES, AT_MAC_UE ),
  Running( ~idSN, idHN, <'HN', 'SN', 'RSC', RSC> ),
  Running( ~idSN, supi_relay,
           <'relay', 'SN', 'supi_relay', supi_relay>
  ),
  Running( ~idSN, supi_relay, <'relay', 'SN', 'RSC', RSC> ),
  Running( ~idSN, supi_relay, <'relay', 'SN', 'PLMNID', ~idSN> )
  ]->
   [
   St_3_AMF( transactionid, ~idSN, ~supi, supi_relay, idHN, RSC,
             Nonce1, ~cid, RAND
   ),
   SndS( ~cid, ~idSN, idHN,
         <'ProseAuthenticateRequest2', XRES, AT_MAC_UE>
   )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) AMF_receive_syncFailure_send_authSync_step9b:
   [
   St_2_AMF( transactionid, ~idSN, ~supi, supi_relay, idHN, RSC,
             Nonce1, ~cid, RAND
   ),
   RcvS( transactionid, supi_relay, ~idSN, <'resync', AUTS> )
   ]
  --[ In_AMF5( AUTS ) ]->
   [ SndS( ~cid, ~idSN, idHN, <'resync', RAND, AUTS> ) ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) HN_receive_Nausf_UE_PAR2_step10a:
   [
   St_1_HN( ~idHN, ~supi, ~supi_relay, idSN, ~k, SqnNext, XRES, ~RAND,
            ~sqn_root, ~sk_HN, ~cid, RSC, Nonce1
   ),
   RcvS( ~cid, idSN, ~idHN,
         <'ProseAuthenticateRequest2', XRES, 
          KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                      <<'5G', idSN>, (SqnNext⊕f5(~k, ~RAND))>),
                  <'EAPAKA', ~supi, 'K_aut'>),
              XRES)
         >
   ),
   Fr( ~Nonce2 )
   ]
  --[
  HN_End( ),
  Out_HN2( <
            KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                        <<'5G', idSN>, (SqnNext⊕f5(~k, ~RAND))>),
                    <'EAPAKA', ~supi, 'K_ausf'>),
                <'CP_PRUKID', RSC, ~supi>), 
            KDF(KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                            <<'5G', idSN>, (SqnNext⊕f5(~k, ~RAND))>),
                        <'EAPAKA', ~supi, 'K_ausf'>),
                    <~supi, RSC>),
                <Nonce1, ~Nonce2>), 
            ~Nonce2>
  ),
  Secret( <'HN', ~idHN>, 'CPPRUK',
          KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                      <<'5G', idSN>, (SqnNext⊕f5(~k, ~RAND))>),
                  <'EAPAKA', ~supi, 'K_ausf'>),
              <~supi, RSC>)
  ),
  Secret( <'HN', ~idHN>, 'CPPRUKID',
          KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                      <<'5G', idSN>, (SqnNext⊕f5(~k, ~RAND))>),
                  <'EAPAKA', ~supi, 'K_ausf'>),
              <'CP_PRUKID', RSC, ~supi>)
  ),
  Secret( <'HN', ~idHN>, 'RSC', RSC ),
  Secret( <'HN', ~idHN>, 'supi', ~supi ),
  Secret( <'HN', ~idHN>, 'K_NRprose',
          KDF(KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                          <<'5G', idSN>, (SqnNext⊕f5(~k, ~RAND))>),
                      <'EAPAKA', ~supi, 'K_ausf'>),
                  <~supi, RSC>),
              <Nonce1, ~Nonce2>)
  ),
  Running( ~idHN, idSN, <'SN', 'HN', 'RSC', RSC> ),
  Running( ~idHN, ~supi, <'remote', 'HN', 'RSC', RSC> ),
  Running( ~idHN, ~supi,
           <'remote', 'HN', 'CP_PRUK', 
            KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                        <<'5G', idSN>, (SqnNext⊕f5(~k, ~RAND))>),
                    <'EAPAKA', ~supi, 'K_ausf'>),
                <~supi, RSC>)
           >
  ),
  Running( ~idHN, ~supi,
           <'remote', 'HN', 'CP_PRUKID', 
            KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                        <<'5G', idSN>, (SqnNext⊕f5(~k, ~RAND))>),
                    <'EAPAKA', ~supi, 'K_ausf'>),
                <'CP_PRUKID', RSC, ~supi>)
           >
  ),
  Running( ~idHN, ~supi, <'remote', 'HN', 'supi', ~supi> ),
  Running( ~idHN, ~supi, <'remote', 'HN', 'PLMNID', idSN> ),
  Running( ~idHN, ~supi_relay, <'relay', 'HN', 'RSC', RSC> ),
  Running( ~idHN, ~supi_relay,
           <'relay', 'HN', 'CP_PRUKID', 
            KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                        <<'5G', idSN>, (SqnNext⊕f5(~k, ~RAND))>),
                    <'EAPAKA', ~supi, 'K_ausf'>),
                <'CP_PRUKID', RSC, ~supi>)
           >
  ),
  Running( ~idHN, ~supi_relay,
           <'relay', 'HN', 'K_NRprose', 
            KDF(KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                            <<'5G', idSN>, (SqnNext⊕f5(~k, ~RAND))>),
                        <'EAPAKA', ~supi, 'K_ausf'>),
                    <~supi, RSC>),
                <Nonce1, ~Nonce2>)
           >
  ),
  Commit( ~idHN, ~supi, <'HN', 'remote', 'RSC', RSC> ),
  Commit( ~idHN, ~supi, <'HN', 'remote', 'supi', ~supi> ),
  Commit( ~idHN, ~supi,
          <'HN', 'remote', 'CP_PRUK', 
           KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                       <<'5G', idSN>, (SqnNext⊕f5(~k, ~RAND))>),
                   <'EAPAKA', ~supi, 'K_ausf'>),
               <~supi, RSC>)
          >
  ),
  Commit( ~idHN, ~supi,
          <'HN', 'remote', 'CP_PRUKID', 
           KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                       <<'5G', idSN>, (SqnNext⊕f5(~k, ~RAND))>),
                   <'EAPAKA', ~supi, 'K_ausf'>),
               <'CP_PRUKID', RSC, ~supi>)
          >
  ),
  Commit( ~idHN, ~supi, <'HN', 'remote', 'PLMNID', idSN> ),
  Commit( ~idHN, idSN, <'HN', 'SN', 'RSC', RSC> ), Honest( ~supi ),
  Honest( ~supi_relay ), Honest( ~idHN ), Honest( idSN )
  ]->
   [
   SndS( ~cid, ~idHN, idSN,
         <'ProseAuthenticateResponse2', 
          KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                      <<'5G', idSN>, (SqnNext⊕f5(~k, ~RAND))>),
                  <'EAPAKA', ~supi, 'K_ausf'>),
              <'CP_PRUKID', RSC, ~supi>), 
          KDF(KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                          <<'5G', idSN>, (SqnNext⊕f5(~k, ~RAND))>),
                      <'EAPAKA', ~supi, 'K_ausf'>),
                  <~supi, RSC>),
              <Nonce1, ~Nonce2>), 
          ~Nonce2>
   )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) HN_receive_Nausf_UE_PAR2_step10a:
     [
     St_1_HN( ~idHN, ~supi, ~supi_relay, idSN, ~k, SqnNext, XRES, ~RAND,
              ~sqn_root, ~sk_HN, ~cid, RSC, Nonce1
     ),
     RcvS( ~cid, idSN, ~idHN,
           <'ProseAuthenticateRequest2', XRES, 
            KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>, <<'5G', idSN>, z>),
                    <'EAPAKA', ~supi, 'K_aut'>),
                XRES)
           >
     ),
     Fr( ~Nonce2 )
     ]
    --[
    HN_End( ),
    Out_HN2( <
              KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>, <<'5G', idSN>, z>),
                      <'EAPAKA', ~supi, 'K_ausf'>),
                  <'CP_PRUKID', RSC, ~supi>), 
              KDF(KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>, <<'5G', idSN>, z>),
                          <'EAPAKA', ~supi, 'K_ausf'>),
                      <~supi, RSC>),
                  <Nonce1, ~Nonce2>), 
              ~Nonce2>
    ),
    Secret( <'HN', ~idHN>, 'CPPRUK',
            KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>, <<'5G', idSN>, z>),
                    <'EAPAKA', ~supi, 'K_ausf'>),
                <~supi, RSC>)
    ),
    Secret( <'HN', ~idHN>, 'CPPRUKID',
            KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>, <<'5G', idSN>, z>),
                    <'EAPAKA', ~supi, 'K_ausf'>),
                <'CP_PRUKID', RSC, ~supi>)
    ),
    Secret( <'HN', ~idHN>, 'RSC', RSC ),
    Secret( <'HN', ~idHN>, 'supi', ~supi ),
    Secret( <'HN', ~idHN>, 'K_NRprose',
            KDF(KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>, <<'5G', idSN>, z>),
                        <'EAPAKA', ~supi, 'K_ausf'>),
                    <~supi, RSC>),
                <Nonce1, ~Nonce2>)
    ),
    Running( ~idHN, idSN, <'SN', 'HN', 'RSC', RSC> ),
    Running( ~idHN, ~supi, <'remote', 'HN', 'RSC', RSC> ),
    Running( ~idHN, ~supi,
             <'remote', 'HN', 'CP_PRUK', 
              KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>, <<'5G', idSN>, z>),
                      <'EAPAKA', ~supi, 'K_ausf'>),
                  <~supi, RSC>)
             >
    ),
    Running( ~idHN, ~supi,
             <'remote', 'HN', 'CP_PRUKID', 
              KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>, <<'5G', idSN>, z>),
                      <'EAPAKA', ~supi, 'K_ausf'>),
                  <'CP_PRUKID', RSC, ~supi>)
             >
    ),
    Running( ~idHN, ~supi, <'remote', 'HN', 'supi', ~supi> ),
    Running( ~idHN, ~supi, <'remote', 'HN', 'PLMNID', idSN> ),
    Running( ~idHN, ~supi_relay, <'relay', 'HN', 'RSC', RSC> ),
    Running( ~idHN, ~supi_relay,
             <'relay', 'HN', 'CP_PRUKID', 
              KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>, <<'5G', idSN>, z>),
                      <'EAPAKA', ~supi, 'K_ausf'>),
                  <'CP_PRUKID', RSC, ~supi>)
             >
    ),
    Running( ~idHN, ~supi_relay,
             <'relay', 'HN', 'K_NRprose', 
              KDF(KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>, <<'5G', idSN>, z>),
                          <'EAPAKA', ~supi, 'K_ausf'>),
                      <~supi, RSC>),
                  <Nonce1, ~Nonce2>)
             >
    ),
    Commit( ~idHN, ~supi, <'HN', 'remote', 'RSC', RSC> ),
    Commit( ~idHN, ~supi, <'HN', 'remote', 'supi', ~supi> ),
    Commit( ~idHN, ~supi,
            <'HN', 'remote', 'CP_PRUK', 
             KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>, <<'5G', idSN>, z>),
                     <'EAPAKA', ~supi, 'K_ausf'>),
                 <~supi, RSC>)
            >
    ),
    Commit( ~idHN, ~supi,
            <'HN', 'remote', 'CP_PRUKID', 
             KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>, <<'5G', idSN>, z>),
                     <'EAPAKA', ~supi, 'K_ausf'>),
                 <'CP_PRUKID', RSC, ~supi>)
            >
    ),
    Commit( ~idHN, ~supi, <'HN', 'remote', 'PLMNID', idSN> ),
    Commit( ~idHN, idSN, <'HN', 'SN', 'RSC', RSC> ), Honest( ~supi ),
    Honest( ~supi_relay ), Honest( ~idHN ), Honest( idSN )
    ]->
     [
     SndS( ~cid, ~idHN, idSN,
           <'ProseAuthenticateResponse2', 
            KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>, <<'5G', idSN>, z>),
                    <'EAPAKA', ~supi, 'K_ausf'>),
                <'CP_PRUKID', RSC, ~supi>), 
            KDF(KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>, <<'5G', idSN>, z>),
                        <'EAPAKA', ~supi, 'K_ausf'>),
                    <~supi, RSC>),
                <Nonce1, ~Nonce2>), 
            ~Nonce2>
     )
     ]
    variants (modulo AC)
    1. ~RAND = ~RAND.22
       ~k    = ~k.25
       SqnNext
             = f5(~k.25, ~RAND.22)
       z     = zero
    
    2. ~RAND = ~RAND.22
       ~k    = ~k.25
       SqnNext
             = zero
       z     = f5(~k.25, ~RAND.22)
    
    3. ~RAND = ~RAND.29
       ~k    = ~k.32
       SqnNext
             = SqnNext.39
       z     = (SqnNext.39⊕f5(~k.32, ~RAND.29))
    
    4. ~RAND = ~RAND.34
       ~k    = ~k.37
       SqnNext
             = (z.49⊕f5(~k.37, ~RAND.34))
       z     = z.49
    // loop breaker: [1]
  */

rule (modulo E) AMF_receive_Nausf_UE_PAResponse2_step11:
   [
   St_3_AMF( transactionid, ~idSN, ~supi, supi_relay, idHN, RSC,
             Nonce1, ~cid, RAND
   ),
   RcvS( ~cid, idHN, ~idSN,
         <'ProseAuthenticateResponse2', CP_PRUKID, K_NRprose, ~Nonce2>
   )
   ]
  --[
  In_AMF3( <CP_PRUKID, K_NRprose, ~Nonce2> ), AMF_End( ),
  Secret( <'SN', ~idSN>, 'CPPRUKID', CP_PRUKID ),
  Secret( <'SN', ~idSN>, 'RSC', RSC ),
  Secret( <'SN', ~idSN>, 'K_NRprose', K_NRprose ),
  Commit( ~idSN, supi_relay, <'SN', 'relay', 'RSC', RSC> ),
  Commit( ~idSN, supi_relay,
          <'SN', 'relay', 'supi_relay', supi_relay>
  ),
  Commit( ~idSN, supi_relay, <'SN', 'relay', 'PLMNID', ~idSN> ),
  Commit( ~idSN, idHN, <'SN', 'HN', 'RSC', RSC> ), Honest( ~supi ),
  Honest( supi_relay ), Honest( idHN ), Honest( ~idSN )
  ]->
   [
   St_4_AMF( transactionid, ~idSN, ~supi, supi_relay, idHN, RSC,
             Nonce1, ~cid, RAND, K_NRprose, CP_PRUKID, ~Nonce2
   ),
   SndS( transactionid, ~idSN, supi_relay,
         <'relaykeyresponse', CP_PRUKID, K_NRprose, ~Nonce2>
   )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) relay_receive_relaykeyresponse_step12:
   [
   Fr( ~LSB_KsessID ),
   St_3_relay( ~transactionid, ~User_info_remote, ~supi,
               ~User_info_relay, ~idSN, idHN, ~supi_relay, ~RSC, Nonce1, ~SeCap,
               ~CP_Se_Po, ~MSB_KsessID, RAND
   ),
   RcvS( ~transactionid, ~idSN, ~supi_relay,
         <'relaykeyresponse', CP_PRUKID, K_NRprose, ~Nonce2>
   )
   ]
  --[
  Running( ~supi_relay, ~supi,
           <'remote', 'relay', 'K_sessID', ~LSB_KsessID, ~MSB_KsessID>
  ),
  Running( ~supi_relay, ~supi,
           <'remote', 'relay', 'K_relay_sess', 
            KDF(K_NRprose, <Nonce1, ~Nonce2>)>
  ),
  Running( ~supi_relay, ~supi,
           <'remote', 'relay', 'K_relay_enc', 
            KDF(KDF(K_NRprose, <Nonce1, ~Nonce2>),
                <'0x00', 'confidential_algorithm'>)
           >
  ),
  Running( ~supi_relay, ~supi,
           <'remote', 'relay', 'K_relay_int', 
            KDF(KDF(K_NRprose, <Nonce1, ~Nonce2>),
                <'0x01', 'integrity_algorithm'>)
           >
  ),
  Running( ~supi_relay, ~supi,
           <'remote', 'relay', 'CP_PRUKID', CP_PRUKID>
  ),
  Running( ~supi_relay, ~supi, <'remote', 'relay', 'RSC', ~RSC> ),
  Running( ~supi_relay, ~supi, <'remote', 'relay', 'SeCap', ~SeCap>
  ),
  Running( ~supi_relay, ~supi,
           <'remote', 'relay', 'CPsecurity_policy', ~CP_Se_Po>
  ),
  Running( ~supi_relay, ~supi,
           <'remote', 'relay', 'K_NRprose', K_NRprose>
  )
  ]->
   [
   St_4_relay( ~transactionid, ~User_info_remote, ~supi,
               ~User_info_relay, ~idSN, idHN, ~supi_relay, ~RSC, Nonce1, ~SeCap,
               ~CP_Se_Po, ~MSB_KsessID, RAND, K_NRprose, CP_PRUKID, ~Nonce2,
               KDF(K_NRprose, <Nonce1, ~Nonce2>),
               KDF(KDF(K_NRprose, <Nonce1, ~Nonce2>),
                   <'0x00', 'confidential_algorithm'>),
               KDF(KDF(K_NRprose, <Nonce1, ~Nonce2>),
                   <'0x01', 'integrity_algorithm'>),
               <~LSB_KsessID, ~MSB_KsessID>
   ),
   Out( <'DSMCommand', ~Nonce2, ~CP_Se_Po, ~LSB_KsessID, 
         KDF(KDF(KDF(K_NRprose, <Nonce1, ~Nonce2>),
                 <'0x01', 'integrity_algorithm'>),
             <~CP_Se_Po, ~Nonce2, ~LSB_KsessID>)
        >
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) HN_receive_authSync_step10b:
   [
   St_1_HN( ~idHN, ~supi, ~supi_relay, idSN, ~k, SqnNext, XRES, ~RAND,
            ~sqn_root, ~sk_HN, ~cid, RSC, Nonce1
   ),
   Sqn_HN( ~supi, ~idHN, SqnHN, ~sqn_root, count ),
   RcvS( ~cid, idSN, ~idHN,
         <'resync', ~RAND, (f5_star(~k, ~RAND)⊕(SqnHN+dif)), 
          f1_star(~k, <(SqnHN+dif), ~RAND>)>
   ),
   In( (count+dif) )
   ]
  --[
  Sqn_HN_Invariance( ~idHN, ~supi, (SqnHN+dif), ~sqn_root,
                     (count+dif)
  ),
  HN_Resync_End( (count+dif) )
  ]->
   [ Sqn_HN( ~supi, ~idHN, (SqnHN+dif), ~sqn_root, (count+dif) ) ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) ue_receive_DSMCommand_step13:
   [
   St_2_UE( ~supi, ~supi_relay, ~User_info_remote, ~User_info_relay,
            ~idHN, ~k, ~sqn_root, ~RSC, ~Nonce1, ~DUCK, ~DUIK, ~SeCap,
            ~CP_Se_Po, ~UP_Se_Po, ~MSB_KsessID, idSN, CP_PRUK, CP_PRUKID
   ),
   In( <'DSMCommand', ~Nonce2, ~CP_Se_Po, ~LSB_KsessID, 
        KDF(KDF(KDF(KDF(CP_PRUK, <~Nonce1, ~Nonce2>), <~Nonce1, ~Nonce2>),
                <'0x01', 'integrity_algorithm'>),
            <~CP_Se_Po, ~Nonce2, ~LSB_KsessID>)
       >
   )
   ]
  --[
  Running( ~supi, ~supi_relay,
           <'relay', 'remote', 'CP_PRUKID', CP_PRUKID>
  ),
  Running( ~supi, ~supi_relay, <'relay', 'remote', 'RSC', ~RSC> ),
  Running( ~supi, ~supi_relay,
           <'relay', 'remote', 'K_sessID', ~LSB_KsessID, ~MSB_KsessID>
  ),
  Running( ~supi, ~supi_relay,
           <'relay', 'remote', 'K_relay_sess', 
            KDF(KDF(CP_PRUK, <~Nonce1, ~Nonce2>), <~Nonce1, ~Nonce2>)>
  ),
  Running( ~supi, ~supi_relay,
           <'relay', 'remote', 'K_relay_enc', 
            KDF(KDF(KDF(CP_PRUK, <~Nonce1, ~Nonce2>), <~Nonce1, ~Nonce2>),
                <'0x00', 'confidential_algorithm'>)
           >
  ),
  Running( ~supi, ~supi_relay,
           <'relay', 'remote', 'K_relay_int', 
            KDF(KDF(KDF(CP_PRUK, <~Nonce1, ~Nonce2>), <~Nonce1, ~Nonce2>),
                <'0x01', 'integrity_algorithm'>)
           >
  ),
  Running( ~supi, ~supi_relay, <'relay', 'remote', 'SeCap', ~SeCap>
  ),
  Running( ~supi, ~supi_relay,
           <'relay', 'remote', 'CPsecurity_policy', ~CP_Se_Po>
  ),
  Running( ~supi, ~supi_relay,
           <'relay', 'remote', 'UPsecurity_policy', ~UP_Se_Po>
  ),
  Running( ~supi, ~supi_relay,
           <'relay', 'remote', 'K_NRprose', KDF(CP_PRUK, <~Nonce1, ~Nonce2>)>
  )
  ]->
   [
   St_3_UE( ~supi, ~supi_relay, ~User_info_remote, ~User_info_relay,
            ~idHN, ~k, ~sqn_root, ~RSC, ~Nonce1, ~DUCK, ~DUIK, ~SeCap,
            ~CP_Se_Po, ~UP_Se_Po, ~MSB_KsessID, idSN, CP_PRUK, CP_PRUKID,
            KDF(CP_PRUK, <~Nonce1, ~Nonce2>),
            KDF(KDF(CP_PRUK, <~Nonce1, ~Nonce2>), <~Nonce1, ~Nonce2>),
            KDF(KDF(KDF(CP_PRUK, <~Nonce1, ~Nonce2>), <~Nonce1, ~Nonce2>),
                <'0x00', 'confidential_algorithm'>),
            KDF(KDF(KDF(CP_PRUK, <~Nonce1, ~Nonce2>), <~Nonce1, ~Nonce2>),
                <'0x01', 'integrity_algorithm'>),
            <~LSB_KsessID, ~MSB_KsessID>
   ),
   Out( <'DSMComplete', <~LSB_KsessID, ~MSB_KsessID>, 
         senc(<~UP_Se_Po, 
               Int(KDF(KDF(KDF(CP_PRUK, <~Nonce1, ~Nonce2>), <~Nonce1, ~Nonce2>),
                       <'0x01', 'integrity_algorithm'>),
                   <~UP_Se_Po, ~LSB_KsessID, ~MSB_KsessID>)
              >,
              KDF(KDF(KDF(CP_PRUK, <~Nonce1, ~Nonce2>), <~Nonce1, ~Nonce2>),
                  <'0x00', 'confidential_algorithm'>))
        >
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) relay_receive_DSMComplete_step14:
   [
   St_4_relay( ~transactionid, ~User_info_remote, ~supi,
               ~User_info_relay, ~idSN, idHN, ~supi_relay, ~RSC, Nonce1, ~SeCap,
               ~CP_Se_Po, ~MSB_KsessID, RAND, K_NRprose, CP_PRUKID, ~Nonce2,
               K_relay_sess, K_relay_enc, K_relay_int, KsessID
   ),
   In( <'DSMComplete', KsessID, 
        senc(<~UP_Se_Po, Int(K_relay_int, <~UP_Se_Po, KsessID>)>,
             K_relay_enc)
       >
   )
   ]
  --[
  Commit( ~supi_relay, ~supi,
          <'relay', 'remote', 'CP_PRUKID', CP_PRUKID>
  ),
  Commit( ~supi_relay, ~supi, <'relay', 'remote', 'RSC', ~RSC> ),
  Commit( ~supi_relay, ~supi,
          <'relay', 'remote', 'K_sessID', KsessID>
  ),
  Commit( ~supi_relay, ~supi,
          <'relay', 'remote', 'K_relay_sess', K_relay_sess>
  ),
  Commit( ~supi_relay, ~supi,
          <'relay', 'remote', 'K_relay_enc', K_relay_enc>
  ),
  Commit( ~supi_relay, ~supi,
          <'relay', 'remote', 'K_relay_int', K_relay_int>
  ),
  Commit( ~supi_relay, ~supi, <'relay', 'remote', 'SeCap', ~SeCap> ),
  Commit( ~supi_relay, ~supi,
          <'relay', 'remote', 'CPsecurity_policy', ~CP_Se_Po>
  ),
  Commit( ~supi_relay, ~supi,
          <'relay', 'remote', 'UPsecurity_policy', ~UP_Se_Po>
  ),
  Commit( ~supi_relay, ~supi,
          <'relay', 'remote', 'K_NRprose', K_NRprose>
  ),
  Commit( ~supi_relay, ~idSN,
          <'relay', 'SN', 'supi_relay', ~supi_relay>
  ),
  Commit( ~supi_relay, ~idSN, <'relay', 'SN', 'RSC', ~RSC> ),
  Commit( ~supi_relay, ~idSN, <'relay', 'SN', 'PLMNID', ~idSN> ),
  Commit( ~supi_relay, idHN, <'relay', 'HN', 'RSC', ~RSC> ),
  Commit( ~supi_relay, idHN, <'relay', 'HN', 'CP_PRUKID', CP_PRUKID>
  ),
  Commit( ~supi_relay, idHN, <'relay', 'HN', 'K_NRprose', K_NRprose>
  ),
  Secret( <'relay', ~supi_relay>, 'K_relay_sess', K_relay_sess ),
  Secret( <'relay', ~supi_relay>, 'K_relay_enc', K_relay_enc ),
  Secret( <'relay', ~supi_relay>, 'K_relay_int', K_relay_int ),
  Secret( <'relay', ~supi_relay>, 'K_NRprose', K_NRprose ),
  Secret( <'relay', ~supi_relay>, 'CPPRUKID', CP_PRUKID ),
  Secret( <'relay', ~supi_relay>, 'RSC', ~RSC ),
  Running( ~supi_relay, ~supi,
           <'remote', 'relay', 'UPsecurity_policy', ~UP_Se_Po>
  ),
  Honest( ~supi ), Honest( ~supi_relay ), Honest( idHN ),
  Honest( ~idSN )
  ]->
   [
   Out( <'DCA', KsessID, 
         senc(<~User_info_relay, 
               Int(K_relay_int, <~User_info_relay, KsessID>)>,
              K_relay_enc)
        >
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) ue_receive_DCA_step15:
   [
   St_3_UE( ~supi, ~supi_relay, ~User_info_remote, ~User_info_relay,
            ~idHN, ~k, ~sqn_root, ~RSC, ~Nonce1, ~DUCK, ~DUIK, ~SeCap,
            ~CP_Se_Po, ~UP_Se_Po, ~MSB_KsessID, idSN, CP_PRUK, CP_PRUKID,
            K_NRprose, K_relay_sess, K_relay_enc, K_relay_int, KsessID
   ),
   !Relay( ~User_info_relay, ~supi_relay, idSN ),
   In( <'DCA', KsessID, 
        senc(<~User_info_relay, 
              Int(K_relay_int, <~User_info_relay, KsessID>)>,
             K_relay_enc)
       >
   )
   ]
  --[
  UE_End( ),
  Secret( <'remote', ~supi>, 'K_relay_sess', K_relay_sess ),
  Secret( <'remote', ~supi>, 'K_relay_enc', K_relay_enc ),
  Secret( <'remote', ~supi>, 'K_relay_int', K_relay_int ),
  Secret( <'remote', ~supi>, 'K_NRprose', K_NRprose ),
  Secret( <'remote', ~supi>, 'CPPRUKID', CP_PRUKID ),
  Secret( <'remote', ~supi>, 'CPPRUK', CP_PRUK ),
  Secret( <'remote', ~supi>, 'supi', ~supi ),
  Secret( <'remote', ~supi>, 'RSC', ~RSC ),
  Commit( ~supi, ~supi_relay,
          <'remote', 'relay', 'K_sessID', KsessID>
  ),
  Commit( ~supi, ~supi_relay,
          <'remote', 'relay', 'K_relay_sess', K_relay_sess>
  ),
  Commit( ~supi, ~supi_relay,
          <'remote', 'relay', 'K_relay_enc', K_relay_enc>
  ),
  Commit( ~supi, ~supi_relay,
          <'remote', 'relay', 'K_relay_int', K_relay_int>
  ),
  Commit( ~supi, ~supi_relay,
          <'remote', 'relay', 'CP_PRUKID', CP_PRUKID>
  ),
  Commit( ~supi, ~supi_relay, <'remote', 'relay', 'RSC', ~RSC> ),
  Commit( ~supi, ~supi_relay,
          <'remote', 'relay', 'CPsecurity_policy', ~CP_Se_Po>
  ),
  Commit( ~supi, ~supi_relay,
          <'remote', 'relay', 'UPsecurity_policy', ~UP_Se_Po>
  ),
  Commit( ~supi, ~supi_relay,
          <'remote', 'relay', 'K_NRprose', K_NRprose>
  ),
  Commit( ~supi, ~supi_relay, <'remote', 'relay', 'SeCap', ~SeCap> ),
  Commit( ~supi, ~idHN, <'remote', 'HN', 'RSC', ~RSC> ),
  Commit( ~supi, ~idHN, <'remote', 'HN', 'supi', ~supi> ),
  Commit( ~supi, ~idHN, <'remote', 'HN', 'CP_PRUK', CP_PRUK> ),
  Commit( ~supi, ~idHN, <'remote', 'HN', 'CP_PRUKID', CP_PRUKID> ),
  Commit( ~supi, ~idHN, <'remote', 'HN', 'PLMNID', idSN> ),
  Honest( ~supi ), Honest( ~supi_relay ), Honest( ~idHN ),
  Honest( idSN ), Remote_EndConf( )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

restriction subscribe_once:
  "∀ HN1 HN2 supi #i #j.
    ((Subscribe( supi, HN1 ) @ #i) ∧ (Subscribe( supi, HN2 ) @ #j)) ⇒
    ((#i = #j) ∧ (HN1 = HN2))"
  // safety formula

restriction greater_or_equal_than:
  "∀ x y #i.
    (Greater_Or_Equal_Than( x, y ) @ #i) ⇒ (¬(∃ z. (x+z) = y))"
  // safety formula

lemma dummy:
  all-traces "¬(⊥)"
/*
guarded formula characterizing all counter-examples:
"⊥"
*/
by sorry

lemma src_1 [sources]:
  all-traces
  "∀ transactionid suci RSC Nonce1 #i.
    (In_AMF( transactionid, suci, RSC, Nonce1 ) @ #i) ⇒
    ((∃ #j.
       (Out_relay( transactionid, suci, RSC, Nonce1 ) @ #j) ∧ (#j < #i)) ∨
     (∃ #j.
       (Injected( <'relaykeyrequest', transactionid, suci, RSC, Nonce1>
        ) @ #j) ∧
       (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ transactionid suci RSC Nonce1 #i.
  (In_AMF( transactionid, suci, RSC, Nonce1 ) @ #i)
 ∧
  (∀ #j.
    (Out_relay( transactionid, suci, RSC, Nonce1 ) @ #j)
   ⇒
    ¬(#j < #i)) ∧
  (∀ #j.
    (Injected( <'relaykeyrequest', transactionid, suci, RSC, Nonce1>
     ) @ #j)
   ⇒
    ¬(#j < #i))"
*/
by sorry

lemma src_2 [sources]:
  all-traces
  "∀ RAND AUTN SNID AT_MAC #i.
    (In_AMF2( <RAND, AUTN, SNID, AT_MAC> ) @ #i) ⇒
    ((∃ #j. (Out_HN( <RAND, AUTN, SNID, AT_MAC> ) @ #j) ∧ (#j < #i)) ∨
     (∃ #j.
       (Injected( <'ProseAuthenticateResponse', RAND, AUTN, SNID, AT_MAC>
        ) @ #j) ∧
       (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ RAND AUTN SNID AT_MAC #i.
  (In_AMF2( <RAND, AUTN, SNID, AT_MAC> ) @ #i)
 ∧
  (∀ #j. (Out_HN( <RAND, AUTN, SNID, AT_MAC> ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j.
    (Injected( <'ProseAuthenticateResponse', RAND, AUTN, SNID, AT_MAC>
     ) @ #j)
   ⇒
    ¬(#j < #i))"
*/
by sorry

lemma src_3 [sources]:
  all-traces
  "∀ transactionid RAND AUTN SNID AT_MAC #i.
    (In_relay2( transactionid, RAND, AUTN, SNID, AT_MAC ) @ #i) ⇒
    ((∃ #j.
       (Out_AMF2( transactionid, RAND, AUTN, SNID, AT_MAC ) @ #j) ∧
       (#j < #i)) ∨
     (∃ #j.
       (Injected( <'relay_auth_request', transactionid, RAND, AUTN, SNID, 
                   AT_MAC>
        ) @ #j) ∧
       (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ transactionid RAND AUTN SNID AT_MAC #i.
  (In_relay2( transactionid, RAND, AUTN, SNID, AT_MAC ) @ #i)
 ∧
  (∀ #j.
    (Out_AMF2( transactionid, RAND, AUTN, SNID, AT_MAC ) @ #j)
   ⇒
    ¬(#j < #i)) ∧
  (∀ #j.
    (Injected( <'relay_auth_request', transactionid, RAND, AUTN, SNID, 
                AT_MAC>
     ) @ #j)
   ⇒
    ¬(#j < #i))"
*/
by sorry

lemma src_4 [sources]:
  all-traces
  "∀ CP_PRUKID K_NRprose Nonce2 #i.
    (In_AMF3( <CP_PRUKID, K_NRprose, Nonce2> ) @ #i) ⇒
    ((∃ #j.
       (Out_HN2( <CP_PRUKID, K_NRprose, Nonce2> ) @ #j) ∧ (#j < #i)) ∨
     (∃ #j.
       (Injected( <'ProseAuthenticateResponse2', CP_PRUKID, K_NRprose, 
                   Nonce2>
        ) @ #j) ∧
       (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ CP_PRUKID K_NRprose Nonce2 #i.
  (In_AMF3( <CP_PRUKID, K_NRprose, Nonce2> ) @ #i)
 ∧
  (∀ #j.
    (Out_HN2( <CP_PRUKID, K_NRprose, Nonce2> ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j.
    (Injected( <'ProseAuthenticateResponse2', CP_PRUKID, K_NRprose, 
                Nonce2>
     ) @ #j)
   ⇒
    ¬(#j < #i))"
*/
by sorry

lemma src_5 [sources]:
  all-traces
  "∀ XRES AT_MAC_UE #i.
    (In_AMF4( XRES, AT_MAC_UE ) @ #i) ⇒
    ((∃ #j. (Out_relay4( XRES, AT_MAC_UE ) @ #j) ∧ (#j < #i)) ∨
     (∃ #j.
       (Injected( <'relayauthresponse', XRES, AT_MAC_UE> ) @ #j) ∧
       (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ XRES AT_MAC_UE #i.
  (In_AMF4( XRES, AT_MAC_UE ) @ #i)
 ∧
  (∀ #j. (Out_relay4( XRES, AT_MAC_UE ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j.
    (Injected( <'relayauthresponse', XRES, AT_MAC_UE> ) @ #j)
   ⇒
    ¬(#j < #i))"
*/
by sorry

lemma src_6 [sources]:
  all-traces
  "∀ AUTS #i.
    (In_AMF5( AUTS ) @ #i) ⇒
    ((∃ #j. (Out_relay5( AUTS ) @ #j) ∧ (#j < #i)) ∨
     (∃ #j. (Injected( <'resync', AUTS> ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ AUTS #i.
  (In_AMF5( AUTS ) @ #i)
 ∧
  (∀ #j. (Out_relay5( AUTS ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (Injected( <'resync', AUTS> ) @ #j) ⇒ ¬(#j < #i))"
*/
by sorry

lemma sqn_ue_invariance [use_induction, sources]:
  all-traces
  "∀ supi HN Sqn sqn_root count #i.
    (Sqn_UE_Invariance( supi, HN, Sqn, sqn_root, count ) @ #i) ⇒
    ((count+sqn_root) = Sqn)"
/*
guarded formula characterizing all counter-examples:
"∃ supi HN Sqn sqn_root count #i.
  (Sqn_UE_Invariance( supi, HN, Sqn, sqn_root, count ) @ #i)
 ∧
  ¬((count+sqn_root) = Sqn)"
*/
by sorry

lemma sqn_HN_invariance [use_induction, sources]:
  all-traces
  "∀ HN supi Sqn sqn_root count #i.
    (Sqn_HN_Invariance( HN, supi, Sqn, sqn_root, count ) @ #i) ⇒
    ((count+sqn_root) = Sqn)"
/*
guarded formula characterizing all counter-examples:
"∃ HN supi Sqn sqn_root count #i.
  (Sqn_HN_Invariance( HN, supi, Sqn, sqn_root, count ) @ #i)
 ∧
  ¬((count+sqn_root) = Sqn)"
*/
by sorry

lemma sqn_ue_src [use_induction, reuse]:
  all-traces
  "∀ supi HN Sqn sqn_root count #i.
    (Sqn_UE_Invariance( supi, HN, Sqn, sqn_root, count ) @ #i) ⇒
    (∃ #j. (Sqn_Create( supi, HN, sqn_root ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ supi HN Sqn sqn_root count #i.
  (Sqn_UE_Invariance( supi, HN, Sqn, sqn_root, count ) @ #i)
 ∧
  ∀ #j. (Sqn_Create( supi, HN, sqn_root ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

lemma sqn_HN_src [reuse]:
  all-traces
  "∀ HN supi Sqn sqn_root count #i.
    (Sqn_HN_Invariance( HN, supi, Sqn, sqn_root, count ) @ #i) ⇒
    (∃ #j. (Sqn_Create( supi, HN, sqn_root ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ HN supi Sqn sqn_root count #i.
  (Sqn_HN_Invariance( HN, supi, Sqn, sqn_root, count ) @ #i)
 ∧
  ∀ #j. (Sqn_Create( supi, HN, sqn_root ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

lemma sqn_ue_nodecrease [use_induction, reuse]:
  all-traces
  "(((∀ supi HN Sqni Sqnj #i #j.
       (((Sqn_UE_Change( supi, HN, Sqnj ) @ #j) ∧
         (Sqn_UE_Change( supi, HN, Sqni ) @ #i)) ∧
        (#i < #j)) ⇒
       (∃ dif. Sqnj = (Sqni+dif))) ∧
     (∀ supi HN Sqni Sqnj #i #j.
       (((Sqn_UE_Change( supi, HN, Sqnj ) @ #j) ∧
         (Sqn_UE_Nochange( supi, HN, Sqni ) @ #i)) ∧
        (#i < #j)) ⇒
       (∃ dif. Sqnj = (Sqni+dif)))) ∧
    (∀ supi HN Sqni Sqnj #i #j.
      (((Sqn_UE_Nochange( supi, HN, Sqnj ) @ #j) ∧
        (Sqn_UE_Change( supi, HN, Sqni ) @ #i)) ∧
       (#i < #j)) ⇒
      ((Sqnj = Sqni) ∨ (∃ dif. Sqnj = (Sqni+dif))))) ∧
   (∀ supi HN Sqni Sqnj #i #j.
     (((Sqn_UE_Nochange( supi, HN, Sqnj ) @ #j) ∧
       (Sqn_UE_Nochange( supi, HN, Sqni ) @ #i)) ∧
      (#i < #j)) ⇒
     ((Sqnj = Sqni) ∨ (∃ dif. Sqnj = (Sqni+dif))))"
/*
guarded formula characterizing all counter-examples:
"((∃ supi HN Sqni Sqnj #i #j.
    (Sqn_UE_Change( supi, HN, Sqnj ) @ #j) ∧
    (Sqn_UE_Change( supi, HN, Sqni ) @ #i)
   ∧
    (#i < #j) ∧ (∀ dif. (Sqnj = (Sqni+dif)) ⇒ ⊥)) ∨
  (∃ supi HN Sqni Sqnj #i #j.
    (Sqn_UE_Change( supi, HN, Sqnj ) @ #j) ∧
    (Sqn_UE_Nochange( supi, HN, Sqni ) @ #i)
   ∧
    (#i < #j) ∧ (∀ dif. (Sqnj = (Sqni+dif)) ⇒ ⊥)) ∨
  (∃ supi HN Sqni Sqnj #i #j.
    (Sqn_UE_Nochange( supi, HN, Sqnj ) @ #j) ∧
    (Sqn_UE_Change( supi, HN, Sqni ) @ #i)
   ∧
    (#i < #j) ∧ (¬(Sqnj = Sqni)) ∧ (∀ dif. (Sqnj = (Sqni+dif)) ⇒ ⊥)) ∨
  (∃ supi HN Sqni Sqnj #i #j.
    (Sqn_UE_Nochange( supi, HN, Sqnj ) @ #j) ∧
    (Sqn_UE_Nochange( supi, HN, Sqni ) @ #i)
   ∧
    (#i < #j) ∧ (¬(Sqnj = Sqni)) ∧ (∀ dif. (Sqnj = (Sqni+dif)) ⇒ ⊥)))"
*/
by sorry

lemma sqn_ue_unique [reuse, hide_lemma=sqn_ue_src,
                     hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi HN Sqn #i #j.
    ((Sqn_UE_Use( supi, HN, Sqn ) @ #i) ∧
     (Sqn_UE_Use( supi, HN, Sqn ) @ #j)) ⇒
    (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ supi HN Sqn #i #j.
  (Sqn_UE_Use( supi, HN, Sqn ) @ #i) ∧
  (Sqn_UE_Use( supi, HN, Sqn ) @ #j)
 ∧
  ¬(#i = #j)"
*/
by sorry

lemma executability_honest:
  exists-trace
  "∃ #i.
    (((((((((Remote_EndConf( ) @ #i) ∧
            (¬(∃ X data #r. Rev( X, data ) @ #r))) ∧
           (∀ HN1 HN2 #j #k.
             ((HomeNet( HN1 ) @ #j) ∧ (HomeNet( HN2 ) @ #k)) ⇒ (#j = #k))) ∧
          (∀ S1 S2 HN1 HN2 #j #k.
            ((Subscribe( S1, HN1 ) @ #j) ∧ (Subscribe( S2, HN2 ) @ #k)) ⇒
            (#j = #k))) ∧
         (∀ SN1 SN2 #j #k.
           ((ServNet( SN1 ) @ #j) ∧ (ServNet( SN2 ) @ #k)) ⇒ (#j = #k))) ∧
        (∀ relay1 relay2 #j #k.
          ((CreateRelay( relay1 ) @ #j) ∧ (CreateRelay( relay2 ) @ #k)) ⇒
          (#j = #k))) ∧
       (∀ SNID1 SNID2 #j #k.
         ((Start_AMF_Session( SNID1 ) @ #j) ∧
          (Start_AMF_Session( SNID2 ) @ #k)) ⇒
         (#j = #k))) ∧
      (∀ supi_relay1 supi_relay2 #j #k.
        ((Start_relay_Session( supi_relay1 ) @ #j) ∧
         (Start_relay_Session( supi_relay2 ) @ #k)) ⇒
        (#j = #k))) ∧
     (∀ UE1 UE2 #j #k.
       ((Start_UE_Session( UE1 ) @ #j) ∧ (Start_UE_Session( UE2 ) @ #k)) ⇒
       (#j = #k))) ∧
    (∀ HN1 HN2 #j #k.
      ((Start_HN_Session( HN1 ) @ #j) ∧ (Start_HN_Session( HN2 ) @ #k)) ⇒
      (#j = #k))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i.
  (Remote_EndConf( ) @ #i)
 ∧
  (∀ X data #r. (Rev( X, data ) @ #r) ⇒ ⊥) ∧
  (∀ HN1 HN2 #j #k.
    (HomeNet( HN1 ) @ #j) ∧ (HomeNet( HN2 ) @ #k) ⇒ #j = #k) ∧
  (∀ S1 S2 HN1 HN2 #j #k.
    (Subscribe( S1, HN1 ) @ #j) ∧ (Subscribe( S2, HN2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ SN1 SN2 #j #k.
    (ServNet( SN1 ) @ #j) ∧ (ServNet( SN2 ) @ #k) ⇒ #j = #k) ∧
  (∀ relay1 relay2 #j #k.
    (CreateRelay( relay1 ) @ #j) ∧ (CreateRelay( relay2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ SNID1 SNID2 #j #k.
    (Start_AMF_Session( SNID1 ) @ #j) ∧
    (Start_AMF_Session( SNID2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ supi_relay1 supi_relay2 #j #k.
    (Start_relay_Session( supi_relay1 ) @ #j) ∧
    (Start_relay_Session( supi_relay2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ UE1 UE2 #j #k.
    (Start_UE_Session( UE1 ) @ #j) ∧ (Start_UE_Session( UE2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ HN1 HN2 #j #k.
    (Start_HN_Session( HN1 ) @ #j) ∧ (Start_HN_Session( HN2 ) @ #k)
   ⇒
    #j = #k)"
*/
by sorry

lemma executability_desync:
  exists-trace
  "∃ dif #i.
    ((((((((((HN_Resync_End( dif ) @ #i) ∧
             (¬(∃ X data #r. Rev( X, data ) @ #r))) ∧
            (∀ HN1 HN2 #j #k.
              ((HomeNet( HN1 ) @ #j) ∧ (HomeNet( HN2 ) @ #k)) ⇒ (#j = #k))) ∧
           (∀ S1 S2 HN1 HN2 #j #k.
             ((Subscribe( S1, HN1 ) @ #j) ∧ (Subscribe( S2, HN2 ) @ #k)) ⇒
             (#j = #k))) ∧
          (∀ SN1 SN2 #j #k.
            ((ServNet( SN1 ) @ #j) ∧ (ServNet( SN2 ) @ #k)) ⇒ (#j = #k))) ∧
         (∀ relay1 relay2 #j #k.
           ((CreateRelay( relay1 ) @ #j) ∧ (CreateRelay( relay2 ) @ #k)) ⇒
           (#j = #k))) ∧
        (∀ SNID1 SNID2 #j #k.
          ((Start_AMF_Session( SNID1 ) @ #j) ∧
           (Start_AMF_Session( SNID2 ) @ #k)) ⇒
          (#j = #k))) ∧
       (∀ supi_relay1 supi_relay2 #j #k.
         ((Start_relay_Session( supi_relay1 ) @ #j) ∧
          (Start_relay_Session( supi_relay2 ) @ #k)) ⇒
         (#j = #k))) ∧
      (∀ UE1 UE2 #j #k.
        ((Start_UE_Session( UE1 ) @ #j) ∧ (Start_UE_Session( UE2 ) @ #k)) ⇒
        (#j = #k))) ∧
     (∀ #j #k.
       ((Sqn_UE_Desync( ) @ #j) ∧ (Sqn_UE_Desync( ) @ #k)) ⇒ (#j = #k))) ∧
    (∀ HN1 HN2 #j #k.
      ((Start_HN_Session( HN1 ) @ #j) ∧ (Start_HN_Session( HN2 ) @ #k)) ⇒
      (#j = #k))"
/*
guarded formula characterizing all satisfying traces:
"∃ dif #i.
  (HN_Resync_End( dif ) @ #i)
 ∧
  (∀ X data #r. (Rev( X, data ) @ #r) ⇒ ⊥) ∧
  (∀ HN1 HN2 #j #k.
    (HomeNet( HN1 ) @ #j) ∧ (HomeNet( HN2 ) @ #k) ⇒ #j = #k) ∧
  (∀ S1 S2 HN1 HN2 #j #k.
    (Subscribe( S1, HN1 ) @ #j) ∧ (Subscribe( S2, HN2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ SN1 SN2 #j #k.
    (ServNet( SN1 ) @ #j) ∧ (ServNet( SN2 ) @ #k) ⇒ #j = #k) ∧
  (∀ relay1 relay2 #j #k.
    (CreateRelay( relay1 ) @ #j) ∧ (CreateRelay( relay2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ SNID1 SNID2 #j #k.
    (Start_AMF_Session( SNID1 ) @ #j) ∧
    (Start_AMF_Session( SNID2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ supi_relay1 supi_relay2 #j #k.
    (Start_relay_Session( supi_relay1 ) @ #j) ∧
    (Start_relay_Session( supi_relay2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ UE1 UE2 #j #k.
    (Start_UE_Session( UE1 ) @ #j) ∧ (Start_UE_Session( UE2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ #j #k.
    (Sqn_UE_Desync( ) @ #j) ∧ (Sqn_UE_Desync( ) @ #k) ⇒ #j = #k) ∧
  (∀ HN1 HN2 #j #k.
    (Start_HN_Session( HN1 ) @ #j) ∧ (Start_HN_Session( HN2 ) @ #k)
   ⇒
    #j = #k)"
*/
by sorry

lemma executability_resync:
  exists-trace
  "∃ #i1 #i2 #i3 #i4 X.
    (((((((((((((((((((Start_HN_Session( X ) @ #i1) ∧
                      (HN_Resync_End( ('1'+'1'+'1'+'1') ) @ #i2)) ∧
                     (Start_HN_Session( X ) @ #i3)) ∧
                    (HN_End( ) @ #i4)) ∧
                   (#i1 < #i2)) ∧
                  (#i2 < #i3)) ∧
                 (#i3 < #i4)) ∧
                (¬(∃ X.1 data #r. Rev( X.1, data ) @ #r))) ∧
               (∀ #j #k.
                 ((Sqn_UE_Desync( ) @ #j) ∧ (Sqn_UE_Desync( ) @ #k)) ⇒ (#j = #k))) ∧
              (∀ a b #j #k.
                ((HN_Resync_End( a ) @ #j) ∧ (HN_Resync_End( b ) @ #k)) ⇒
                (#j = #k))) ∧
             (∀ #j #k. ((HN_End( ) @ #j) ∧ (HN_End( ) @ #k)) ⇒ (#j = #k))) ∧
            (∀ HN1 HN2 #j #k.
              ((HomeNet( HN1 ) @ #j) ∧ (HomeNet( HN2 ) @ #k)) ⇒ (#j = #k))) ∧
           (∀ SN1 SN2 #j #k.
             ((ServNet( SN1 ) @ #j) ∧ (ServNet( SN2 ) @ #k)) ⇒ (#j = #k))) ∧
          (∀ S1 S2 HN1 HN2 #j #k.
            ((Subscribe( S1, HN1 ) @ #j) ∧ (Subscribe( S2, HN2 ) @ #k)) ⇒
            (#j = #k))) ∧
         (∀ relay1 relay2 #j #k.
           ((CreateRelay( relay1 ) @ #j) ∧ (CreateRelay( relay2 ) @ #k)) ⇒
           (#j = #k))) ∧
        (∀ S1 S2 H1 H2 sqn_root1 sqn_root2 #k #j.
          ((Sqn_Create( S1, H1, sqn_root1 ) @ #j) ∧
           (Sqn_Create( S2, H2, sqn_root2 ) @ #k)) ⇒
          (#j = #k))) ∧
       (∀ UE1 UE2 UE3 #j #k #l.
         ((((Start_UE_Session( UE1 ) @ #j) ∧
            (Start_UE_Session( UE2 ) @ #k)) ∧
           (Start_UE_Session( UE3 ) @ #l)) ∧
          (¬(#j = #k))) ⇒
         ((#j = #l) ∨ (#k = #l)))) ∧
      (∀ HN1 HN2 HN3 #j #k #l.
        ((((Start_HN_Session( HN1 ) @ #j) ∧
           (Start_HN_Session( HN2 ) @ #k)) ∧
          (Start_HN_Session( HN3 ) @ #l)) ∧
         (¬(#j = #k))) ⇒
        ((#j = #l) ∨ (#k = #l)))) ∧
     (∀ supi_relay1 supi_relay2 supi_relay3 #j #k #l.
       ((((Start_relay_Session( supi_relay1 ) @ #j) ∧
          (Start_relay_Session( supi_relay2 ) @ #k)) ∧
         (Start_relay_Session( supi_relay3 ) @ #l)) ∧
        (¬(#j = #k))) ⇒
       ((#j = #l) ∨ (#k = #l)))) ∧
    (∀ SNID1 SNID2 SNID3 #j #k #l.
      ((((Start_AMF_Session( SNID1 ) @ #j) ∧
         (Start_AMF_Session( SNID2 ) @ #k)) ∧
        (Start_AMF_Session( SNID3 ) @ #l)) ∧
       (¬(#j = #k))) ⇒
      ((#j = #l) ∨ (#k = #l)))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i1 #i2 #i3 #i4 X.
  (Start_HN_Session( X ) @ #i1) ∧
  (HN_Resync_End( ('1'+'1'+'1'+'1') ) @ #i2) ∧
  (Start_HN_Session( X ) @ #i3) ∧
  (HN_End( ) @ #i4)
 ∧
  (#i1 < #i2) ∧
  (#i2 < #i3) ∧
  (#i3 < #i4) ∧
  (∀ X.1 data #r. (Rev( X.1, data ) @ #r) ⇒ ⊥) ∧
  (∀ #j #k.
    (Sqn_UE_Desync( ) @ #j) ∧ (Sqn_UE_Desync( ) @ #k) ⇒ #j = #k) ∧
  (∀ a b #j #k.
    (HN_Resync_End( a ) @ #j) ∧ (HN_Resync_End( b ) @ #k) ⇒ #j = #k) ∧
  (∀ #j #k. (HN_End( ) @ #j) ∧ (HN_End( ) @ #k) ⇒ #j = #k) ∧
  (∀ HN1 HN2 #j #k.
    (HomeNet( HN1 ) @ #j) ∧ (HomeNet( HN2 ) @ #k) ⇒ #j = #k) ∧
  (∀ SN1 SN2 #j #k.
    (ServNet( SN1 ) @ #j) ∧ (ServNet( SN2 ) @ #k) ⇒ #j = #k) ∧
  (∀ S1 S2 HN1 HN2 #j #k.
    (Subscribe( S1, HN1 ) @ #j) ∧ (Subscribe( S2, HN2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ relay1 relay2 #j #k.
    (CreateRelay( relay1 ) @ #j) ∧ (CreateRelay( relay2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ S1 S2 H1 H2 sqn_root1 sqn_root2 #k #j.
    (Sqn_Create( S1, H1, sqn_root1 ) @ #j) ∧
    (Sqn_Create( S2, H2, sqn_root2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ UE1 UE2 UE3 #j #k #l.
    (Start_UE_Session( UE1 ) @ #j) ∧
    (Start_UE_Session( UE2 ) @ #k) ∧
    (Start_UE_Session( UE3 ) @ #l)
   ⇒
    ((#j = #k) ∨ (#j = #l) ∨ (#k = #l))) ∧
  (∀ HN1 HN2 HN3 #j #k #l.
    (Start_HN_Session( HN1 ) @ #j) ∧
    (Start_HN_Session( HN2 ) @ #k) ∧
    (Start_HN_Session( HN3 ) @ #l)
   ⇒
    ((#j = #k) ∨ (#j = #l) ∨ (#k = #l))) ∧
  (∀ supi_relay1 supi_relay2 supi_relay3 #j #k #l.
    (Start_relay_Session( supi_relay1 ) @ #j) ∧
    (Start_relay_Session( supi_relay2 ) @ #k) ∧
    (Start_relay_Session( supi_relay3 ) @ #l)
   ⇒
    ((#j = #k) ∨ (#j = #l) ∨ (#k = #l))) ∧
  (∀ SNID1 SNID2 SNID3 #j #k #l.
    (Start_AMF_Session( SNID1 ) @ #j) ∧
    (Start_AMF_Session( SNID2 ) @ #k) ∧
    (Start_AMF_Session( SNID3 ) @ #l)
   ⇒
    ((#j = #k) ∨ (#j = #l) ∨ (#k = #l)))"
*/
by sorry

lemma secrecy_remote_K_relay_sess_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                                        hide_lemma=sqn_ue_src,
                                                                                        hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi t #i.
    (Secret( <'remote', supi>, 'K_relay_sess', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (Secret( <'remote', supi>, 'K_relay_sess', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_remote_K_relay_enc_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                                       hide_lemma=sqn_ue_src,
                                                                                       hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi t #i.
    (Secret( <'remote', supi>, 'K_relay_enc', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (Secret( <'remote', supi>, 'K_relay_enc', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_remote_K_relay_int_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                                       hide_lemma=sqn_ue_src,
                                                                                       hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi t #i.
    (Secret( <'remote', supi>, 'K_relay_int', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (Secret( <'remote', supi>, 'K_relay_int', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_remote_K_NRprose_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                                     hide_lemma=sqn_ue_src,
                                                                                     hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi t #i.
    (Secret( <'remote', supi>, 'K_NRprose', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (Secret( <'remote', supi>, 'K_NRprose', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_remote_CP_PRUK_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                                   hide_lemma=sqn_ue_src,
                                                                                   hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi t #i.
    (Secret( <'remote', supi>, 'CPPRUK', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (Secret( <'remote', supi>, 'CPPRUK', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_remote_CP_PRUK_ID_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                                      hide_lemma=sqn_ue_src,
                                                                                      hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi t #i.
    (Secret( <'remote', supi>, 'CPPRUKID', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (Secret( <'remote', supi>, 'CPPRUKID', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_remote_SUPI_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                                hide_lemma=sqn_ue_src,
                                                                                hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi t #i.
    (Secret( <'remote', supi>, 'supi', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (Secret( <'remote', supi>, 'supi', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_remote_RSC_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                               hide_lemma=sqn_ue_src,
                                                                               hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi t #i.
    (Secret( <'remote', supi>, 'RSC', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (Secret( <'remote', supi>, 'RSC', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_relay_K_NRprose_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                                    hide_lemma=sqn_ue_src,
                                                                                    hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi_relay t #i.
    (Secret( <'relay', supi_relay>, 'K_NRprose', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ supi_relay t #i.
  (Secret( <'relay', supi_relay>, 'K_NRprose', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_relay_K_relay_sess_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                                       hide_lemma=sqn_ue_src,
                                                                                       hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi_relay t #i.
    (Secret( <'relay', supi_relay>, 'K_relay_sess', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ supi_relay t #i.
  (Secret( <'relay', supi_relay>, 'K_relay_sess', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_relay_K_relay_enc_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                                      hide_lemma=sqn_ue_src,
                                                                                      hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi_relay t #i.
    (Secret( <'relay', supi_relay>, 'K_relay_enc', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ supi_relay t #i.
  (Secret( <'relay', supi_relay>, 'K_relay_enc', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_relay_K_relay_int_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                                      hide_lemma=sqn_ue_src,
                                                                                      hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi_relay t #i.
    (Secret( <'relay', supi_relay>, 'K_relay_int', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ supi_relay t #i.
  (Secret( <'relay', supi_relay>, 'K_relay_int', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_relay_CP_PRUK_ID_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                                     hide_lemma=sqn_ue_src,
                                                                                     hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi_relay t #i.
    (Secret( <'relay', supi_relay>, 'CPPRUKID', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ supi_relay t #i.
  (Secret( <'relay', supi_relay>, 'CPPRUKID', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_relay_RSC_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                              hide_lemma=sqn_ue_src,
                                                                              hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi_relay t #i.
    (Secret( <'relay', supi_relay>, 'RSC', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ supi_relay t #i.
  (Secret( <'relay', supi_relay>, 'RSC', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_SN_K_NRprose_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                                 hide_lemma=sqn_ue_src,
                                                                                 hide_lemma=sqn_HN_src]:
  all-traces
  "∀ idSN t #i.
    (Secret( <'SN', idSN>, 'K_NRprose', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ idSN t #i.
  (Secret( <'SN', idSN>, 'K_NRprose', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_SN_CP_PRUK_ID_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                                  hide_lemma=sqn_ue_src,
                                                                                  hide_lemma=sqn_HN_src]:
  all-traces
  "∀ idSN t #i.
    (Secret( <'SN', idSN>, 'CPPRUKID', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ idSN t #i.
  (Secret( <'SN', idSN>, 'CPPRUKID', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_SN_RSC_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                           hide_lemma=sqn_ue_src,
                                                                           hide_lemma=sqn_HN_src]:
  all-traces
  "∀ idSN t #i.
    (Secret( <'SN', idSN>, 'RSC', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ idSN t #i.
  (Secret( <'SN', idSN>, 'RSC', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_HN_CP_PRUK_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                               hide_lemma=sqn_ue_src,
                                                                               hide_lemma=sqn_HN_src]:
  all-traces
  "∀ idHN t #i.
    (Secret( <'HN', idHN>, 'CPPRUK', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ idHN t #i.
  (Secret( <'HN', idHN>, 'CPPRUK', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_HN_CP_PRUK_ID_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                                  hide_lemma=sqn_ue_src,
                                                                                  hide_lemma=sqn_HN_src]:
  all-traces
  "∀ idHN t #i.
    (Secret( <'HN', idHN>, 'CPPRUKID', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ idHN t #i.
  (Secret( <'HN', idHN>, 'CPPRUKID', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_HN_SUPI_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                            hide_lemma=sqn_ue_src,
                                                                            hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi t #i.
    (Secret( <'HN', supi>, 'supi', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (Secret( <'HN', supi>, 'supi', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_HN_RSC_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                           hide_lemma=sqn_ue_src,
                                                                           hide_lemma=sqn_HN_src]:
  all-traces
  "∀ idHN t #i.
    (Secret( <'HN', idHN>, 'RSC', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ idHN t #i.
  (Secret( <'HN', idHN>, 'RSC', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_HN_K_NRprose_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                                 hide_lemma=sqn_ue_src,
                                                                                 hide_lemma=sqn_HN_src]:
  all-traces
  "∀ idHN t #i.
    (Secret( <'HN', idHN>, 'K_NRprose', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ idHN t #i.
  (Secret( <'HN', idHN>, 'K_NRprose', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_remote_relay_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                       hide_lemma=sqn_HN_src,
                                                                                       hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'relay', t> ) @ #i) ⇒
    (((((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'relay', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_relay_remote_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                       hide_lemma=sqn_HN_src,
                                                                                       hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'remote', t> ) @ #i) ⇒
    (((((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'remote', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_remote_HN_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                    hide_lemma=sqn_HN_src,
                                                                                    hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'HN', t> ) @ #i) ⇒
    (((((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'HN', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_HN_remote_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                    hide_lemma=sqn_HN_src,
                                                                                    hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'HN', 'remote', t> ) @ #i) ⇒
    (((((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'HN', 'remote', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_relay_SN_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                   hide_lemma=sqn_HN_src,
                                                                                   hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'SN', t> ) @ #i) ⇒
    (((((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'SN', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_SN_relay_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                   hide_lemma=sqn_HN_src,
                                                                                   hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'SN', 'relay', t> ) @ #i) ⇒
    (((((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'SN', 'relay', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_relay_HN_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                   hide_lemma=sqn_HN_src,
                                                                                   hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'HN', t> ) @ #i) ⇒
    (((((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'HN', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_HN_SN_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                hide_lemma=sqn_HN_src,
                                                                                hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'HN', 'SN', t> ) @ #i) ⇒
    (((((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'HN', 'SN', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_SN_HN_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                hide_lemma=sqn_HN_src,
                                                                                hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'SN', 'HN', t> ) @ #i) ⇒
    (((((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'SN', 'HN', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_remote_relay_K_NRprose_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                         hide_lemma=sqn_HN_src,
                                                                                                         hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'relay', 'K_NRprose', t> ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'remote', 'relay', 'K_NRprose', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'relay', 'K_NRprose', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'remote', 'relay', 'K_NRprose', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_relay_remote_K_NRprose_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                         hide_lemma=sqn_HN_src,
                                                                                                         hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'remote', 'K_NRprose', t> ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'relay', 'remote', 'K_NRprose', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'remote', 'K_NRprose', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'relay', 'remote', 'K_NRprose', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_remote_relay_SeCap_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                     hide_lemma=sqn_HN_src,
                                                                                                     hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'relay', 'SeCap', t> ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'remote', 'relay', 'SeCap', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'relay', 'SeCap', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'remote', 'relay', 'SeCap', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_relay_remote_SeCap_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                     hide_lemma=sqn_HN_src,
                                                                                                     hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'remote', 'SeCap', t> ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'relay', 'remote', 'SeCap', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'remote', 'SeCap', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'relay', 'remote', 'SeCap', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_remote_relay_CPsecuritypolicy_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                                hide_lemma=sqn_HN_src,
                                                                                                                hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'relay', 'CPsecurity_policy', t>
     ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'remote', 'relay', 'CPsecurity_policy', t>
            ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'relay', 'CPsecurity_policy', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'remote', 'relay', 'CPsecurity_policy', t> ) @ #j)
   ⇒
    ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_relay_remote_CPsecuritypolicy_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                                hide_lemma=sqn_HN_src,
                                                                                                                hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'remote', 'CPsecurity_policy', t>
     ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'relay', 'remote', 'CPsecurity_policy', t>
            ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'remote', 'CPsecurity_policy', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'relay', 'remote', 'CPsecurity_policy', t> ) @ #j)
   ⇒
    ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_remote_relay_UPsecuritypolicy_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                                hide_lemma=sqn_HN_src,
                                                                                                                hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'relay', 'UPsecurity_policy', t>
     ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'remote', 'relay', 'UPsecurity_policy', t>
            ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'relay', 'UPsecurity_policy', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'remote', 'relay', 'UPsecurity_policy', t> ) @ #j)
   ⇒
    ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_relay_remote_UPsecuritypolicy_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                                hide_lemma=sqn_HN_src,
                                                                                                                hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'remote', 'UPsecurity_policy', t>
     ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'relay', 'remote', 'UPsecurity_policy', t>
            ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'remote', 'UPsecurity_policy', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'relay', 'remote', 'UPsecurity_policy', t> ) @ #j)
   ⇒
    ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_relay_remote_CP_PRUKID_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                         hide_lemma=sqn_HN_src,
                                                                                                         hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'remote', 'CP_PRUKID', t> ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'relay', 'remote', 'CP_PRUKID', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'remote', 'CP_PRUKID', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'relay', 'remote', 'CP_PRUKID', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_remote_relay_CP_PRUKID_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                         hide_lemma=sqn_HN_src,
                                                                                                         hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'relay', 'CP_PRUKID', t> ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'remote', 'relay', 'CP_PRUKID', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'relay', 'CP_PRUKID', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'remote', 'relay', 'CP_PRUKID', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_relay_remote_RSC_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                   hide_lemma=sqn_HN_src,
                                                                                                   hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'remote', 'RSC', t> ) @ #i) ⇒
    (((((((∃ #j. Running( b, a, <'relay', 'remote', 'RSC', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'remote', 'RSC', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'relay', 'remote', 'RSC', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_remote_relay_RSC_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                   hide_lemma=sqn_HN_src,
                                                                                                   hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'relay', 'RSC', t> ) @ #i) ⇒
    (((((((∃ #j. Running( b, a, <'remote', 'relay', 'RSC', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'relay', 'RSC', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'remote', 'relay', 'RSC', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_remote_HN_CP_PRUK_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                    hide_lemma=sqn_HN_src,
                                                                                                    hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'HN', 'CP_PRUK', t> ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'remote', 'HN', 'CP_PRUK', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'HN', 'CP_PRUK', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'remote', 'HN', 'CP_PRUK', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_HN_remote_CP_PRUK_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                    hide_lemma=sqn_HN_src,
                                                                                                    hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'HN', 'remote', 'CP_PRUK', t> ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'HN', 'remote', 'CP_PRUK', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'HN', 'remote', 'CP_PRUK', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'HN', 'remote', 'CP_PRUK', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'HN', 'remote', 'CP_PRUK', t> ) @ #i )
  case HN_receive_Nausf_UE_PAR2_step10a
  solve( St_1_HN( ~idHN, ~supi, ~supi_relay, idSN, ~k, SqnNext, XRES,
                  ~RAND, ~sqn_root, ~sk_HN, ~cid, RSC, Nonce1
         ) ▶₀ #i )
    case HN_receive_Nausf_UE_PAR_step4
    solve( RcvS( ~cid, ~idSN, ~idHN,
                 <'ProseAuthenticateRequest2', f2(~k, ~RAND), 
                  KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                              <<'5G', ~idSN>, (f5(~k, ~RAND)⊕('1'+~sqn_root+count))>),
                          <'EAPAKA', ~supi, 'K_aut'>),
                      f2(~k, ~RAND))
                 >
           ) ▶₁ #i )
      case receive_secure_case_1
      solve( RcvS( transactionid, ~supi_relay.1, ~idSN,
                   <'relayauthresponse', f2(~k, ~RAND), 
                    KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                <<'5G', ~idSN>, (f5(~k, ~RAND)⊕('1'+~sqn_root+count))>),
                            <'EAPAKA', ~supi, 'K_aut'>),
                        f2(~k, ~RAND))
                   >
             ) ▶₁ #vr.7 )
        case receive_secure_case_1
        solve( RcvS( ~cid.1, ~idSN, ~supi_relay.1,
                     <'relay_auth_request', ~cid.1, RAND.2, AUTN.1, SNID.1, AT_MAC.1>
               ) ▶₁ #vr.14 )
          case receive_secure_case_1
          solve( !KU( KDF(~DUIK,
                          <<aenc(<~supi.2, ~R.2>, pk_HN.1), ~idHN.1>, ~User_info_remote.1, 
                           ~User_info_relay.1, (~RSC.2⊕KDF(~DUCK, <Nonce1.2, ~RSC.2>)), 
                           Nonce1.2, ~SeCap, ~CP_Se_Po, ~MSB_KsessID>)
                 ) @ #vk.22 )
            case c_KDF
            solve( !KU( ~DUIK ) @ #vk.30 )
              case relay_receive_relaykeyresponse_step12
              by sorry
            next
              case reveal_Ltk_DUIK
              solve( RcvS( ~cid.1, ~supi_relay.1, ~idSN,
                           <'relaykeyrequest', ~cid.1, 
                            <aenc(<~supi.2, ~R.2>, pk_HN.1), ~idHN>, RSC.2, Nonce1.2>
                     ) ▶₃ #vr.9 )
                case receive_secure_case_1
                solve( RcvS( ~cid.1, ~supi_relay.1, ~idSN,
                             <'relaykeyrequest', ~cid.1, 
                              <aenc(<~supi.2, ~R.2>, pk_HN.1), ~idHN.1>, RSC.2, Nonce1.2>
                       ) ▶₃ #vr.20 )
                  case receive_secure_case_1
                  solve( RcvS( ~cid, ~idSN, ~idHN,
                               <'ProseAuthenticateRequest', 
                                <aenc(<~supi, ~R.1>, pk(~sk_HN)), ~idHN>, ~RSC, Nonce1, '5G', ~idSN
                               >
                         ) ▶₁ #vr )
                    case receive_secure_case_1
                    solve( !KU( KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                            <<'5G', ~idSN>, (f5(~k, ~RAND)⊕('1'+~sqn_root+count))>),
                                        <'EAPAKA', ~supi, 'K_aut'>),
                                    f2(~k, ~RAND))
                           ) @ #vk.9 )
                      case c_KDF
                      by sorry
                    next
                      case ue_receive_EAPReq_freshness_success_send_EAPResp_step7a_case_01
                      by sorry
                    next
                      case ue_receive_EAPReq_freshness_success_send_EAPResp_step7a_case_02
                      by sorry
                    next
                      case ue_receive_EAPReq_freshness_success_send_EAPResp_step7a_case_03
                      by sorry
                    next
                      case ue_receive_EAPReq_freshness_success_send_EAPResp_step7a_case_04
                      by sorry
                    next
                      case ue_receive_EAPReq_freshness_success_send_EAPResp_step7a_case_05
                      solve( !KU( KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                              <<'5G', ~idSN>, (f5(~k, ~RAND)⊕('1'+~sqn_root+count))
                                              >),
                                          <'EAPAKA', ~supi, 'K_aut'>),
                                      <~RAND, 
                                       <(f5(~k, ~RAND)⊕('1'+~sqn_root+count)), 
                                        f1(~k, <('1'+~sqn_root+count), ~RAND>)>, 
                                       '5G', ~idSN>)
                             ) @ #vk.41 )
                        case c_KDF
                        by sorry
                      next
                        case relay_receive_relay_auth_request_step6_case_1
                        by sorry
                      next
                        case relay_receive_relay_auth_request_step6_case_2
                        solve( RcvS( ~cid.2, ~idHN.3, ~idSN.4,
                                     <'ProseAuthenticateResponse', ~RAND, 
                                      <(f5(~k, ~RAND)⊕('1'+~sqn_root+count)), 
                                       f1(~k, <('1'+~sqn_root+count), ~RAND>)>, 
                                      <'5G', ~idSN>, 
                                      KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                                  <<'5G', ~idSN>, 
                                                   (f5(~k, ~RAND)⊕('1'+~sqn_root+count))>),
                                              <'EAPAKA', ~supi, 'K_aut'>),
                                          <~RAND, 
                                           <(f5(~k, ~RAND)⊕('1'+~sqn_root+count)), 
                                            f1(~k, <('1'+~sqn_root+count), ~RAND>)>, 
                                           '5G', ~idSN>)
                                     >
                               ) ▶₁ #j )
                          case receive_secure_case_1
                          by sorry
                        next
                          case receive_secure_case_2
                          solve( !KU( f1(~k, <('1'+~sqn_root+count), ~RAND>) ) @ #vk.38 )
                            case c_f1
                            by sorry
                          next
                            case relay_receive_relay_auth_request_step6_case_1
                            by sorry
                          next
                            case relay_receive_relay_auth_request_step6_case_2
                            solve( RcvS( ~cid.1, ~idHN.2, ~idSN.3,
                                         <'ProseAuthenticateResponse', ~RAND, 
                                          <(f5(~k, ~RAND)⊕('1'+~sqn_root+count)), 
                                           f1(~k, <('1'+~sqn_root+count), ~RAND>)>, 
                                          <'5G', ~idSN>, 
                                          KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                                      <<'5G', ~idSN>, 
                                                       (f5(~k, ~RAND)⊕('1'+~sqn_root+count))>),
                                                  <'EAPAKA', ~supi, 'K_aut'>),
                                              <~RAND, 
                                               <(f5(~k, ~RAND)⊕('1'+~sqn_root+count)), 
                                                f1(~k, <('1'+~sqn_root+count), ~RAND>)>, 
                                               '5G', ~idSN>)
                                         >
                                   ) ▶₁ #j.1 )
                              case receive_secure_case_1
                              by sorry
                            next
                              case receive_secure_case_2
                              solve( Sqn_UE( ~supi, ~idHN, (~sqn_root+count), ~sqn_root, count
                                     ) ▶₁ #vr.27 )
                                case add_subscription
                                solve( !KU( f2(~k, ~RAND) ) @ #vk.19 )
                                  case c_f2
                                  by sorry
                                next
                                  case ue_receive_EAPReq_freshness_success_send_EAPResp_step7a
                                  solve( Sqn_UE( ~supi, ~idHN, (~sqn_root+count), ~sqn_root, count
                                         ) ▶₁ #vr.40 )
                                    case add_subscription
                                    solve( !KU( aenc(<~supi, ~R>, pk(~sk_HN)) ) @ #vk.22 )
                                      case c_aenc
                                      by sorry
                                    next
                                      case secureChannel_compromised_out
                                      by contradiction /* from formulas */
                                    next
                                      case ue_send_DCR_step1
                                      solve( Sqn_HN( ~supi, ~idHN, ('1'+~sqn_root), ~sqn_root, '1'
                                             ) ▶₄ #vr )
                                        case add_subscription
                                        solve( !KU( ~idHN ) @ #vk.23 )
                                          case init_homeNet
                                          solve( !KU( ~User_info_remote ) @ #vk.24 )
                                            case fresh
                                            solve( !KU( ~User_info_relay ) @ #vk.26 )
                                              case relay_receive_relaykeyresponse_step12
                                              by sorry
                                            next
                                              case secureChannel_compromised_out_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_3
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_4
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_5
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_6
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_7
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_8
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_9
                                              by contradiction /* from formulas */
                                            next
                                              case ue_send_DCR_step1
                                              solve( !KU( ~SeCap ) @ #vk.32 )
                                                case fresh
                                                solve( !KU( ~CP_Se_Po ) @ #vk.34 )
                                                  case fresh
                                                  solve( !KU( ~MSB_KsessID ) @ #vk.36 )
                                                    case fresh
                                                    solve( !KU( ~RAND ) @ #vk.37 )
                                                      case relay_receive_relay_auth_request_step6
                                                      solve( RcvS( ~cid.1, ~idHN.3, ~idSN.4,
                                                                   <'ProseAuthenticateResponse', 
                                                                    ~RAND, 
                                                                    <
                                                                     (f5(~k, ~RAND)⊕
                                                                      ('1'+'1'+~sqn_root)), 
                                                                     f1(~k,
                                                                        <('1'+'1'+~sqn_root), ~RAND
                                                                        >)
                                                                    >, 
                                                                    <'5G', ~idSN>, 
                                                                    KDF(KDF(KDF(<f3(~k, ~RAND), 
                                                                                 f4(~k, ~RAND)>,
                                                                                <<'5G', ~idSN>, 
                                                                                 (f5(~k, ~RAND)⊕
                                                                                  ('1'+'1'+~sqn_root
                                                                                  )
                                                                                 )
                                                                                >),
                                                                            <'EAPAKA', ~supi, 
                                                                             'K_aut'>),
                                                                        <~RAND, 
                                                                         <
                                                                          (f5(~k, ~RAND)⊕
                                                                           ('1'+'1'+~sqn_root)), 
                                                                          f1(~k,
                                                                             <('1'+'1'+~sqn_root), 
                                                                              ~RAND>)
                                                                         >, 
                                                                         '5G', ~idSN>)
                                                                   >
                                                             ) ▶₁ #j.1 )
                                                        case receive_secure_case_1
                                                        solve( !KU( ~idSN ) @ #vk.41 )
                                                          case init_servNet
                                                          solve( !KU( (~RSC⊕
                                                                       KDF(~DUCK, <Nonce1, ~RSC>))
                                                                 ) @ #vk.37 )
                                                            case c_xor
                                                            by sorry
                                                          next
                                                            case coerce
                                                            solve( !KD( (~RSC⊕
                                                                         KDF(~DUCK, <Nonce1, ~RSC>))
                                                                   ) ▶₀ #vk.15 )
                                                              case init_homeNet
                                                              by contradiction
                                                                 /* impossible chain */
                                                            next
                                                              case init_servNet
                                                              by contradiction
                                                                 /* impossible chain */
                                                            next
                                                              case relay_receive_DSMComplete_step14
                                                              by sorry
                                                            next
                                                              case relay_receive_relay_auth_request_step6
                                                              by sorry
                                                            next
                                                              case relay_receive_relaykeyresponse_step12
                                                              by sorry
                                                            next
                                                              case reveal_Ltk_DUCK
                                                              by contradiction
                                                                 /* impossible chain */
                                                            next
                                                              case reveal_Ltk_DUIK
                                                              by contradiction
                                                                 /* impossible chain */
                                                            next
                                                              case reveal_Ltk_RSC
                                                              by contradiction
                                                                 /* impossible chain */
                                                            next
                                                              case reveal_Ltk_Sqn
                                                              by contradiction
                                                                 /* impossible chain */
                                                            next
                                                              case reveal_Ltk_Sym
                                                              by contradiction
                                                                 /* impossible chain */
                                                            next
                                                              case reveal_Ltk_supi
                                                              by contradiction
                                                                 /* impossible chain */
                                                            next
                                                              case reveal_Ltk_supi_relay
                                                              by contradiction
                                                                 /* impossible chain */
                                                            next
                                                              case reveal_sk_HN
                                                              by contradiction
                                                                 /* impossible chain */
                                                            next
                                                              case secureChannel_compromised_out
                                                              by contradiction /* from formulas */
                                                            next
                                                              case ue_receive_DSMCommand_step13
                                                              by sorry
                                                            next
                                                              case ue_receive_EAPReq_fail_freshness_send_sync_failure_step7b
                                                              by sorry
                                                            next
                                                              case ue_receive_EAPReq_freshness_success_send_EAPResp_step7a
                                                              by sorry
                                                            next
                                                              case ue_send_DCR_step1
                                                              solve( (#vl.7, 0) ~~> (#vk.15, 0) )
                                                                case d_0_fst
                                                                by sorry
                                                              next
                                                                case d_0_snd
                                                                solve( (#vr.58, 0) ~~> (#vk.15, 0) )
                                                                  case d_0_fst
                                                                  by contradiction
                                                                     /* impossible chain */
                                                                next
                                                                  case d_0_snd
                                                                  solve( (#vr.59, 0) ~~> (#vk.15, 0) )
                                                                    case d_0_fst
                                                                    by contradiction
                                                                       /* impossible chain */
                                                                  next
                                                                    case d_0_snd
                                                                    solve( (#vr.60, 0) ~~> (#vk.15, 0) )
                                                                      case d_0_fst
                                                                      solve( (#vr.61, 0) ~~> (#vk.15, 0) )
                                                                        case Xor
                                                                        solve( !KU( (f5(~k, ~RAND)⊕
                                                                                     ('1'+'1'+
                                                                                      ~sqn_root)
                                                                                    )
                                                                               ) @ #vk.40 )
                                                                          case c_xor
                                                                          by sorry
                                                                        next
                                                                          case coerce
                                                                          solve( !KD( (
                                                                                       f5(~k,
                                                                                          ~RAND)⊕
                                                                                       ('1'+'1'+
                                                                                        ~sqn_root)
                                                                                      )
                                                                                 ) ▶₀ #vk.16 )
                                                                            case init_homeNet
                                                                            by contradiction
                                                                               /* impossible chain
                                                                               */
                                                                          next
                                                                            case init_servNet
                                                                            by contradiction
                                                                               /* impossible chain
                                                                               */
                                                                          next
                                                                            case relay_receive_DSMComplete_step14
                                                                            by sorry
                                                                          next
                                                                            case relay_receive_relay_auth_request_step6
                                                                            solve( (#vl.8, 0) ~~> (#vk.16, 0) )
                                                                              case d_0_fst
                                                                              by sorry
                                                                            next
                                                                              case d_0_snd
                                                                              solve( (#vr.63, 0) ~~> (#vk.16, 0) )
                                                                                case d_0_fst
                                                                                solve( RcvS( ~transactionid.1,
                                                                                             ~idSN.5,
                                                                                             ~supi_relay.6,
                                                                                             <
                                                                                              'relay_auth_request', 
                                                                                              ~transactionid.1, 
                                                                                              RAND.1, 
                                                                                              AUTN, 
                                                                                              SNID, 
                                                                                              AT_MAC
                                                                                             >
                                                                                       ) ▶₁ #vr.62 )
                                                                                  case receive_secure_case_1
                                                                                  solve( RcvS( ~cid.1,
                                                                                               ~idHN.5,
                                                                                               ~idSN.5,
                                                                                               <
                                                                                                'ProseAuthenticateResponse', 
                                                                                                RAND.1, 
                                                                                                AUTN, 
                                                                                                SNID, 
                                                                                                AT_MAC
                                                                                               >
                                                                                         ) ▶₁ #vr.67 )
                                                                                    case receive_secure_case_1
                                                                                    solve( (#vr.64, 0) ~~> (#vk.16, 0) )
                                                                                      case d_0_fst
                                                                                      solve( (#vr.77, 0) ~~> (#vk.16, 0) )
                                                                                        case Xor
                                                                                        solve( !Relay( ~User_info_relay.3,
                                                                                                       ~supi_relay.5,
                                                                                                       ~idSN.4
                                                                                               ) ▶₉ #vr.57 )
                                                                                          case init_Relay
                                                                                          solve( !KU( ~Nonce1
                                                                                                 ) @ #vk.40 )
                                                                                            case relay_receive_relaykeyresponse_step12
                                                                                            by sorry
                                                                                          next
                                                                                            case secureChannel_compromised_out_case_1
                                                                                            by contradiction
                                                                                               /*
                                                                                               from formulas
                                                                                               */
                                                                                          next
                                                                                            case secureChannel_compromised_out_case_2
                                                                                            by contradiction
                                                                                               /*
                                                                                               from formulas
                                                                                               */
                                                                                          next
                                                                                            case secureChannel_compromised_out_case_3
                                                                                            by contradiction
                                                                                               /*
                                                                                               from formulas
                                                                                               */
                                                                                          next
                                                                                            case secureChannel_compromised_out_case_4
                                                                                            by contradiction
                                                                                               /*
                                                                                               from formulas
                                                                                               */
                                                                                          next
                                                                                            case secureChannel_compromised_out_case_5
                                                                                            by contradiction
                                                                                               /*
                                                                                               from formulas
                                                                                               */
                                                                                          next
                                                                                            case secureChannel_compromised_out_case_6
                                                                                            by contradiction
                                                                                               /*
                                                                                               from formulas
                                                                                               */
                                                                                          next
                                                                                            case secureChannel_compromised_out_case_7
                                                                                            by contradiction
                                                                                               /*
                                                                                               from formulas
                                                                                               */
                                                                                          next
                                                                                            case secureChannel_compromised_out_case_8
                                                                                            by contradiction
                                                                                               /*
                                                                                               from formulas
                                                                                               */
                                                                                          next
                                                                                            case secureChannel_compromised_out_case_9
                                                                                            by contradiction
                                                                                               /*
                                                                                               from formulas
                                                                                               */
                                                                                          next
                                                                                            case ue_send_DCR_step1
                                                                                            SOLVED // trace found
                                                                                          qed
                                                                                        qed
                                                                                      next
                                                                                        case d_xor_case_1
                                                                                        by sorry
                                                                                      next
                                                                                        case d_xor_case_2
                                                                                        by sorry
                                                                                      next
                                                                                        case d_xor_case_3
                                                                                        by contradiction
                                                                                           /*
                                                                                           impossible chain
                                                                                           */
                                                                                      next
                                                                                        case d_xor_case_4
                                                                                        by sorry
                                                                                      qed
                                                                                    next
                                                                                      case d_0_snd
                                                                                      by sorry
                                                                                    qed
                                                                                  next
                                                                                    case receive_secure_case_2
                                                                                    by contradiction
                                                                                       /* cyclic */
                                                                                  qed
                                                                                next
                                                                                  case receive_secure_case_2
                                                                                  by contradiction
                                                                                     /* cyclic */
                                                                                qed
                                                                              next
                                                                                case d_0_snd
                                                                                by sorry
                                                                              qed
                                                                            qed
                                                                          next
                                                                            case relay_receive_relaykeyresponse_step12
                                                                            by sorry
                                                                          next
                                                                            case reveal_Ltk_DUCK
                                                                            by contradiction
                                                                               /* impossible chain
                                                                               */
                                                                          next
                                                                            case reveal_Ltk_DUIK
                                                                            by contradiction
                                                                               /* impossible chain
                                                                               */
                                                                          next
                                                                            case reveal_Ltk_RSC
                                                                            by contradiction
                                                                               /* impossible chain
                                                                               */
                                                                          next
                                                                            case reveal_Ltk_Sqn
                                                                            by contradiction
                                                                               /* impossible chain
                                                                               */
                                                                          next
                                                                            case reveal_Ltk_Sym
                                                                            by contradiction
                                                                               /* impossible chain
                                                                               */
                                                                          next
                                                                            case reveal_Ltk_supi
                                                                            by contradiction
                                                                               /* impossible chain
                                                                               */
                                                                          next
                                                                            case reveal_Ltk_supi_relay
                                                                            by contradiction
                                                                               /* impossible chain
                                                                               */
                                                                          next
                                                                            case reveal_sk_HN
                                                                            by contradiction
                                                                               /* impossible chain
                                                                               */
                                                                          next
                                                                            case secureChannel_compromised_out
                                                                            by contradiction
                                                                               /* from formulas */
                                                                          next
                                                                            case ue_receive_DSMCommand_step13
                                                                            by sorry
                                                                          next
                                                                            case ue_receive_EAPReq_fail_freshness_send_sync_failure_step7b
                                                                            by sorry
                                                                          next
                                                                            case ue_receive_EAPReq_freshness_success_send_EAPResp_step7a
                                                                            by sorry
                                                                          next
                                                                            case ue_send_DCR_step1
                                                                            by sorry
                                                                          qed
                                                                        qed
                                                                      next
                                                                        case d_xor_case_1
                                                                        by sorry
                                                                      next
                                                                        case d_xor_case_2
                                                                        by sorry
                                                                      next
                                                                        case d_xor_case_3
                                                                        by contradiction
                                                                           /* impossible chain */
                                                                      next
                                                                        case d_xor_case_4
                                                                        by contradiction
                                                                           /* impossible chain */
                                                                      qed
                                                                    next
                                                                      case d_0_snd
                                                                      by sorry
                                                                    qed
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case relay_receive_relay_auth_request_step6
                                                          by sorry
                                                        next
                                                          case relay_receive_relaykeyresponse_step12
                                                          by sorry
                                                        next
                                                          case secureChannel_compromised_out_case_01
                                                          by contradiction /* from formulas */
                                                        next
                                                          case secureChannel_compromised_out_case_02
                                                          by contradiction /* from formulas */
                                                        next
                                                          case secureChannel_compromised_out_case_03
                                                          by contradiction /* from formulas */
                                                        next
                                                          case secureChannel_compromised_out_case_04
                                                          by contradiction /* from formulas */
                                                        next
                                                          case secureChannel_compromised_out_case_05
                                                          by contradiction /* from formulas */
                                                        next
                                                          case secureChannel_compromised_out_case_06
                                                          by contradiction /* from formulas */
                                                        next
                                                          case secureChannel_compromised_out_case_07
                                                          by contradiction /* from formulas */
                                                        next
                                                          case secureChannel_compromised_out_case_08
                                                          by contradiction /* from formulas */
                                                        next
                                                          case secureChannel_compromised_out_case_09
                                                          by contradiction /* from formulas */
                                                        next
                                                          case secureChannel_compromised_out_case_10
                                                          by contradiction /* from formulas */
                                                        next
                                                          case secureChannel_compromised_out_case_11
                                                          by contradiction /* from formulas */
                                                        next
                                                          case secureChannel_compromised_out_case_12
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case receive_secure_case_2
                                                        by contradiction /* cyclic */
                                                      qed
                                                    next
                                                      case relay_receive_relaykeyresponse_step12
                                                      by sorry
                                                    next
                                                      case secureChannel_compromised_out_case_01
                                                      by contradiction /* from formulas */
                                                    next
                                                      case secureChannel_compromised_out_case_02
                                                      by contradiction /* from formulas */
                                                    next
                                                      case secureChannel_compromised_out_case_03
                                                      by contradiction /* from formulas */
                                                    next
                                                      case secureChannel_compromised_out_case_04
                                                      by contradiction /* from formulas */
                                                    next
                                                      case secureChannel_compromised_out_case_05
                                                      by contradiction /* from formulas */
                                                    next
                                                      case secureChannel_compromised_out_case_06
                                                      by contradiction /* from formulas */
                                                    next
                                                      case secureChannel_compromised_out_case_07
                                                      by contradiction /* from formulas */
                                                    next
                                                      case secureChannel_compromised_out_case_08
                                                      by contradiction /* from formulas */
                                                    next
                                                      case secureChannel_compromised_out_case_09
                                                      by contradiction /* from formulas */
                                                    next
                                                      case secureChannel_compromised_out_case_10
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case init_homeNet
                                                    by sorry
                                                  next
                                                    case init_servNet
                                                    by sorry
                                                  next
                                                    case relay_receive_relay_auth_request_step6_case_1
                                                    by sorry
                                                  next
                                                    case relay_receive_relay_auth_request_step6_case_2
                                                    by sorry
                                                  next
                                                    case relay_receive_relay_auth_request_step6_case_3
                                                    by sorry
                                                  next
                                                    case relay_receive_relaykeyresponse_step12_case_1
                                                    by sorry
                                                  next
                                                    case relay_receive_relaykeyresponse_step12_case_2
                                                    by sorry
                                                  next
                                                    case relay_receive_relaykeyresponse_step12_case_3
                                                    by contradiction /* from formulas */
                                                  next
                                                    case reveal_Ltk_DUCK
                                                    by sorry
                                                  next
                                                    case reveal_Ltk_DUIK
                                                    by sorry
                                                  next
                                                    case reveal_Ltk_RSC
                                                    by sorry
                                                  next
                                                    case reveal_Ltk_Sqn
                                                    by sorry
                                                  next
                                                    case reveal_Ltk_Sym
                                                    by sorry
                                                  next
                                                    case reveal_Ltk_supi
                                                    by sorry
                                                  next
                                                    case reveal_Ltk_supi_relay
                                                    by sorry
                                                  next
                                                    case reveal_sk_HN
                                                    by sorry
                                                  next
                                                    case secureChannel_compromised_out_case_01
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_02
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_03
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_04
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_05
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_06
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_07
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_08
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_09
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_10
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_11
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_12
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_13
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_14
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_15
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_16
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_17
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_18
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_19
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_20
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_21
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_22
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_23
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_24
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_25
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_26
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_27
                                                    by contradiction /* from formulas */
                                                  next
                                                    case ue_receive_DSMCommand_step13_case_1
                                                    by sorry
                                                  next
                                                    case ue_receive_DSMCommand_step13_case_2
                                                    by sorry
                                                  next
                                                    case ue_receive_EAPReq_fail_freshness_send_sync_failure_step7b_case_1
                                                    by sorry
                                                  next
                                                    case ue_receive_EAPReq_fail_freshness_send_sync_failure_step7b_case_2
                                                    by sorry
                                                  next
                                                    case ue_receive_EAPReq_fail_freshness_send_sync_failure_step7b_case_3
                                                    by sorry
                                                  next
                                                    case ue_receive_EAPReq_fail_freshness_send_sync_failure_step7b_case_4
                                                    by sorry
                                                  next
                                                    case ue_send_DCR_step1_case_01
                                                    by sorry
                                                  next
                                                    case ue_send_DCR_step1_case_02
                                                    by sorry
                                                  next
                                                    case ue_send_DCR_step1_case_03
                                                    by sorry
                                                  next
                                                    case ue_send_DCR_step1_case_04
                                                    by sorry
                                                  next
                                                    case ue_send_DCR_step1_case_05
                                                    by sorry
                                                  next
                                                    case ue_send_DCR_step1_case_06
                                                    by sorry
                                                  next
                                                    case ue_send_DCR_step1_case_07
                                                    by sorry
                                                  next
                                                    case ue_send_DCR_step1_case_08
                                                    by sorry
                                                  next
                                                    case ue_send_DCR_step1_case_09
                                                    by sorry
                                                  next
                                                    case ue_send_DCR_step1_case_10
                                                    by sorry
                                                  qed
                                                next
                                                  case init_homeNet
                                                  by sorry
                                                next
                                                  case init_servNet
                                                  by sorry
                                                next
                                                  case relay_receive_relay_auth_request_step6_case_1
                                                  by sorry
                                                next
                                                  case relay_receive_relay_auth_request_step6_case_2
                                                  by sorry
                                                next
                                                  case relay_receive_relay_auth_request_step6_case_3
                                                  by sorry
                                                next
                                                  case relay_receive_relaykeyresponse_step12_case_1
                                                  by sorry
                                                next
                                                  case relay_receive_relaykeyresponse_step12_case_2
                                                  by sorry
                                                next
                                                  case relay_receive_relaykeyresponse_step12_case_3
                                                  by contradiction /* from formulas */
                                                next
                                                  case reveal_Ltk_DUCK
                                                  by sorry
                                                next
                                                  case reveal_Ltk_DUIK
                                                  by sorry
                                                next
                                                  case reveal_Ltk_RSC
                                                  by sorry
                                                next
                                                  case reveal_Ltk_Sqn
                                                  by sorry
                                                next
                                                  case reveal_Ltk_Sym
                                                  by sorry
                                                next
                                                  case reveal_Ltk_supi
                                                  by sorry
                                                next
                                                  case reveal_Ltk_supi_relay
                                                  by sorry
                                                next
                                                  case reveal_sk_HN
                                                  by sorry
                                                next
                                                  case secureChannel_compromised_out_case_01
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_02
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_03
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_04
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_05
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_06
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_07
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_08
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_09
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_10
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_11
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_12
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_13
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_14
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_15
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_16
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_17
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_18
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_19
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_20
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_21
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_22
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_23
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_24
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_25
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_26
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_27
                                                  by contradiction /* from formulas */
                                                next
                                                  case ue_receive_DSMCommand_step13_case_1
                                                  by sorry
                                                next
                                                  case ue_receive_DSMCommand_step13_case_2
                                                  by sorry
                                                next
                                                  case ue_receive_EAPReq_fail_freshness_send_sync_failure_step7b_case_1
                                                  by sorry
                                                next
                                                  case ue_receive_EAPReq_fail_freshness_send_sync_failure_step7b_case_2
                                                  by sorry
                                                next
                                                  case ue_receive_EAPReq_fail_freshness_send_sync_failure_step7b_case_3
                                                  by sorry
                                                next
                                                  case ue_receive_EAPReq_fail_freshness_send_sync_failure_step7b_case_4
                                                  by sorry
                                                next
                                                  case ue_send_DCR_step1_case_01
                                                  by sorry
                                                next
                                                  case ue_send_DCR_step1_case_02
                                                  by sorry
                                                next
                                                  case ue_send_DCR_step1_case_03
                                                  by sorry
                                                next
                                                  case ue_send_DCR_step1_case_04
                                                  by sorry
                                                next
                                                  case ue_send_DCR_step1_case_05
                                                  by sorry
                                                next
                                                  case ue_send_DCR_step1_case_06
                                                  by sorry
                                                next
                                                  case ue_send_DCR_step1_case_07
                                                  by sorry
                                                next
                                                  case ue_send_DCR_step1_case_08
                                                  by sorry
                                                next
                                                  case ue_send_DCR_step1_case_09
                                                  by sorry
                                                next
                                                  case ue_send_DCR_step1_case_10
                                                  by sorry
                                                qed
                                              next
                                                case init_homeNet
                                                by sorry
                                              next
                                                case init_servNet
                                                by sorry
                                              next
                                                case relay_receive_relay_auth_request_step6_case_1
                                                by sorry
                                              next
                                                case relay_receive_relay_auth_request_step6_case_2
                                                by sorry
                                              next
                                                case relay_receive_relay_auth_request_step6_case_3
                                                by sorry
                                              next
                                                case relay_receive_relaykeyresponse_step12_case_1
                                                by sorry
                                              next
                                                case relay_receive_relaykeyresponse_step12_case_2
                                                by sorry
                                              next
                                                case relay_receive_relaykeyresponse_step12_case_3
                                                by contradiction /* from formulas */
                                              next
                                                case reveal_Ltk_DUCK
                                                by sorry
                                              next
                                                case reveal_Ltk_DUIK
                                                by sorry
                                              next
                                                case reveal_Ltk_RSC
                                                by sorry
                                              next
                                                case reveal_Ltk_Sqn
                                                by sorry
                                              next
                                                case reveal_Ltk_Sym
                                                by sorry
                                              next
                                                case reveal_Ltk_supi
                                                by sorry
                                              next
                                                case reveal_Ltk_supi_relay
                                                by sorry
                                              next
                                                case reveal_sk_HN
                                                by sorry
                                              next
                                                case secureChannel_compromised_out_case_01
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_02
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_03
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_04
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_05
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_06
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_07
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_08
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_09
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_10
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_11
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_12
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_13
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_14
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_15
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_16
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_17
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_18
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_19
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_20
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_21
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_22
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_23
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_24
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_25
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_26
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_27
                                                by contradiction /* from formulas */
                                              next
                                                case ue_receive_DSMCommand_step13_case_1
                                                by sorry
                                              next
                                                case ue_receive_DSMCommand_step13_case_2
                                                by sorry
                                              next
                                                case ue_receive_EAPReq_fail_freshness_send_sync_failure_step7b_case_1
                                                by sorry
                                              next
                                                case ue_receive_EAPReq_fail_freshness_send_sync_failure_step7b_case_2
                                                by sorry
                                              next
                                                case ue_receive_EAPReq_fail_freshness_send_sync_failure_step7b_case_3
                                                by sorry
                                              next
                                                case ue_receive_EAPReq_fail_freshness_send_sync_failure_step7b_case_4
                                                by sorry
                                              next
                                                case ue_send_DCR_step1_case_01
                                                by sorry
                                              next
                                                case ue_send_DCR_step1_case_02
                                                by sorry
                                              next
                                                case ue_send_DCR_step1_case_03
                                                by sorry
                                              next
                                                case ue_send_DCR_step1_case_04
                                                by sorry
                                              next
                                                case ue_send_DCR_step1_case_05
                                                by sorry
                                              next
                                                case ue_send_DCR_step1_case_06
                                                by sorry
                                              next
                                                case ue_send_DCR_step1_case_07
                                                by sorry
                                              next
                                                case ue_send_DCR_step1_case_08
                                                by sorry
                                              next
                                                case ue_send_DCR_step1_case_09
                                                by sorry
                                              next
                                                case ue_send_DCR_step1_case_10
                                                by sorry
                                              qed
                                            qed
                                          next
                                            case init_homeNet
                                            by sorry
                                          next
                                            case init_servNet
                                            by sorry
                                          next
                                            case relay_receive_relay_auth_request_step6_case_1
                                            by sorry
                                          next
                                            case relay_receive_relay_auth_request_step6_case_2
                                            by sorry
                                          next
                                            case relay_receive_relay_auth_request_step6_case_3
                                            by sorry
                                          next
                                            case relay_receive_relaykeyresponse_step12_case_1
                                            by sorry
                                          next
                                            case relay_receive_relaykeyresponse_step12_case_2
                                            by sorry
                                          next
                                            case relay_receive_relaykeyresponse_step12_case_3
                                            by contradiction /* from formulas */
                                          next
                                            case reveal_Ltk_DUCK
                                            by sorry
                                          next
                                            case reveal_Ltk_DUIK
                                            by sorry
                                          next
                                            case reveal_Ltk_RSC
                                            by sorry
                                          next
                                            case reveal_Ltk_Sqn
                                            by sorry
                                          next
                                            case reveal_Ltk_Sym
                                            by sorry
                                          next
                                            case reveal_Ltk_supi
                                            by sorry
                                          next
                                            case reveal_Ltk_supi_relay
                                            by sorry
                                          next
                                            case reveal_sk_HN
                                            by sorry
                                          next
                                            case secureChannel_compromised_out_case_01
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_02
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_03
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_04
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_05
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_06
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_07
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_08
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_09
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_10
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_11
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_12
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_13
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_14
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_15
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_16
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_17
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_18
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_19
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_20
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_21
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_22
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_23
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_24
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_25
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_26
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_27
                                            by contradiction /* from formulas */
                                          next
                                            case ue_receive_DSMCommand_step13_case_1
                                            by sorry
                                          next
                                            case ue_receive_DSMCommand_step13_case_2
                                            by sorry
                                          next
                                            case ue_receive_EAPReq_fail_freshness_send_sync_failure_step7b_case_1
                                            by sorry
                                          next
                                            case ue_receive_EAPReq_fail_freshness_send_sync_failure_step7b_case_2
                                            by sorry
                                          next
                                            case ue_receive_EAPReq_fail_freshness_send_sync_failure_step7b_case_3
                                            by sorry
                                          next
                                            case ue_receive_EAPReq_fail_freshness_send_sync_failure_step7b_case_4
                                            by sorry
                                          next
                                            case ue_send_DCR_step1_case_01
                                            by sorry
                                          next
                                            case ue_send_DCR_step1_case_02
                                            by sorry
                                          next
                                            case ue_send_DCR_step1_case_03
                                            by sorry
                                          next
                                            case ue_send_DCR_step1_case_04
                                            by sorry
                                          next
                                            case ue_send_DCR_step1_case_05
                                            by sorry
                                          next
                                            case ue_send_DCR_step1_case_06
                                            by sorry
                                          next
                                            case ue_send_DCR_step1_case_07
                                            by sorry
                                          next
                                            case ue_send_DCR_step1_case_08
                                            by sorry
                                          next
                                            case ue_send_DCR_step1_case_09
                                            by sorry
                                          next
                                            case ue_send_DCR_step1_case_10
                                            by sorry
                                          qed
                                        next
                                          case relay_receive_relaykeyresponse_step12
                                          by sorry
                                        next
                                          case secureChannel_compromised_out_case_1
                                          by contradiction /* from formulas */
                                        next
                                          case secureChannel_compromised_out_case_2
                                          by contradiction /* from formulas */
                                        next
                                          case secureChannel_compromised_out_case_3
                                          by contradiction /* from formulas */
                                        next
                                          case secureChannel_compromised_out_case_4
                                          by contradiction /* from formulas */
                                        next
                                          case secureChannel_compromised_out_case_5
                                          by contradiction /* from formulas */
                                        next
                                          case secureChannel_compromised_out_case_6
                                          by contradiction /* from formulas */
                                        next
                                          case secureChannel_compromised_out_case_7
                                          by contradiction /* from formulas */
                                        next
                                          case secureChannel_compromised_out_case_8
                                          by contradiction /* from formulas */
                                        next
                                          case secureChannel_compromised_out_case_9
                                          by contradiction /* from formulas */
                                        next
                                          case ue_send_DCR_step1
                                          by sorry
                                        qed
                                      qed
                                    qed
                                  next
                                    case ue_receive_EAPReq_fail_freshness_send_sync_failure_step7b
                                    by sorry
                                  next
                                    case ue_receive_EAPReq_freshness_success_send_EAPResp_step7a
                                    by sorry
                                  next
                                    case ue_sqn_increase
                                    by sorry
                                  qed
                                qed
                              next
                                case ue_receive_EAPReq_fail_freshness_send_sync_failure_step7b
                                by sorry
                              next
                                case ue_receive_EAPReq_freshness_success_send_EAPResp_step7a
                                by sorry
                              next
                                case ue_sqn_increase
                                by sorry
                              qed
                            next
                              case receive_secure_case_3
                              by sorry
                            next
                              case receive_secure_case_4
                              by contradiction /* cyclic */
                            qed
                          next
                            case relay_receive_relay_auth_request_step6_case_3
                            by sorry
                          qed
                        next
                          case receive_secure_case_3
                          by sorry
                        next
                          case receive_secure_case_4
                          by contradiction /* cyclic */
                        qed
                      next
                        case relay_receive_relay_auth_request_step6_case_3
                        by sorry
                      next
                        case secureChannel_compromised_out_case_1
                        by contradiction /* from formulas */
                      next
                        case secureChannel_compromised_out_case_2
                        by contradiction /* from formulas */
                      next
                        case secureChannel_compromised_out_case_3
                        by contradiction /* from formulas */
                      next
                        case secureChannel_compromised_out_case_4
                        by contradiction /* from formulas */
                      next
                        case secureChannel_compromised_out_case_5
                        by contradiction /* from formulas */
                      next
                        case secureChannel_compromised_out_case_6
                        by contradiction /* from formulas */
                      qed
                    next
                      case ue_receive_EAPReq_freshness_success_send_EAPResp_step7a_case_06
                      by sorry
                    next
                      case ue_receive_EAPReq_freshness_success_send_EAPResp_step7a_case_07
                      by sorry
                    next
                      case ue_receive_EAPReq_freshness_success_send_EAPResp_step7a_case_08
                      by sorry
                    next
                      case ue_receive_EAPReq_freshness_success_send_EAPResp_step7a_case_09
                      by sorry
                    next
                      case ue_receive_EAPReq_freshness_success_send_EAPResp_step7a_case_10
                      by sorry
                    next
                      case ue_receive_EAPReq_freshness_success_send_EAPResp_step7a_case_11
                      by sorry
                    next
                      case ue_receive_EAPReq_freshness_success_send_EAPResp_step7a_case_12
                      by sorry
                    next
                      case ue_receive_EAPReq_freshness_success_send_EAPResp_step7a_case_13
                      by sorry
                    next
                      case ue_receive_EAPReq_freshness_success_send_EAPResp_step7a_case_14
                      by sorry
                    next
                      case ue_receive_EAPReq_freshness_success_send_EAPResp_step7a_case_15
                      by sorry
                    next
                      case ue_receive_EAPReq_freshness_success_send_EAPResp_step7a_case_16
                      by sorry
                    qed
                  next
                    case receive_secure_case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case receive_secure_case_2
                  by contradiction /* from formulas */
                qed
              next
                case receive_secure_case_2
                by contradiction /* from formulas */
              qed
            next
              case secureChannel_compromised_out_case_1
              by contradiction /* from formulas */
            next
              case secureChannel_compromised_out_case_2
              by contradiction /* from formulas */
            next
              case secureChannel_compromised_out_case_3
              by contradiction /* from formulas */
            next
              case secureChannel_compromised_out_case_4
              by contradiction /* from formulas */
            next
              case secureChannel_compromised_out_case_5
              by contradiction /* from formulas */
            next
              case secureChannel_compromised_out_case_6
              by contradiction /* from formulas */
            next
              case secureChannel_compromised_out_case_7
              by contradiction /* from formulas */
            next
              case secureChannel_compromised_out_case_8
              by contradiction /* from formulas */
            next
              case secureChannel_compromised_out_case_9
              by contradiction /* from formulas */
            qed
          next
            case ue_send_DCR_step1
            by sorry
          qed
        next
          case receive_secure_case_2
          by contradiction /* from formulas */
        qed
      next
        case receive_secure_case_2
        by contradiction /* from formulas */
      qed
    next
      case receive_secure_case_2
      by contradiction /* from formulas */
    qed
  qed
qed

lemma noninjectiveagreement_remote_HN_CP_PRUKID_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                      hide_lemma=sqn_HN_src,
                                                                                                      hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'HN', 'CP_PRUKID', t> ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'remote', 'HN', 'CP_PRUKID', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'HN', 'CP_PRUKID', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'remote', 'HN', 'CP_PRUKID', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_HN_remote_CP_PRUKID_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                      hide_lemma=sqn_HN_src,
                                                                                                      hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'HN', 'remote', 'CP_PRUKID', t> ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'HN', 'remote', 'CP_PRUKID', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'HN', 'remote', 'CP_PRUKID', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'HN', 'remote', 'CP_PRUKID', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_remote_HN_RSC_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                hide_lemma=sqn_HN_src,
                                                                                                hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'HN', 'RSC', t> ) @ #i) ⇒
    (((((((∃ #j. Running( b, a, <'remote', 'HN', 'RSC', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'HN', 'RSC', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'remote', 'HN', 'RSC', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_HN_remote_RSC_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                hide_lemma=sqn_HN_src,
                                                                                                hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'HN', 'remote', 'RSC', t> ) @ #i) ⇒
    (((((((∃ #j. Running( b, a, <'HN', 'remote', 'RSC', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'HN', 'remote', 'RSC', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'HN', 'remote', 'RSC', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_HN_remote_supi_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                 hide_lemma=sqn_HN_src,
                                                                                                 hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'HN', 'remote', 'supi', t> ) @ #i) ⇒
    (((((((∃ #j. Running( b, a, <'HN', 'remote', 'supi', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'HN', 'remote', 'supi', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'HN', 'remote', 'supi', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_remote_HN_supi_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                 hide_lemma=sqn_HN_src,
                                                                                                 hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'HN', 'supi', t> ) @ #i) ⇒
    (((((((∃ #j. Running( b, a, <'remote', 'HN', 'supi', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'HN', 'supi', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'remote', 'HN', 'supi', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_HN_remote_PLMNID_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                   hide_lemma=sqn_HN_src,
                                                                                                   hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'HN', 'remote', 'PLMNID', t> ) @ #i) ⇒
    (((((((∃ #j. Running( b, a, <'HN', 'remote', 'PLMNID', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'HN', 'remote', 'PLMNID', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'HN', 'remote', 'PLMNID', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_remote_HN_PLMNID_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                   hide_lemma=sqn_HN_src,
                                                                                                   hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'HN', 'PLMNID', t> ) @ #i) ⇒
    (((((((∃ #j. Running( b, a, <'remote', 'HN', 'PLMNID', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'HN', 'PLMNID', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'remote', 'HN', 'PLMNID', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_relay_SN_PLMNID_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                  hide_lemma=sqn_HN_src,
                                                                                                  hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'SN', 'PLMNID', t> ) @ #i) ⇒
    (((((((∃ #j. Running( b, a, <'relay', 'SN', 'PLMNID', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'SN', 'PLMNID', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'relay', 'SN', 'PLMNID', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_SN_relay_PLMNID_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                  hide_lemma=sqn_HN_src,
                                                                                                  hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'SN', 'relay', 'PLMNID', t> ) @ #i) ⇒
    (((((((∃ #j. Running( b, a, <'SN', 'relay', 'PLMNID', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'SN', 'relay', 'PLMNID', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'SN', 'relay', 'PLMNID', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_relay_SN_RSC_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                               hide_lemma=sqn_HN_src,
                                                                                               hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'SN', 'RSC', t> ) @ #i) ⇒
    (((((((∃ #j. Running( b, a, <'relay', 'SN', 'RSC', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'SN', 'RSC', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'relay', 'SN', 'RSC', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_SN_relay_RSC_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                               hide_lemma=sqn_HN_src,
                                                                                               hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'SN', 'relay', 'RSC', t> ) @ #i) ⇒
    (((((((∃ #j. Running( b, a, <'SN', 'relay', 'RSC', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'SN', 'relay', 'RSC', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'SN', 'relay', 'RSC', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_relay_SN_supi_relay_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                      hide_lemma=sqn_HN_src,
                                                                                                      hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'SN', 'supi_relay', t> ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'relay', 'SN', 'supi_relay', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'SN', 'supi_relay', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'relay', 'SN', 'supi_relay', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_SN_relay_supi_relay_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                      hide_lemma=sqn_HN_src,
                                                                                                      hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'SN', 'relay', 'supi_relay', t> ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'SN', 'relay', 'supi_relay', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'SN', 'relay', 'supi_relay', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'SN', 'relay', 'supi_relay', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_relay_HN_CP_PRUKID_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                     hide_lemma=sqn_HN_src,
                                                                                                     hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'HN', 'CP_PRUKID', t> ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'relay', 'HN', 'CP_PRUKID', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'HN', 'CP_PRUKID', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'relay', 'HN', 'CP_PRUKID', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_relay_HN_RSC_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                               hide_lemma=sqn_HN_src,
                                                                                               hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'HN', 'RSC', t> ) @ #i) ⇒
    (((((((∃ #j. Running( b, a, <'relay', 'HN', 'RSC', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'HN', 'RSC', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'relay', 'HN', 'RSC', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_relay_HN_K_NRprose_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                     hide_lemma=sqn_HN_src,
                                                                                                     hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'HN', 'K_NRprose', t> ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'relay', 'HN', 'K_NRprose', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'HN', 'K_NRprose', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'relay', 'HN', 'K_NRprose', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_SN_HN_RSC_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                            hide_lemma=sqn_HN_src,
                                                                                            hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'SN', 'HN', 'RSC', t> ) @ #i) ⇒
    (((((((∃ #j. Running( b, a, <'SN', 'HN', 'RSC', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'SN', 'HN', 'RSC', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'SN', 'HN', 'RSC', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_HN_SN_RSC_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                            hide_lemma=sqn_HN_src,
                                                                                            hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'HN', 'SN', 'RSC', t> ) @ #i) ⇒
    (((((((∃ #j. Running( b, a, <'HN', 'SN', 'RSC', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'HN', 'SN', 'RSC', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'HN', 'SN', 'RSC', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma injectiveagreement_remote_relay_K_relay_sess_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                         hide_lemma=sqn_HN_src,
                                                                                                         hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'relay', 'K_relay_sess', t> ) @ #i) ⇒
    (((((((∃ #j.
            ((Running( b, a, <'remote', 'relay', 'K_relay_sess', t> ) @ #j) ∧
             (#j < #i)) ∧
            (¬(∃ a2 b2 #i2.
                (Commit( a2, b2, <'remote', 'relay', 'K_relay_sess', t> ) @ #i2) ∧
                (¬(#i2 = #i))))) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'relay', 'K_relay_sess', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'remote', 'relay', 'K_relay_sess', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'remote', 'relay', 'K_relay_sess', t> ) @ #i2)
      ∧
       ¬(#i2 = #i)))) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma injectiveagreement_relay_remote_K_relay_sess_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                         hide_lemma=sqn_HN_src,
                                                                                                         hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'remote', 'K_relay_sess', t> ) @ #i) ⇒
    (((((((∃ #j.
            ((Running( b, a, <'relay', 'remote', 'K_relay_sess', t> ) @ #j) ∧
             (#j < #i)) ∧
            (¬(∃ a2 b2 #i2.
                (Commit( a2, b2, <'relay', 'remote', 'K_relay_sess', t> ) @ #i2) ∧
                (¬(#i2 = #i))))) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'remote', 'K_relay_sess', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'relay', 'remote', 'K_relay_sess', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'relay', 'remote', 'K_relay_sess', t> ) @ #i2)
      ∧
       ¬(#i2 = #i)))) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma injectiveagreement_remote_relay_K_sessID_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                     hide_lemma=sqn_HN_src,
                                                                                                     hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'relay', 'K_sessID', t> ) @ #i) ⇒
    (((((((∃ #j.
            ((Running( b, a, <'remote', 'relay', 'K_sessID', t> ) @ #j) ∧
             (#j < #i)) ∧
            (¬(∃ a2 b2 #i2.
                (Commit( a2, b2, <'remote', 'relay', 'K_sessID', t> ) @ #i2) ∧
                (¬(#i2 = #i))))) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'relay', 'K_sessID', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'remote', 'relay', 'K_sessID', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'remote', 'relay', 'K_sessID', t> ) @ #i2)
      ∧
       ¬(#i2 = #i)))) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma injectiveagreement_relay_remote_K_sessID_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                     hide_lemma=sqn_HN_src,
                                                                                                     hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'remote', 'K_sessID', t> ) @ #i) ⇒
    (((((((∃ #j.
            ((Running( b, a, <'relay', 'remote', 'K_sessID', t> ) @ #j) ∧
             (#j < #i)) ∧
            (¬(∃ a2 b2 #i2.
                (Commit( a2, b2, <'relay', 'remote', 'K_sessID', t> ) @ #i2) ∧
                (¬(#i2 = #i))))) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'remote', 'K_sessID', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'relay', 'remote', 'K_sessID', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'relay', 'remote', 'K_sessID', t> ) @ #i2)
      ∧
       ¬(#i2 = #i)))) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma injectiveagreement_remote_relay_K_relay_enc_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                        hide_lemma=sqn_HN_src,
                                                                                                        hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'relay', 'K_relay_enc', t> ) @ #i) ⇒
    (((((((∃ #j.
            ((Running( b, a, <'remote', 'relay', 'K_relay_enc', t> ) @ #j) ∧
             (#j < #i)) ∧
            (¬(∃ a2 b2 #i2.
                (Commit( a2, b2, <'remote', 'relay', 'K_relay_enc', t> ) @ #i2) ∧
                (¬(#i2 = #i))))) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'relay', 'K_relay_enc', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'remote', 'relay', 'K_relay_enc', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'remote', 'relay', 'K_relay_enc', t> ) @ #i2)
      ∧
       ¬(#i2 = #i)))) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma injectiveagreement_relay_remote_K_relay_enc_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                        hide_lemma=sqn_HN_src,
                                                                                                        hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'remote', 'K_relay_enc', t> ) @ #i) ⇒
    (((((((∃ #j.
            ((Running( b, a, <'relay', 'remote', 'K_relay_enc', t> ) @ #j) ∧
             (#j < #i)) ∧
            (¬(∃ a2 b2 #i2.
                (Commit( a2, b2, <'relay', 'remote', 'K_relay_enc', t> ) @ #i2) ∧
                (¬(#i2 = #i))))) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'remote', 'K_relay_enc', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'relay', 'remote', 'K_relay_enc', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'relay', 'remote', 'K_relay_enc', t> ) @ #i2)
      ∧
       ¬(#i2 = #i)))) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma injectiveagreement_remote_relay_K_relay_int_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                        hide_lemma=sqn_HN_src,
                                                                                                        hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'relay', 'K_relay_int', t> ) @ #i) ⇒
    (((((((∃ #j.
            ((Running( b, a, <'remote', 'relay', 'K_relay_int', t> ) @ #j) ∧
             (#j < #i)) ∧
            (¬(∃ a2 b2 #i2.
                (Commit( a2, b2, <'remote', 'relay', 'K_relay_int', t> ) @ #i2) ∧
                (¬(#i2 = #i))))) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'relay', 'K_relay_int', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'remote', 'relay', 'K_relay_int', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'remote', 'relay', 'K_relay_int', t> ) @ #i2)
      ∧
       ¬(#i2 = #i)))) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma injectiveagreement_relay_remote_K_relay_int_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                        hide_lemma=sqn_HN_src,
                                                                                                        hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'remote', 'K_relay_int', t> ) @ #i) ⇒
    (((((((∃ #j.
            ((Running( b, a, <'relay', 'remote', 'K_relay_int', t> ) @ #j) ∧
             (#j < #i)) ∧
            (¬(∃ a2 b2 #i2.
                (Commit( a2, b2, <'relay', 'remote', 'K_relay_int', t> ) @ #i2) ∧
                (¬(#i2 = #i))))) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'remote', 'K_relay_int', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'relay', 'remote', 'K_relay_int', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'relay', 'remote', 'K_relay_int', t> ) @ #i2)
      ∧
       ¬(#i2 = #i)))) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

/* All well-formedness checks were successful. */

end