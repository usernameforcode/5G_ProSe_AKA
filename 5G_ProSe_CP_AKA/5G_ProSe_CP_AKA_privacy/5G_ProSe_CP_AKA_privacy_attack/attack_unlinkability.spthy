theory CP_5G_Prose_authentication_protocol begin

// Function signature and definition of the equational theory E

builtins: multiset, xor
functions: Int/2, KDF/2, adec/2, aenc/2, f1/2, f1_star/2, f2/2,
           f3/2, f4/2, f5/2, f5_star/2, fst/1, pair/2, pk/1, sdec/2, senc/2,
           snd/1
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2



rule (modulo E) send_secure:
   [ SndS( ~cid, A, B, m ) ] --> [ Sec( ~cid, A, B, m ) ]

rule (modulo E) receive_secure:
   [ Sec( ~cid, A, B, m ) ] --> [ RcvS( ~cid, A, B, m ) ]

rule (modulo E) init_servNet:
   [ Fr( ~idSN ) ]
  --[ ServNet( ~idSN ) ]->
   [ !AMF( ~idSN, <'5G', ~idSN> ), Out( <'5G', ~idSN> ) ]

rule (modulo E) supi_supply:
   [ Fr( ~a ), Fr( ~b ) ]
  --[ Once( ) ]->
   [ !SUPI_Init( (~a+~b) ), SUPI( ~a ), SUPI( diff(~a, ~b) ) ]

rule (modulo E) init_homeNet:
   [ Fr( ~sk_HN ), Fr( ~idHN ) ]
  --[ HomeNet( ~idHN ) ]->
   [
   !HN( ~idHN, ~sk_HN ), !Pk( ~idHN, pk(~sk_HN) ),
   Out( <~idHN, pk(~sk_HN)> )
   ]

rule (modulo E) add_RSC:
   [ Fr( ~RSC ), Fr( ~DUCK ), Fr( ~DUIK ) ]
  -->
   [ !Ltk_Prose( ~RSC, ~DUCK, ~DUIK ) ]

rule (modulo E) add_subscription:
   [
   !SUPI_Init( (~supi+z) ), Fr( ~k ), Fr( ~sqn_root ),
   Fr( ~User_info_remote ), !HN( ~idHN, ~sk_HN )
   ]
  --[
  Subscribe( ~supi, ~idHN ), Sqn_Create( ~supi, ~idHN, ~sqn_root ),
  CreateUser( ~supi, ~k, ~idHN )
  ]->
   [
   !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root, ~User_info_remote ),
   Sqn_UE( ~supi, ~idHN, ('1'+~sqn_root), ~sqn_root, '1' ),
   Sqn_HN( ~supi, ~idHN, ('1'+~sqn_root), ~sqn_root, '1' )
   ]

rule (modulo E) init_Relay:
   [ Fr( ~User_info_relay ), !AMF( ~idSN, SNID ), Fr( ~supi_relay ) ]
  --[ CreateRelay( ~supi_relay ) ]->
   [ !Relay( ~User_info_relay, ~supi_relay, ~idSN ) ]

rule (modulo E) reveal_Ltk_supi_relay:
   [ !Relay( ~User_info_relay, ~supi_relay, ~idSN ) ]
  --[
  Rev( ~supi_relay, <'supi_relay', ~supi_relay> ),
  Rev( ~idSN, <'supi_relay', ~supi_relay> )
  ]->
   [ Out( ~supi_relay ) ]

rule (modulo E) reveal_Ltk_RSC:
   [
   !Ltk_Prose( ~RSC, ~DUCK, ~DUIK ),
   !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root, ~User_info_remote ),
   !Relay( ~User_info_relay, ~supi_relay, ~idSN )
   ]
  --[ Rev( ~supi, <'RSC', ~RSC> ), Rev( ~supi_relay, <'RSC', ~RSC> )
  ]->
   [ Out( ~RSC ) ]

rule (modulo E) reveal_Ltk_DUIK:
   [
   !Ltk_Prose( ~RSC, ~DUCK, ~DUIK ),
   !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root, ~User_info_remote ),
   !Relay( ~User_info_relay, ~supi_relay, ~idSN )
   ]
  --[
  Rev( ~supi, <'DUIK', ~DUIK> ), Rev( ~supi_relay, <'DUIK', ~DUIK> )
  ]->
   [ Out( ~DUIK ) ]

rule (modulo E) reveal_Ltk_DUCK:
   [
   !Ltk_Prose( ~RSC, ~DUCK, ~DUIK ),
   !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root, ~User_info_remote ),
   !Relay( ~User_info_relay, ~supi_relay, ~idSN )
   ]
  --[
  Rev( ~supi, <'DUCK', ~DUCK> ), Rev( ~supi_relay, <'DUCK', ~DUCK> )
  ]->
   [ Out( ~DUCK ) ]

rule (modulo E) ue_send_DCR_step1:
   [
   !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root, ~User_info_remote ),
   !Ltk_Prose( ~RSC, ~DUCK, ~DUIK ), !Pk( ~idHN, pk_HN ),
   Fr( ~SeCap ), Fr( ~CP_Se_Po ), Fr( ~UP_Se_Po ), SUPI( ~supi ),
   Fr( ~R ), Fr( ~MSB_KsessID ), Fr( ~Nonce1 ),
   !Relay( ~User_info_relay, ~supi_relay, ~idSN )
   ]
  --[ Start_UE_Session( ~supi ) ]->
   [
   St_1_UE( ~supi, ~supi_relay, ~User_info_remote, ~User_info_relay,
            ~idHN, ~k, ~sqn_root, ~RSC, ~Nonce1, ~DUCK, ~DUIK, ~SeCap,
            ~CP_Se_Po, ~UP_Se_Po, ~MSB_KsessID
   ),
   Out( <<aenc(<~supi, ~R>, pk_HN), ~idHN>, ~User_info_remote, 
         ~User_info_relay, (~RSC⊕KDF(~DUCK, <~Nonce1, ~RSC>)), ~Nonce1, 
         ~SeCap, ~CP_Se_Po, ~MSB_KsessID, 
         KDF(~DUIK,
             <<aenc(<~supi, ~R>, pk_HN), ~idHN>, ~User_info_remote, 
              ~User_info_relay, (~RSC⊕KDF(~DUCK, <~Nonce1, ~RSC>)), ~Nonce1, 
              ~SeCap, ~CP_Se_Po, ~MSB_KsessID>)
        >
   )
   ]

rule (modulo E) relay_send_relaykeyrequest_step2:
   [
   Fr( ~transactionid ),
   In( <<aenc(<~supi, ~R>, pk_HN), ~idHN>, ~User_info_remote, 
        ~User_info_relay, (~RSC⊕KDF(~DUCK, <Nonce1, ~RSC>)), Nonce1, 
        ~SeCap, ~CP_Se_Po, ~MSB_KsessID, 
        KDF(~DUIK,
            <<aenc(<~supi, ~R>, pk_HN), ~idHN>, ~User_info_remote, 
             ~User_info_relay, (~RSC⊕KDF(~DUCK, <Nonce1, ~RSC>)), Nonce1, 
             ~SeCap, ~CP_Se_Po, ~MSB_KsessID>)
       >
   ),
   !Ltk_Prose( ~RSC, ~DUCK, ~DUIK ),
   !Relay( ~User_info_relay, ~supi_relay, ~idSN )
   ]
  --[
  Out_relay( ~transactionid, <aenc(<~supi, ~R>, pk_HN), ~idHN>, ~RSC,
             Nonce1
  ),
  Start_relay_Session( ~supi_relay )
  ]->
   [
   St_1_relay( ~transactionid, ~User_info_remote, ~supi,
               ~User_info_relay, ~idSN, ~idHN, ~supi_relay, ~RSC, Nonce1, ~SeCap,
               ~CP_Se_Po, ~MSB_KsessID
   ),
   SndS( ~transactionid, ~supi_relay, ~idSN,
         <'relaykeyrequest', ~transactionid, 
          <aenc(<~supi, ~R>, pk_HN), ~idHN>, ~RSC, Nonce1>
   )
   ]

rule (modulo E) AMF_receive_relaykeyrequest_step3:
   [
   !AMF( ~idSN, SNID ), Fr( ~cid ),
   !Relay( User_info_relay, supi_relay, ~idSN ),
   RcvS( transactionid, supi_relay, ~idSN,
         <'relaykeyrequest', transactionid, 
          <aenc(<~supi, ~R>, pk_HN), ~idHN>, RSC, Nonce1>
   )
   ]
  --[
  Start_AMF_Session( ~idSN ),
  In_AMF( transactionid, <aenc(<~supi, ~R>, pk_HN), ~idHN>, RSC,
          Nonce1
  )
  ]->
   [
   St_1_AMF( transactionid, ~idSN, ~supi, supi_relay, ~idHN, RSC,
             Nonce1, ~cid
   ),
   SndS( ~cid, ~idSN, ~idHN,
         <'ProseAuthenticateRequest', <aenc(<~supi, ~R>, pk_HN), ~idHN>, 
          RSC, Nonce1, SNID>
   )
   ]

rule (modulo E) HN_receive_Nausf_UE_PAR_step4:
   [
   !HN( ~idHN, ~sk_HN ),
   RcvS( ~cid, idSN, ~idHN,
         <'ProseAuthenticateRequest', 
          <aenc(<~supi, ~R>, pk(~sk_HN)), ~idHN>, ~RSC, Nonce1, '5G', idSN>
   ),
   !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root, ~User_info_remote ),
   !Relay( ~User_info_relay, ~supi_relay, idSN ),
   Sqn_HN( ~supi, ~idHN, SqnHN, ~sqn_root, count ), Fr( ~RAND ),
   In( count )
   ]
  --[
  Sqn_HN_Invariance( ~idHN, ~supi, ('1'+SqnHN), ~sqn_root,
                     ('1'+count)
  ),
  Out_HN( <~RAND, 
           <(f5(~k, ~RAND)⊕('1'+SqnHN)), f1(~k, <('1'+SqnHN), ~RAND>)>, 
           <'5G', idSN>, 
           KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                       <<'5G', idSN>, (f5(~k, ~RAND)⊕('1'+SqnHN))>),
                   <'EAPAKA', ~supi, 'K_aut'>),
               <~RAND, 
                <(f5(~k, ~RAND)⊕('1'+SqnHN)), f1(~k, <('1'+SqnHN), ~RAND>)>, '5G', 
                idSN>)
          >
  ),
  Start_HN_Session( ~idHN )
  ]->
   [
   St_1_HN( ~idHN, ~supi, ~supi_relay, idSN, ~k, ('1'+SqnHN),
            f2(~k, ~RAND), ~RAND, ~sqn_root, ~sk_HN, ~cid, ~RSC, Nonce1
   ),
   Sqn_HN( ~supi, ~idHN, ('1'+SqnHN), ~sqn_root, ('1'+count) ),
   SndS( ~cid, ~idHN, idSN,
         <'ProseAuthenticateResponse', ~RAND, 
          <(f5(~k, ~RAND)⊕('1'+SqnHN)), f1(~k, <('1'+SqnHN), ~RAND>)>, 
          <'5G', idSN>, 
          KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                      <<'5G', idSN>, (f5(~k, ~RAND)⊕('1'+SqnHN))>),
                  <'EAPAKA', ~supi, 'K_aut'>),
              <~RAND, 
               <(f5(~k, ~RAND)⊕('1'+SqnHN)), f1(~k, <('1'+SqnHN), ~RAND>)>, '5G', 
               idSN>)
         >
   )
   ]

rule (modulo E) AMF_receive_Nausf_UE_PAResponse_step5:
   [
   St_1_AMF( transactionid, ~idSN, ~supi, supi_relay, idHN, RSC,
             Nonce1, ~cid
   ),
   RcvS( ~cid, idHN, ~idSN,
         <'ProseAuthenticateResponse', RAND, AUTN, SNID, AT_MAC>
   )
   ]
  --[
  In_AMF2( <RAND, AUTN, SNID, AT_MAC> ),
  Out_AMF2( transactionid, RAND, AUTN, SNID, AT_MAC )
  ]->
   [
   St_2_AMF( transactionid, ~idSN, ~supi, supi_relay, idHN, RSC,
             Nonce1, ~cid, RAND
   ),
   SndS( transactionid, ~idSN, supi_relay,
         <'relay_auth_request', transactionid, RAND, AUTN, SNID, AT_MAC>
   )
   ]

rule (modulo E) relay_receive_relay_auth_request_step6:
   [
   St_1_relay( ~transactionid, ~User_info_remote, ~supi,
               ~User_info_relay, ~idSN, idHN, ~supi_relay, ~RSC, Nonce1, ~SeCap,
               ~CP_Se_Po, ~MSB_KsessID
   ),
   RcvS( ~transactionid, ~idSN, ~supi_relay,
         <'relay_auth_request', ~transactionid, RAND, AUTN, SNID, AT_MAC>
   )
   ]
  --[ In_relay2( ~transactionid, RAND, AUTN, SNID, AT_MAC ) ]->
   [
   St_2_relay( ~transactionid, ~User_info_remote, ~supi,
               ~User_info_relay, ~idSN, idHN, ~supi_relay, ~RSC, Nonce1, ~SeCap,
               ~CP_Se_Po, ~MSB_KsessID, RAND
   ),
   Out( <RAND, AUTN, SNID, AT_MAC> )
   ]

rule (modulo E) ue_receive_EAPReq_freshness_success_send_EAPResp_step7a:
   [
   St_1_UE( ~supi, ~supi_relay, ~User_info_remote, ~User_info_relay,
            ~idHN, ~k, ~sqn_root, ~RSC, ~Nonce1, ~DUCK, ~DUIK, ~SeCap,
            ~CP_Se_Po, ~UP_Se_Po, ~MSB_KsessID
   ),
   Sqn_UE( ~supi, ~idHN, SqnUE, ~sqn_root, count ),
   In( <RAND, 
        <(f5(~k, RAND)⊕(SqnUE+dif)), f1(~k, <(SqnUE+dif), RAND>)>, 
        <'5G', idSN>, 
        KDF(KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                    <<'5G', idSN>, (f5(~k, RAND)⊕(SqnUE+dif))>),
                <'EAPAKA', ~supi, 'K_aut'>),
            <RAND, <(f5(~k, RAND)⊕(SqnUE+dif)), f1(~k, <(SqnUE+dif), RAND>)>, 
             '5G', idSN>)
       >
   )
   ]
  --[
  Sqn_UE_Invariance( ~supi, ~idHN, (SqnUE+dif), ~sqn_root,
                     (count+dif)
  ),
  Sqn_UE_Change( ~supi, ~idHN, (SqnUE+dif) ),
  Sqn_UE_Use( ~supi, ~idHN, (SqnUE+dif) ),
  Running( ~supi, ~idHN, <'HN', 'remote', 'RSC', ~RSC> ),
  Running( ~supi, ~idHN, <'HN', 'remote', 'supi', ~supi> ),
  Running( ~supi, ~idHN,
           <'HN', 'remote', 'CP_PRUK', 
            KDF(KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                        <<'5G', idSN>, (f5(~k, RAND)⊕(SqnUE+dif))>),
                    <'EAPAKA', ~supi, 'K_ausf'>),
                <~supi, ~RSC>)
           >
  ),
  Running( ~supi, ~idHN,
           <'HN', 'remote', 'CP_PRUKID', 
            KDF(KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                        <<'5G', idSN>, (f5(~k, RAND)⊕(SqnUE+dif))>),
                    <'EAPAKA', ~supi, 'K_ausf'>),
                <'CP_PRUKID', ~RSC, ~supi>)
           >
  ),
  Running( ~supi, ~idHN, <'HN', 'remote', 'PLMNID', idSN> )
  ]->
   [
   St_2_UE( ~supi, ~supi_relay, ~User_info_remote, ~User_info_relay,
            ~idHN, ~k, ~sqn_root, ~RSC, ~Nonce1, ~DUCK, ~DUIK, ~SeCap,
            ~CP_Se_Po, ~UP_Se_Po, ~MSB_KsessID, idSN,
            KDF(KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                        <<'5G', idSN>, (f5(~k, RAND)⊕(SqnUE+dif))>),
                    <'EAPAKA', ~supi, 'K_ausf'>),
                <~supi, ~RSC>),
            KDF(KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                        <<'5G', idSN>, (f5(~k, RAND)⊕(SqnUE+dif))>),
                    <'EAPAKA', ~supi, 'K_ausf'>),
                <'CP_PRUKID', ~RSC, ~supi>)
   ),
   Out( <f2(~k, RAND), 
         KDF(KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                     <<'5G', idSN>, (f5(~k, RAND)⊕(SqnUE+dif))>),
                 <'EAPAKA', ~supi, 'K_aut'>),
             f2(~k, RAND))
        >
   ),
   Sqn_UE( ~supi, ~idHN, (SqnUE+dif), ~sqn_root, (count+dif) )
   ]

rule (modulo E) ue_receive_EAPReq_fail_freshness_send_sync_failure_step7b:
   [
   St_1_UE( ~supi, ~supi_relay, ~User_info_remote, ~User_info_relay,
            ~idHN, ~k, ~sqn_root, ~RSC, ~Nonce1, ~DUCK, ~DUIK, ~SeCap,
            ~CP_Se_Po, ~UP_Se_Po, ~MSB_KsessID
   ),
   Sqn_UE( ~supi, ~idHN, SqnUE, ~sqn_root, count ),
   In( <RAND, <(SqnHN⊕f5(~k, RAND)), f1(~k, <SqnHN, RAND>)>, 
        <'5G', idSN>, 
        KDF(KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                    <<'5G', idSN>, (SqnHN⊕f5(~k, RAND))>),
                <'EAPAKA', ~supi, 'K_aut'>),
            <RAND, <(SqnHN⊕f5(~k, RAND)), f1(~k, <SqnHN, RAND>)>, '5G', idSN>)
       >
   ),
   In( count )
   ]
  --[
  Greater_Or_Equal_Than( SqnUE, SqnHN ),
  Sqn_UE_Invariance( ~supi, ~idHN, SqnUE, ~sqn_root, count ),
  Sqn_UE_Nochange( ~supi, ~idHN, SqnUE )
  ]->
   [
   Out( <(SqnUE⊕f5_star(~k, RAND)), f1_star(~k, <SqnUE, RAND>)> ),
   Sqn_UE( ~supi, ~idHN, SqnUE, ~sqn_root, count )
   ]

rule (modulo E) relay_receive_EAPResp_step8a:
   [
   St_2_relay( ~transactionid, ~User_info_remote, ~supi,
               ~User_info_relay, ~idSN, ~idHN, ~supi_relay, ~RSC, Nonce1, ~SeCap,
               ~CP_Se_Po, ~MSB_KsessID, RAND
   ),
   In( <XRES, AT_MAC_UE> )
   ]
  --[
  Out_relay4( XRES, AT_MAC_UE ),
  Running( ~supi_relay, ~idSN, <'SN', 'relay', 'RSC', ~RSC> ),
  Running( ~supi_relay, ~idSN,
           <'SN', 'relay', 'supi_relay', ~supi_relay>
  ),
  Running( ~supi_relay, ~idSN, <'SN', 'relay', 'PLMNID', ~idSN> )
  ]->
   [
   St_3_relay( ~transactionid, ~User_info_remote, ~supi,
               ~User_info_relay, ~idSN, ~idHN, ~supi_relay, ~RSC, Nonce1, ~SeCap,
               ~CP_Se_Po, ~MSB_KsessID, RAND
   ),
   SndS( ~transactionid, ~supi_relay, ~idSN,
         <'relayauthresponse', XRES, AT_MAC_UE>
   )
   ]

rule (modulo E) relay_receive_syncFailure_authResp_step8b:
   [
   St_2_relay( ~transactionid, ~User_info_remote, ~supi,
               ~User_info_relay, ~idSN, idHN, ~supi_relay, ~RSC, Nonce1, ~SeCap,
               ~CP_Se_Po, ~MSB_KsessID, RAND
   ),
   In( AUTS )
   ]
  --[ Out_relay5( AUTS ) ]->
   [ SndS( ~transactionid, ~supi_relay, ~idSN, <'resync', AUTS> ) ]

rule (modulo E) AMF_receive_relayauthResponse_step9a:
   [
   St_2_AMF( transactionid, ~idSN, ~supi, supi_relay, idHN, RSC,
             Nonce1, ~cid, RAND
   ),
   RcvS( transactionid, supi_relay, ~idSN,
         <'relayauthresponse', XRES, AT_MAC_UE>
   )
   ]
  --[
  In_AMF4( XRES, AT_MAC_UE ),
  Running( ~idSN, idHN, <'HN', 'SN', 'RSC', RSC> ),
  Running( ~idSN, supi_relay,
           <'relay', 'SN', 'supi_relay', supi_relay>
  ),
  Running( ~idSN, supi_relay, <'relay', 'SN', 'RSC', RSC> ),
  Running( ~idSN, supi_relay, <'relay', 'SN', 'PLMNID', ~idSN> )
  ]->
   [
   St_3_AMF( transactionid, ~idSN, ~supi, supi_relay, idHN, RSC,
             Nonce1, ~cid, RAND
   ),
   SndS( ~cid, ~idSN, idHN,
         <'ProseAuthenticateRequest2', XRES, AT_MAC_UE>
   )
   ]

rule (modulo E) AMF_receive_syncFailure_send_authSync_step9b:
   [
   St_2_AMF( transactionid, ~idSN, ~supi, supi_relay, idHN, RSC,
             Nonce1, ~cid, RAND
   ),
   RcvS( transactionid, supi_relay, ~idSN, <'resync', AUTS> )
   ]
  --[ In_AMF5( AUTS ) ]->
   [ SndS( ~cid, ~idSN, idHN, <'resync', RAND, AUTS> ) ]

rule (modulo E) HN_receive_Nausf_UE_PAR2_step10a:
   [
   St_1_HN( ~idHN, ~supi, ~supi_relay, idSN, ~k, SqnNext, XRES, ~RAND,
            ~sqn_root, ~sk_HN, ~cid, RSC, Nonce1
   ),
   RcvS( ~cid, idSN, ~idHN,
         <'ProseAuthenticateRequest2', XRES, 
          KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                      <<'5G', idSN>, (SqnNext⊕f5(~k, ~RAND))>),
                  <'EAPAKA', ~supi, 'K_aut'>),
              XRES)
         >
   ),
   Fr( ~Nonce2 )
   ]
  --[
  HN_End( ),
  Out_HN2( <
            KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                        <<'5G', idSN>, (SqnNext⊕f5(~k, ~RAND))>),
                    <'EAPAKA', ~supi, 'K_ausf'>),
                <'CP_PRUKID', RSC, ~supi>), 
            KDF(KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                            <<'5G', idSN>, (SqnNext⊕f5(~k, ~RAND))>),
                        <'EAPAKA', ~supi, 'K_ausf'>),
                    <~supi, RSC>),
                <Nonce1, ~Nonce2>), 
            ~Nonce2>
  ),
  Secret( <'HN', ~idHN>, 'CPPRUK',
          KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                      <<'5G', idSN>, (SqnNext⊕f5(~k, ~RAND))>),
                  <'EAPAKA', ~supi, 'K_ausf'>),
              <~supi, RSC>)
  ),
  Secret( <'HN', ~idHN>, 'CPPRUKID',
          KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                      <<'5G', idSN>, (SqnNext⊕f5(~k, ~RAND))>),
                  <'EAPAKA', ~supi, 'K_ausf'>),
              <'CP_PRUKID', RSC, ~supi>)
  ),
  Secret( <'HN', ~idHN>, 'RSC', RSC ),
  Secret( <'HN', ~idHN>, 'supi', ~supi ),
  Secret( <'HN', ~idHN>, 'K_NRprose',
          KDF(KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                          <<'5G', idSN>, (SqnNext⊕f5(~k, ~RAND))>),
                      <'EAPAKA', ~supi, 'K_ausf'>),
                  <~supi, RSC>),
              <Nonce1, ~Nonce2>)
  ),
  Running( ~idHN, idSN, <'SN', 'HN', 'RSC', RSC> ),
  Running( ~idHN, ~supi, <'remote', 'HN', 'RSC', RSC> ),
  Running( ~idHN, ~supi,
           <'remote', 'HN', 'CP_PRUK', 
            KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                        <<'5G', idSN>, (SqnNext⊕f5(~k, ~RAND))>),
                    <'EAPAKA', ~supi, 'K_ausf'>),
                <~supi, RSC>)
           >
  ),
  Running( ~idHN, ~supi,
           <'remote', 'HN', 'CP_PRUKID', 
            KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                        <<'5G', idSN>, (SqnNext⊕f5(~k, ~RAND))>),
                    <'EAPAKA', ~supi, 'K_ausf'>),
                <'CP_PRUKID', RSC, ~supi>)
           >
  ),
  Running( ~idHN, ~supi, <'remote', 'HN', 'supi', ~supi> ),
  Running( ~idHN, ~supi, <'remote', 'HN', 'PLMNID', idSN> ),
  Running( ~idHN, ~supi_relay, <'relay', 'HN', 'RSC', RSC> ),
  Running( ~idHN, ~supi_relay,
           <'relay', 'HN', 'CP_PRUKID', 
            KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                        <<'5G', idSN>, (SqnNext⊕f5(~k, ~RAND))>),
                    <'EAPAKA', ~supi, 'K_ausf'>),
                <'CP_PRUKID', RSC, ~supi>)
           >
  ),
  Running( ~idHN, ~supi_relay,
           <'relay', 'HN', 'K_NRprose', 
            KDF(KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                            <<'5G', idSN>, (SqnNext⊕f5(~k, ~RAND))>),
                        <'EAPAKA', ~supi, 'K_ausf'>),
                    <~supi, RSC>),
                <Nonce1, ~Nonce2>)
           >
  ),
  Commit( ~idHN, ~supi, <'HN', 'remote', 'RSC', RSC> ),
  Commit( ~idHN, ~supi, <'HN', 'remote', 'supi', ~supi> ),
  Commit( ~idHN, ~supi,
          <'HN', 'remote', 'CP_PRUK', 
           KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                       <<'5G', idSN>, (SqnNext⊕f5(~k, ~RAND))>),
                   <'EAPAKA', ~supi, 'K_ausf'>),
               <~supi, RSC>)
          >
  ),
  Commit( ~idHN, ~supi,
          <'HN', 'remote', 'CP_PRUKID', 
           KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                       <<'5G', idSN>, (SqnNext⊕f5(~k, ~RAND))>),
                   <'EAPAKA', ~supi, 'K_ausf'>),
               <'CP_PRUKID', RSC, ~supi>)
          >
  ),
  Commit( ~idHN, ~supi, <'HN', 'remote', 'PLMNID', idSN> ),
  Commit( ~idHN, idSN, <'HN', 'SN', 'RSC', RSC> ), Honest( ~supi ),
  Honest( ~supi_relay ), Honest( ~idHN ), Honest( idSN )
  ]->
   [
   SndS( ~cid, ~idHN, idSN,
         <'ProseAuthenticateResponse2', 
          KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                      <<'5G', idSN>, (SqnNext⊕f5(~k, ~RAND))>),
                  <'EAPAKA', ~supi, 'K_ausf'>),
              <'CP_PRUKID', RSC, ~supi>), 
          KDF(KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                          <<'5G', idSN>, (SqnNext⊕f5(~k, ~RAND))>),
                      <'EAPAKA', ~supi, 'K_ausf'>),
                  <~supi, RSC>),
              <Nonce1, ~Nonce2>), 
          ~Nonce2>
   )
   ]

rule (modulo E) AMF_receive_Nausf_UE_PAResponse2_step11:
   [
   St_3_AMF( transactionid, ~idSN, ~supi, supi_relay, idHN, RSC,
             Nonce1, ~cid, RAND
   ),
   RcvS( ~cid, idHN, ~idSN,
         <'ProseAuthenticateResponse2', CP_PRUKID, K_NRprose, ~Nonce2>
   )
   ]
  --[
  In_AMF3( <CP_PRUKID, K_NRprose, ~Nonce2> ), AMF_End( ),
  Secret( <'SN', ~idSN>, 'CPPRUKID', CP_PRUKID ),
  Secret( <'SN', ~idSN>, 'RSC', RSC ),
  Secret( <'SN', ~idSN>, 'K_NRprose', K_NRprose ),
  Commit( ~idSN, supi_relay, <'SN', 'relay', 'RSC', RSC> ),
  Commit( ~idSN, supi_relay,
          <'SN', 'relay', 'supi_relay', supi_relay>
  ),
  Commit( ~idSN, supi_relay, <'SN', 'relay', 'PLMNID', ~idSN> ),
  Commit( ~idSN, idHN, <'SN', 'HN', 'RSC', RSC> ), Honest( ~supi ),
  Honest( supi_relay ), Honest( idHN ), Honest( ~idSN )
  ]->
   [
   St_4_AMF( transactionid, ~idSN, ~supi, supi_relay, idHN, RSC,
             Nonce1, ~cid, RAND, K_NRprose, CP_PRUKID, ~Nonce2
   ),
   SndS( transactionid, ~idSN, supi_relay,
         <'relaykeyresponse', CP_PRUKID, K_NRprose, ~Nonce2>
   )
   ]

rule (modulo E) relay_receive_relaykeyresponse_step12:
   [
   Fr( ~LSB_KsessID ),
   St_3_relay( ~transactionid, ~User_info_remote, ~supi,
               ~User_info_relay, ~idSN, idHN, ~supi_relay, ~RSC, Nonce1, ~SeCap,
               ~CP_Se_Po, ~MSB_KsessID, RAND
   ),
   RcvS( ~transactionid, ~idSN, ~supi_relay,
         <'relaykeyresponse', CP_PRUKID, K_NRprose, ~Nonce2>
   )
   ]
  --[
  Running( ~supi_relay, ~supi,
           <'remote', 'relay', 'K_sessID', ~LSB_KsessID, ~MSB_KsessID>
  ),
  Running( ~supi_relay, ~supi,
           <'remote', 'relay', 'K_relay_sess', 
            KDF(K_NRprose, <Nonce1, ~Nonce2>)>
  ),
  Running( ~supi_relay, ~supi,
           <'remote', 'relay', 'K_relay_enc', 
            KDF(KDF(K_NRprose, <Nonce1, ~Nonce2>),
                <'0x00', 'confidential_algorithm'>)
           >
  ),
  Running( ~supi_relay, ~supi,
           <'remote', 'relay', 'K_relay_int', 
            KDF(KDF(K_NRprose, <Nonce1, ~Nonce2>),
                <'0x01', 'integrity_algorithm'>)
           >
  ),
  Running( ~supi_relay, ~supi,
           <'remote', 'relay', 'CP_PRUKID', CP_PRUKID>
  ),
  Running( ~supi_relay, ~supi, <'remote', 'relay', 'RSC', ~RSC> ),
  Running( ~supi_relay, ~supi, <'remote', 'relay', 'SeCap', ~SeCap>
  ),
  Running( ~supi_relay, ~supi,
           <'remote', 'relay', 'CPsecurity_policy', ~CP_Se_Po>
  ),
  Running( ~supi_relay, ~supi,
           <'remote', 'relay', 'K_NRprose', K_NRprose>
  )
  ]->
   [
   St_4_relay( ~transactionid, ~User_info_remote, ~supi,
               ~User_info_relay, ~idSN, idHN, ~supi_relay, ~RSC, Nonce1, ~SeCap,
               ~CP_Se_Po, ~MSB_KsessID, RAND, K_NRprose, CP_PRUKID, ~Nonce2,
               KDF(K_NRprose, <Nonce1, ~Nonce2>),
               KDF(KDF(K_NRprose, <Nonce1, ~Nonce2>),
                   <'0x00', 'confidential_algorithm'>),
               KDF(KDF(K_NRprose, <Nonce1, ~Nonce2>),
                   <'0x01', 'integrity_algorithm'>),
               <~LSB_KsessID, ~MSB_KsessID>
   ),
   Out( <'DSMCommand', ~Nonce2, ~CP_Se_Po, ~LSB_KsessID, 
         KDF(KDF(KDF(K_NRprose, <Nonce1, ~Nonce2>),
                 <'0x01', 'integrity_algorithm'>),
             <~CP_Se_Po, ~Nonce2, ~LSB_KsessID>)
        >
   )
   ]

rule (modulo E) HN_receive_authSync_step10b:
   [
   St_1_HN( ~idHN, ~supi, ~supi_relay, idSN, ~k, SqnNext, XRES, ~RAND,
            ~sqn_root, ~sk_HN, ~cid, RSC, Nonce1
   ),
   Sqn_HN( ~supi, ~idHN, SqnHN, ~sqn_root, count ),
   RcvS( ~cid, idSN, ~idHN,
         <'resync', ~RAND, (f5_star(~k, ~RAND)⊕(SqnHN+dif)), 
          f1_star(~k, <(SqnHN+dif), ~RAND>)>
   ),
   In( (count+dif) )
   ]
  --[
  Sqn_HN_Invariance( ~idHN, ~supi, (SqnHN+dif), ~sqn_root,
                     (count+dif)
  ),
  HN_Resync_End( (count+dif) )
  ]->
   [ Sqn_HN( ~supi, ~idHN, (SqnHN+dif), ~sqn_root, (count+dif) ) ]

rule (modulo E) ue_receive_DSMCommand_step13:
   [
   St_2_UE( ~supi, ~supi_relay, ~User_info_remote, ~User_info_relay,
            ~idHN, ~k, ~sqn_root, ~RSC, ~Nonce1, ~DUCK, ~DUIK, ~SeCap,
            ~CP_Se_Po, ~UP_Se_Po, ~MSB_KsessID, idSN, CP_PRUK, CP_PRUKID
   ),
   In( <'DSMCommand', ~Nonce2, ~CP_Se_Po, ~LSB_KsessID, 
        KDF(KDF(KDF(KDF(CP_PRUK, <~Nonce1, ~Nonce2>), <~Nonce1, ~Nonce2>),
                <'0x01', 'integrity_algorithm'>),
            <~CP_Se_Po, ~Nonce2, ~LSB_KsessID>)
       >
   )
   ]
  --[
  Running( ~supi, ~supi_relay,
           <'relay', 'remote', 'CP_PRUKID', CP_PRUKID>
  ),
  Running( ~supi, ~supi_relay, <'relay', 'remote', 'RSC', ~RSC> ),
  Running( ~supi, ~supi_relay,
           <'relay', 'remote', 'K_sessID', ~LSB_KsessID, ~MSB_KsessID>
  ),
  Running( ~supi, ~supi_relay,
           <'relay', 'remote', 'K_relay_sess', 
            KDF(KDF(CP_PRUK, <~Nonce1, ~Nonce2>), <~Nonce1, ~Nonce2>)>
  ),
  Running( ~supi, ~supi_relay,
           <'relay', 'remote', 'K_relay_enc', 
            KDF(KDF(KDF(CP_PRUK, <~Nonce1, ~Nonce2>), <~Nonce1, ~Nonce2>),
                <'0x00', 'confidential_algorithm'>)
           >
  ),
  Running( ~supi, ~supi_relay,
           <'relay', 'remote', 'K_relay_int', 
            KDF(KDF(KDF(CP_PRUK, <~Nonce1, ~Nonce2>), <~Nonce1, ~Nonce2>),
                <'0x01', 'integrity_algorithm'>)
           >
  ),
  Running( ~supi, ~supi_relay, <'relay', 'remote', 'SeCap', ~SeCap>
  ),
  Running( ~supi, ~supi_relay,
           <'relay', 'remote', 'CPsecurity_policy', ~CP_Se_Po>
  ),
  Running( ~supi, ~supi_relay,
           <'relay', 'remote', 'UPsecurity_policy', ~UP_Se_Po>
  ),
  Running( ~supi, ~supi_relay,
           <'relay', 'remote', 'K_NRprose', KDF(CP_PRUK, <~Nonce1, ~Nonce2>)>
  )
  ]->
   [
   St_3_UE( ~supi, ~supi_relay, ~User_info_remote, ~User_info_relay,
            ~idHN, ~k, ~sqn_root, ~RSC, ~Nonce1, ~DUCK, ~DUIK, ~SeCap,
            ~CP_Se_Po, ~UP_Se_Po, ~MSB_KsessID, idSN, CP_PRUK, CP_PRUKID,
            KDF(CP_PRUK, <~Nonce1, ~Nonce2>),
            KDF(KDF(CP_PRUK, <~Nonce1, ~Nonce2>), <~Nonce1, ~Nonce2>),
            KDF(KDF(KDF(CP_PRUK, <~Nonce1, ~Nonce2>), <~Nonce1, ~Nonce2>),
                <'0x00', 'confidential_algorithm'>),
            KDF(KDF(KDF(CP_PRUK, <~Nonce1, ~Nonce2>), <~Nonce1, ~Nonce2>),
                <'0x01', 'integrity_algorithm'>),
            <~LSB_KsessID, ~MSB_KsessID>
   ),
   Out( <'DSMComplete', <~LSB_KsessID, ~MSB_KsessID>, 
         senc(<~UP_Se_Po, 
               Int(KDF(KDF(KDF(CP_PRUK, <~Nonce1, ~Nonce2>), <~Nonce1, ~Nonce2>),
                       <'0x01', 'integrity_algorithm'>),
                   <~UP_Se_Po, ~LSB_KsessID, ~MSB_KsessID>)
              >,
              KDF(KDF(KDF(CP_PRUK, <~Nonce1, ~Nonce2>), <~Nonce1, ~Nonce2>),
                  <'0x00', 'confidential_algorithm'>))
        >
   )
   ]

rule (modulo E) relay_receive_DSMComplete_step14:
   [
   St_4_relay( ~transactionid, ~User_info_remote, ~supi,
               ~User_info_relay, ~idSN, idHN, ~supi_relay, ~RSC, Nonce1, ~SeCap,
               ~CP_Se_Po, ~MSB_KsessID, RAND, K_NRprose, CP_PRUKID, ~Nonce2,
               K_relay_sess, K_relay_enc, K_relay_int, KsessID
   ),
   In( <'DSMComplete', KsessID, 
        senc(<~UP_Se_Po, Int(K_relay_int, <~UP_Se_Po, KsessID>)>,
             K_relay_enc)
       >
   )
   ]
  --[
  Commit( ~supi_relay, ~supi,
          <'relay', 'remote', 'CP_PRUKID', CP_PRUKID>
  ),
  Commit( ~supi_relay, ~supi, <'relay', 'remote', 'RSC', ~RSC> ),
  Commit( ~supi_relay, ~supi,
          <'relay', 'remote', 'K_sessID', KsessID>
  ),
  Commit( ~supi_relay, ~supi,
          <'relay', 'remote', 'K_relay_sess', K_relay_sess>
  ),
  Commit( ~supi_relay, ~supi,
          <'relay', 'remote', 'K_relay_enc', K_relay_enc>
  ),
  Commit( ~supi_relay, ~supi,
          <'relay', 'remote', 'K_relay_int', K_relay_int>
  ),
  Commit( ~supi_relay, ~supi, <'relay', 'remote', 'SeCap', ~SeCap> ),
  Commit( ~supi_relay, ~supi,
          <'relay', 'remote', 'CPsecurity_policy', ~CP_Se_Po>
  ),
  Commit( ~supi_relay, ~supi,
          <'relay', 'remote', 'UPsecurity_policy', ~UP_Se_Po>
  ),
  Commit( ~supi_relay, ~supi,
          <'relay', 'remote', 'K_NRprose', K_NRprose>
  ),
  Commit( ~supi_relay, ~idSN,
          <'relay', 'SN', 'supi_relay', ~supi_relay>
  ),
  Commit( ~supi_relay, ~idSN, <'relay', 'SN', 'RSC', ~RSC> ),
  Commit( ~supi_relay, ~idSN, <'relay', 'SN', 'PLMNID', ~idSN> ),
  Commit( ~supi_relay, idHN, <'relay', 'HN', 'RSC', ~RSC> ),
  Commit( ~supi_relay, idHN, <'relay', 'HN', 'CP_PRUKID', CP_PRUKID>
  ),
  Commit( ~supi_relay, idHN, <'relay', 'HN', 'K_NRprose', K_NRprose>
  ),
  Secret( <'relay', ~supi_relay>, 'K_relay_sess', K_relay_sess ),
  Secret( <'relay', ~supi_relay>, 'K_relay_enc', K_relay_enc ),
  Secret( <'relay', ~supi_relay>, 'K_relay_int', K_relay_int ),
  Secret( <'relay', ~supi_relay>, 'K_NRprose', K_NRprose ),
  Secret( <'relay', ~supi_relay>, 'CPPRUKID', CP_PRUKID ),
  Secret( <'relay', ~supi_relay>, 'RSC', ~RSC ),
  Running( ~supi_relay, ~supi,
           <'remote', 'relay', 'UPsecurity_policy', ~UP_Se_Po>
  ),
  Honest( ~supi ), Honest( ~supi_relay ), Honest( idHN ),
  Honest( ~idSN )
  ]->
   [
   Out( <'DCA', KsessID, 
         senc(<~User_info_relay, 
               Int(K_relay_int, <~User_info_relay, KsessID>)>,
              K_relay_enc)
        >
   )
   ]

rule (modulo E) ue_receive_DCA_step15:
   [
   St_3_UE( ~supi, ~supi_relay, ~User_info_remote, ~User_info_relay,
            ~idHN, ~k, ~sqn_root, ~RSC, ~Nonce1, ~DUCK, ~DUIK, ~SeCap,
            ~CP_Se_Po, ~UP_Se_Po, ~MSB_KsessID, idSN, CP_PRUK, CP_PRUKID,
            K_NRprose, K_relay_sess, K_relay_enc, K_relay_int, KsessID
   ),
   !Relay( ~User_info_relay, ~supi_relay, idSN ),
   In( <'DCA', KsessID, 
        senc(<~User_info_relay, 
              Int(K_relay_int, <~User_info_relay, KsessID>)>,
             K_relay_enc)
       >
   )
   ]
  --[
  UE_End( ),
  Secret( <'remote', ~supi>, 'K_relay_sess', K_relay_sess ),
  Secret( <'remote', ~supi>, 'K_relay_enc', K_relay_enc ),
  Secret( <'remote', ~supi>, 'K_relay_int', K_relay_int ),
  Secret( <'remote', ~supi>, 'K_NRprose', K_NRprose ),
  Secret( <'remote', ~supi>, 'CPPRUKID', CP_PRUKID ),
  Secret( <'remote', ~supi>, 'CPPRUK', CP_PRUK ),
  Secret( <'remote', ~supi>, 'supi', ~supi ),
  Secret( <'remote', ~supi>, 'RSC', ~RSC ),
  Commit( ~supi, ~supi_relay,
          <'remote', 'relay', 'K_sessID', KsessID>
  ),
  Commit( ~supi, ~supi_relay,
          <'remote', 'relay', 'K_relay_sess', K_relay_sess>
  ),
  Commit( ~supi, ~supi_relay,
          <'remote', 'relay', 'K_relay_enc', K_relay_enc>
  ),
  Commit( ~supi, ~supi_relay,
          <'remote', 'relay', 'K_relay_int', K_relay_int>
  ),
  Commit( ~supi, ~supi_relay,
          <'remote', 'relay', 'CP_PRUKID', CP_PRUKID>
  ),
  Commit( ~supi, ~supi_relay, <'remote', 'relay', 'RSC', ~RSC> ),
  Commit( ~supi, ~supi_relay,
          <'remote', 'relay', 'CPsecurity_policy', ~CP_Se_Po>
  ),
  Commit( ~supi, ~supi_relay,
          <'remote', 'relay', 'UPsecurity_policy', ~UP_Se_Po>
  ),
  Commit( ~supi, ~supi_relay,
          <'remote', 'relay', 'K_NRprose', K_NRprose>
  ),
  Commit( ~supi, ~supi_relay, <'remote', 'relay', 'SeCap', ~SeCap> ),
  Commit( ~supi, ~idHN, <'remote', 'HN', 'RSC', ~RSC> ),
  Commit( ~supi, ~idHN, <'remote', 'HN', 'supi', ~supi> ),
  Commit( ~supi, ~idHN, <'remote', 'HN', 'CP_PRUK', CP_PRUK> ),
  Commit( ~supi, ~idHN, <'remote', 'HN', 'CP_PRUKID', CP_PRUKID> ),
  Commit( ~supi, ~idHN, <'remote', 'HN', 'PLMNID', idSN> ),
  Honest( ~supi ), Honest( ~supi_relay ), Honest( ~idHN ),
  Honest( idSN ), Remote_EndConf( )
  ]->
   [ ]

restriction subscribe_once [right]:
  "∀ HN1 HN2 supi #i #j.
    ((Subscribe( supi, HN1 ) @ #i) ∧ (Subscribe( supi, HN2 ) @ #j)) ⇒
    ((#i = #j) ∧ (HN1 = HN2))"
  // safety formula

restriction subscribe_once [left]:
  "∀ HN1 HN2 supi #i #j.
    ((Subscribe( supi, HN1 ) @ #i) ∧ (Subscribe( supi, HN2 ) @ #j)) ⇒
    ((#i = #j) ∧ (HN1 = HN2))"
  // safety formula

restriction greater_or_equal_than [right]:
  "∀ x y #i.
    (Greater_Or_Equal_Than( x, y ) @ #i) ⇒ (¬(∃ z. (x+z) = y))"
  // safety formula

restriction greater_or_equal_than [left]:
  "∀ x y #i.
    (Greater_Or_Equal_Than( x, y ) @ #i) ⇒ (¬(∃ z. (x+z) = y))"
  // safety formula

restriction once [right]:
  "∀ #i #j. ((Once( ) @ #i) ∧ (Once( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction once [left]:
  "∀ #i #j. ((Once( ) @ #i) ∧ (Once( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction phases [right]:
  "∀ UE1 UE2 #i #j.
    ((Start_UE_Session( UE1 ) @ #i) ∧ (Start_UE_Session( UE2 ) @ #j)) ⇒
    (((#i = #j) ∨ (∃ #k. ((UE_End( ) @ #k) ∧ (#i < #k)) ∧ (#k < #j))) ∨
     (∃ #k. ((UE_End( ) @ #k) ∧ (#j < #k)) ∧ (#k < #i)))"

restriction phases [left]:
  "∀ UE1 UE2 #i #j.
    ((Start_UE_Session( UE1 ) @ #i) ∧ (Start_UE_Session( UE2 ) @ #j)) ⇒
    (((#i = #j) ∨ (∃ #k. ((UE_End( ) @ #k) ∧ (#i < #k)) ∧ (#k < #j))) ∨
     (∃ #k. ((UE_End( ) @ #k) ∧ (#j < #k)) ∧ (#k < #i)))"

lemma dummy [right]:
  all-traces "¬(⊥)"
/*
guarded formula characterizing all counter-examples:
"⊥"
*/
by sorry

lemma dummy [left]:
  all-traces "¬(⊥)"
/*
guarded formula characterizing all counter-examples:
"⊥"
*/
by sorry

lemma src_1 [right, sources]:
  all-traces
  "∀ transactionid suci RSC Nonce1 #i.
    (In_AMF( transactionid, suci, RSC, Nonce1 ) @ #i) ⇒
    (∃ #j.
      (Out_relay( transactionid, suci, RSC, Nonce1 ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ transactionid suci RSC Nonce1 #i.
  (In_AMF( transactionid, suci, RSC, Nonce1 ) @ #i)
 ∧
  ∀ #j.
   (Out_relay( transactionid, suci, RSC, Nonce1 ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

lemma src_1 [left, sources]:
  all-traces
  "∀ transactionid suci RSC Nonce1 #i.
    (In_AMF( transactionid, suci, RSC, Nonce1 ) @ #i) ⇒
    (∃ #j.
      (Out_relay( transactionid, suci, RSC, Nonce1 ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ transactionid suci RSC Nonce1 #i.
  (In_AMF( transactionid, suci, RSC, Nonce1 ) @ #i)
 ∧
  ∀ #j.
   (Out_relay( transactionid, suci, RSC, Nonce1 ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

lemma src_2 [right, sources]:
  all-traces
  "∀ RAND AUTN SNID AT_MAC #i.
    (In_AMF2( <RAND, AUTN, SNID, AT_MAC> ) @ #i) ⇒
    (∃ #j. (Out_HN( <RAND, AUTN, SNID, AT_MAC> ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ RAND AUTN SNID AT_MAC #i.
  (In_AMF2( <RAND, AUTN, SNID, AT_MAC> ) @ #i)
 ∧
  ∀ #j. (Out_HN( <RAND, AUTN, SNID, AT_MAC> ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

lemma src_2 [left, sources]:
  all-traces
  "∀ RAND AUTN SNID AT_MAC #i.
    (In_AMF2( <RAND, AUTN, SNID, AT_MAC> ) @ #i) ⇒
    (∃ #j. (Out_HN( <RAND, AUTN, SNID, AT_MAC> ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ RAND AUTN SNID AT_MAC #i.
  (In_AMF2( <RAND, AUTN, SNID, AT_MAC> ) @ #i)
 ∧
  ∀ #j. (Out_HN( <RAND, AUTN, SNID, AT_MAC> ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

lemma src_3 [right, sources]:
  all-traces
  "∀ transactionid RAND AUTN SNID AT_MAC #i.
    (In_relay2( transactionid, RAND, AUTN, SNID, AT_MAC ) @ #i) ⇒
    (∃ #j.
      (Out_AMF2( transactionid, RAND, AUTN, SNID, AT_MAC ) @ #j) ∧
      (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ transactionid RAND AUTN SNID AT_MAC #i.
  (In_relay2( transactionid, RAND, AUTN, SNID, AT_MAC ) @ #i)
 ∧
  ∀ #j.
   (Out_AMF2( transactionid, RAND, AUTN, SNID, AT_MAC ) @ #j)
  ⇒
   ¬(#j < #i)"
*/
by sorry

lemma src_3 [left, sources]:
  all-traces
  "∀ transactionid RAND AUTN SNID AT_MAC #i.
    (In_relay2( transactionid, RAND, AUTN, SNID, AT_MAC ) @ #i) ⇒
    (∃ #j.
      (Out_AMF2( transactionid, RAND, AUTN, SNID, AT_MAC ) @ #j) ∧
      (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ transactionid RAND AUTN SNID AT_MAC #i.
  (In_relay2( transactionid, RAND, AUTN, SNID, AT_MAC ) @ #i)
 ∧
  ∀ #j.
   (Out_AMF2( transactionid, RAND, AUTN, SNID, AT_MAC ) @ #j)
  ⇒
   ¬(#j < #i)"
*/
by sorry

lemma sqn_ue_invariance [right, use_induction, sources]:
  all-traces
  "∀ supi HN Sqn sqn_root count #i.
    (Sqn_UE_Invariance( supi, HN, Sqn, sqn_root, count ) @ #i) ⇒
    ((count+sqn_root) = Sqn)"
/*
guarded formula characterizing all counter-examples:
"∃ supi HN Sqn sqn_root count #i.
  (Sqn_UE_Invariance( supi, HN, Sqn, sqn_root, count ) @ #i)
 ∧
  ¬((count+sqn_root) = Sqn)"
*/
by sorry

lemma sqn_ue_invariance [left, use_induction, sources]:
  all-traces
  "∀ supi HN Sqn sqn_root count #i.
    (Sqn_UE_Invariance( supi, HN, Sqn, sqn_root, count ) @ #i) ⇒
    ((count+sqn_root) = Sqn)"
/*
guarded formula characterizing all counter-examples:
"∃ supi HN Sqn sqn_root count #i.
  (Sqn_UE_Invariance( supi, HN, Sqn, sqn_root, count ) @ #i)
 ∧
  ¬((count+sqn_root) = Sqn)"
*/
by sorry

lemma sqn_HN_invariance [right, use_induction, sources]:
  all-traces
  "∀ HN supi Sqn sqn_root count #i.
    (Sqn_HN_Invariance( HN, supi, Sqn, sqn_root, count ) @ #i) ⇒
    ((count+sqn_root) = Sqn)"
/*
guarded formula characterizing all counter-examples:
"∃ HN supi Sqn sqn_root count #i.
  (Sqn_HN_Invariance( HN, supi, Sqn, sqn_root, count ) @ #i)
 ∧
  ¬((count+sqn_root) = Sqn)"
*/
by sorry

lemma sqn_HN_invariance [left, use_induction, sources]:
  all-traces
  "∀ HN supi Sqn sqn_root count #i.
    (Sqn_HN_Invariance( HN, supi, Sqn, sqn_root, count ) @ #i) ⇒
    ((count+sqn_root) = Sqn)"
/*
guarded formula characterizing all counter-examples:
"∃ HN supi Sqn sqn_root count #i.
  (Sqn_HN_Invariance( HN, supi, Sqn, sqn_root, count ) @ #i)
 ∧
  ¬((count+sqn_root) = Sqn)"
*/
by sorry

lemma executability_honest [right]:
  exists-trace
  "∃ #i.
    (((((((((Remote_EndConf( ) @ #i) ∧
            (¬(∃ X data #r. Rev( X, data ) @ #r))) ∧
           (∀ HN1 HN2 #j #k.
             ((HomeNet( HN1 ) @ #j) ∧ (HomeNet( HN2 ) @ #k)) ⇒ (#j = #k))) ∧
          (∀ S1 S2 HN1 HN2 #j #k.
            ((Subscribe( S1, HN1 ) @ #j) ∧ (Subscribe( S2, HN2 ) @ #k)) ⇒
            (#j = #k))) ∧
         (∀ SN1 SN2 #j #k.
           ((ServNet( SN1 ) @ #j) ∧ (ServNet( SN2 ) @ #k)) ⇒ (#j = #k))) ∧
        (∀ relay1 relay2 #j #k.
          ((CreateRelay( relay1 ) @ #j) ∧ (CreateRelay( relay2 ) @ #k)) ⇒
          (#j = #k))) ∧
       (∀ SNID1 SNID2 #j #k.
         ((Start_AMF_Session( SNID1 ) @ #j) ∧
          (Start_AMF_Session( SNID2 ) @ #k)) ⇒
         (#j = #k))) ∧
      (∀ supi_relay1 supi_relay2 #j #k.
        ((Start_relay_Session( supi_relay1 ) @ #j) ∧
         (Start_relay_Session( supi_relay2 ) @ #k)) ⇒
        (#j = #k))) ∧
     (∀ UE1 UE2 #j #k.
       ((Start_UE_Session( UE1 ) @ #j) ∧ (Start_UE_Session( UE2 ) @ #k)) ⇒
       (#j = #k))) ∧
    (∀ HN1 HN2 #j #k.
      ((Start_HN_Session( HN1 ) @ #j) ∧ (Start_HN_Session( HN2 ) @ #k)) ⇒
      (#j = #k))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i.
  (Remote_EndConf( ) @ #i)
 ∧
  (∀ X data #r. (Rev( X, data ) @ #r) ⇒ ⊥) ∧
  (∀ HN1 HN2 #j #k.
    (HomeNet( HN1 ) @ #j) ∧ (HomeNet( HN2 ) @ #k) ⇒ #j = #k) ∧
  (∀ S1 S2 HN1 HN2 #j #k.
    (Subscribe( S1, HN1 ) @ #j) ∧ (Subscribe( S2, HN2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ SN1 SN2 #j #k.
    (ServNet( SN1 ) @ #j) ∧ (ServNet( SN2 ) @ #k) ⇒ #j = #k) ∧
  (∀ relay1 relay2 #j #k.
    (CreateRelay( relay1 ) @ #j) ∧ (CreateRelay( relay2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ SNID1 SNID2 #j #k.
    (Start_AMF_Session( SNID1 ) @ #j) ∧
    (Start_AMF_Session( SNID2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ supi_relay1 supi_relay2 #j #k.
    (Start_relay_Session( supi_relay1 ) @ #j) ∧
    (Start_relay_Session( supi_relay2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ UE1 UE2 #j #k.
    (Start_UE_Session( UE1 ) @ #j) ∧ (Start_UE_Session( UE2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ HN1 HN2 #j #k.
    (Start_HN_Session( HN1 ) @ #j) ∧ (Start_HN_Session( HN2 ) @ #k)
   ⇒
    #j = #k)"
*/
by sorry

lemma executability_honest [left]:
  exists-trace
  "∃ #i.
    (((((((((Remote_EndConf( ) @ #i) ∧
            (¬(∃ X data #r. Rev( X, data ) @ #r))) ∧
           (∀ HN1 HN2 #j #k.
             ((HomeNet( HN1 ) @ #j) ∧ (HomeNet( HN2 ) @ #k)) ⇒ (#j = #k))) ∧
          (∀ S1 S2 HN1 HN2 #j #k.
            ((Subscribe( S1, HN1 ) @ #j) ∧ (Subscribe( S2, HN2 ) @ #k)) ⇒
            (#j = #k))) ∧
         (∀ SN1 SN2 #j #k.
           ((ServNet( SN1 ) @ #j) ∧ (ServNet( SN2 ) @ #k)) ⇒ (#j = #k))) ∧
        (∀ relay1 relay2 #j #k.
          ((CreateRelay( relay1 ) @ #j) ∧ (CreateRelay( relay2 ) @ #k)) ⇒
          (#j = #k))) ∧
       (∀ SNID1 SNID2 #j #k.
         ((Start_AMF_Session( SNID1 ) @ #j) ∧
          (Start_AMF_Session( SNID2 ) @ #k)) ⇒
         (#j = #k))) ∧
      (∀ supi_relay1 supi_relay2 #j #k.
        ((Start_relay_Session( supi_relay1 ) @ #j) ∧
         (Start_relay_Session( supi_relay2 ) @ #k)) ⇒
        (#j = #k))) ∧
     (∀ UE1 UE2 #j #k.
       ((Start_UE_Session( UE1 ) @ #j) ∧ (Start_UE_Session( UE2 ) @ #k)) ⇒
       (#j = #k))) ∧
    (∀ HN1 HN2 #j #k.
      ((Start_HN_Session( HN1 ) @ #j) ∧ (Start_HN_Session( HN2 ) @ #k)) ⇒
      (#j = #k))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i.
  (Remote_EndConf( ) @ #i)
 ∧
  (∀ X data #r. (Rev( X, data ) @ #r) ⇒ ⊥) ∧
  (∀ HN1 HN2 #j #k.
    (HomeNet( HN1 ) @ #j) ∧ (HomeNet( HN2 ) @ #k) ⇒ #j = #k) ∧
  (∀ S1 S2 HN1 HN2 #j #k.
    (Subscribe( S1, HN1 ) @ #j) ∧ (Subscribe( S2, HN2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ SN1 SN2 #j #k.
    (ServNet( SN1 ) @ #j) ∧ (ServNet( SN2 ) @ #k) ⇒ #j = #k) ∧
  (∀ relay1 relay2 #j #k.
    (CreateRelay( relay1 ) @ #j) ∧ (CreateRelay( relay2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ SNID1 SNID2 #j #k.
    (Start_AMF_Session( SNID1 ) @ #j) ∧
    (Start_AMF_Session( SNID2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ supi_relay1 supi_relay2 #j #k.
    (Start_relay_Session( supi_relay1 ) @ #j) ∧
    (Start_relay_Session( supi_relay2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ UE1 UE2 #j #k.
    (Start_UE_Session( UE1 ) @ #j) ∧ (Start_UE_Session( UE2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ HN1 HN2 #j #k.
    (Start_HN_Session( HN1 ) @ #j) ∧ (Start_HN_Session( HN2 ) @ #k)
   ⇒
    #j = #k)"
*/
by sorry

/* All well-formedness checks were successful. */

diffLemma Observational_equivalence:
rule-equivalence
  case Rule_AMF_receive_Nausf_UE_PAResponse2_step11
  by sorry
next
  case Rule_AMF_receive_Nausf_UE_PAResponse_step5
  by sorry
next
  case Rule_AMF_receive_relayauthResponse_step9a
  by sorry
next
  case Rule_AMF_receive_relaykeyrequest_step3
  by sorry
next
  case Rule_AMF_receive_syncFailure_send_authSync_step9b
  by sorry
next
  case Rule_Destrd_0_adec
  by sorry
next
  case Rule_Destrd_0_fst
  by sorry
next
  case Rule_Destrd_0_sdec
  by sorry
next
  case Rule_Destrd_0_snd
  by sorry
next
  case Rule_Destrd_union
  by sorry
next
  case Rule_Destrd_xor
  by sorry
next
  case Rule_Equality
  by sorry
next
  case Rule_HN_receive_Nausf_UE_PAR2_step10a
  by sorry
next
  case Rule_HN_receive_Nausf_UE_PAR_step4
  by sorry
next
  case Rule_HN_receive_authSync_step10b
  by sorry
next
  case Rule_Send
  by sorry
next
  case Rule_add_RSC
  by sorry
next
  case Rule_add_subscription
  by sorry
next
  case Rule_init_Relay
  by sorry
next
  case Rule_init_homeNet
  by sorry
next
  case Rule_init_servNet
  by sorry
next
  case Rule_receive_secure
  by sorry
next
  case Rule_relay_receive_DSMComplete_step14
  by sorry
next
  case Rule_relay_receive_EAPResp_step8a
  by sorry
next
  case Rule_relay_receive_relay_auth_request_step6
  by sorry
next
  case Rule_relay_receive_relaykeyresponse_step12
  by sorry
next
  case Rule_relay_receive_syncFailure_authResp_step8b
  by sorry
next
  case Rule_relay_send_relaykeyrequest_step2
  by sorry
next
  case Rule_reveal_Ltk_DUCK
  by sorry
next
  case Rule_reveal_Ltk_DUIK
  by sorry
next
  case Rule_reveal_Ltk_RSC
  by sorry
next
  case Rule_reveal_Ltk_supi_relay
  by sorry
next
  case Rule_send_secure
  by sorry
next
  case Rule_supi_supply
  by sorry
next
  case Rule_ue_receive_DCA_step15
  by sorry
next
  case Rule_ue_receive_DSMCommand_step13
  by sorry
next
  case Rule_ue_receive_EAPReq_fail_freshness_send_sync_failure_step7b
  backward-search
    case LHS
    step( simplify )
    step( solve( St_1_UE( ~supi, ~supi_relay, ~User_info_remote,
                          ~User_info_relay, ~idHN, ~k, ~sqn_root, ~RSC, ~Nonce1, ~DUCK,
                          ~DUIK, ~SeCap, ~CP_Se_Po, ~UP_Se_Po, ~MSB_KsessID
                 ) ▶₀ #i ) )
      case ue_send_DCR_step1_case_1
      by sorry // removed
    next
      case ue_send_DCR_step1_case_2
      step( solve( Sqn_UE( ~supi, ~idHN, SqnUE, ~sqn_root, count
                   ) ▶₁ #i ) )
        case add_subscription
        by sorry
      next
        case ue_receive_EAPReq_fail_freshness_send_sync_failure_step7b_case_1
        by sorry
      next
        case ue_receive_EAPReq_fail_freshness_send_sync_failure_step7b_case_2
        by step( contradiction /* cyclic */ )
      next
        case ue_receive_EAPReq_freshness_success_send_EAPResp_step7a
        step( solve( Sqn_UE( ~supi, ~idHN, (~sqn_root+count), ~sqn_root,
                             count
                     ) ▶₁ #vr.7 ) )
          case add_subscription
          step( solve( !KU( KDF(KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                                        <<'5G', idSN>, z>),
                                    <'EAPAKA', ~supi, 'K_aut'>),
                                <RAND, <z, f1(~k, <SqnHN, RAND>)>, '5G', idSN>)
                       ) @ #vk.16 ) )
            case c_KDF
            by sorry
          next
            case relay_receive_relay_auth_request_step6
            step( solve( !KU( KDF(KDF(KDF(<f3(~k, RAND.1), f4(~k, RAND.1)>,
                                          <<'5G', idSN.2>, (f5(~k, RAND.1)⊕('1'+~sqn_root+dif))>),
                                      <'EAPAKA', ~supi, 'K_aut'>),
                                  <RAND.1, 
                                   <(f5(~k, RAND.1)⊕('1'+~sqn_root+dif)), 
                                    f1(~k, <('1'+~sqn_root+dif), RAND.1>)>, 
                                   '5G', idSN.2>)
                         ) @ #vk.30 ) )
              case c_KDF
              by sorry
            next
              case relay_receive_relay_auth_request_step6_case_1
              by sorry
            next
              case relay_receive_relay_auth_request_step6_case_2
              step( solve( RcvS( ~transactionid, ~idSN.5, ~supi_relay.4,
                                 <'relay_auth_request', ~transactionid, ~RAND, 
                                  <(f5(~k, ~RAND)⊕('1'+~sqn_root+count)), 
                                   f1(~k, <('1'+~sqn_root+count), ~RAND>)>, 
                                  <'5G', ~idSN>, 
                                  KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                              <<'5G', ~idSN>, (f5(~k, ~RAND)⊕('1'+~sqn_root+count))
                                              >),
                                          <'EAPAKA', ~supi, 'K_aut'>),
                                      <~RAND, 
                                       <(f5(~k, ~RAND)⊕('1'+~sqn_root+count)), 
                                        f1(~k, <('1'+~sqn_root+count), ~RAND>)>, 
                                       '5G', ~idSN>)
                                 >
                           ) ▶₁ #vr.12 ) )
                case receive_secure_case_1
                by sorry
              next
                case receive_secure_case_2
                step( solve( RcvS( ~cid, ~idHN.1, ~idSN.1,
                                   <'ProseAuthenticateResponse', ~RAND, 
                                    <(f5(~k, ~RAND)⊕('1'+~sqn_root+count)), 
                                     f1(~k, <('1'+~sqn_root+count), ~RAND>)>, 
                                    <'5G', ~idSN>, 
                                    KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                                <<'5G', ~idSN>, 
                                                 (f5(~k, ~RAND)⊕('1'+~sqn_root+count))>),
                                            <'EAPAKA', ~supi, 'K_aut'>),
                                        <~RAND, 
                                         <(f5(~k, ~RAND)⊕('1'+~sqn_root+count)), 
                                          f1(~k, <('1'+~sqn_root+count), ~RAND>)>, 
                                         '5G', ~idSN>)
                                   >
                             ) ▶₁ #j ) )
                  case receive_secure_case_1
                  by sorry
                next
                  case receive_secure_case_2
                  step( solve( RcvS( ~transactionid.1, ~idSN.6, ~supi_relay.7,
                                     <'relay_auth_request', ~transactionid.1, ~RAND.1, 
                                      <(f5(~k, ~RAND.1)⊕('1'+~sqn_root+dif)), 
                                       f1(~k, <('1'+~sqn_root+dif), ~RAND.1>)>, 
                                      <'5G', ~idSN.2>, 
                                      KDF(KDF(KDF(<f3(~k, ~RAND.1), f4(~k, ~RAND.1)>,
                                                  <<'5G', ~idSN.2>, 
                                                   (f5(~k, ~RAND.1)⊕('1'+~sqn_root+dif))>),
                                              <'EAPAKA', ~supi, 'K_aut'>),
                                          <~RAND.1, 
                                           <(f5(~k, ~RAND.1)⊕('1'+~sqn_root+dif)), 
                                            f1(~k, <('1'+~sqn_root+dif), ~RAND.1>)>, 
                                           '5G', ~idSN.2>)
                                     >
                               ) ▶₁ #vr.24 ) )
                    case receive_secure_case_1
                    by sorry
                  next
                    case receive_secure_case_2
                    step( solve( RcvS( ~cid.1, ~idHN.1, ~idSN.3,
                                       <'ProseAuthenticateResponse', ~RAND.1, 
                                        <(f5(~k, ~RAND.1)⊕('1'+~sqn_root+dif)), 
                                         f1(~k, <('1'+~sqn_root+dif), ~RAND.1>)>, 
                                        <'5G', ~idSN.2>, 
                                        KDF(KDF(KDF(<f3(~k, ~RAND.1), f4(~k, ~RAND.1)>,
                                                    <<'5G', ~idSN.2>, 
                                                     (f5(~k, ~RAND.1)⊕('1'+~sqn_root+dif))>),
                                                <'EAPAKA', ~supi, 'K_aut'>),
                                            <~RAND.1, 
                                             <(f5(~k, ~RAND.1)⊕('1'+~sqn_root+dif)), 
                                              f1(~k, <('1'+~sqn_root+dif), ~RAND.1>)>, 
                                             '5G', ~idSN.2>)
                                       >
                                 ) ▶₁ #j.2 ) )
                      case receive_secure_case_1
                      by sorry
                    next
                      case receive_secure_case_2
                      step( solve( RcvS( ~cid.2, ~idHN, ~idSN.4,
                                         <'ProseAuthenticateResponse', ~RAND, 
                                          <(f5(~k, ~RAND)⊕('1'+~sqn_root+count)), 
                                           f1(~k, <('1'+~sqn_root+count), ~RAND>)>, 
                                          <'5G', ~idSN>, 
                                          KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                                      <<'5G', ~idSN>, 
                                                       (f5(~k, ~RAND)⊕('1'+~sqn_root+count))>),
                                                  <'EAPAKA', ~supi, 'K_aut'>),
                                              <~RAND, 
                                               <(f5(~k, ~RAND)⊕('1'+~sqn_root+count)), 
                                                f1(~k, <('1'+~sqn_root+count), ~RAND>)>, 
                                               '5G', ~idSN>)
                                         >
                                   ) ▶₁ #vr.38 ) )
                        case receive_secure_case_1
                        by sorry
                      next
                        case receive_secure_case_2
                        step( solve( RcvS( ~cid.2, ~idHN, ~idSN.4,
                                           <'ProseAuthenticateResponse', ~RAND.1, 
                                            <(f5(~k, ~RAND.1)⊕('1'+~sqn_root+dif)), 
                                             f1(~k, <('1'+~sqn_root+dif), ~RAND.1>)>, 
                                            <'5G', ~idSN.2>, 
                                            KDF(KDF(KDF(<f3(~k, ~RAND.1), f4(~k, ~RAND.1)>,
                                                        <<'5G', ~idSN.2>, 
                                                         (f5(~k, ~RAND.1)⊕('1'+~sqn_root+dif))>),
                                                    <'EAPAKA', ~supi, 'K_aut'>),
                                                <~RAND.1, 
                                                 <(f5(~k, ~RAND.1)⊕('1'+~sqn_root+dif)), 
                                                  f1(~k, <('1'+~sqn_root+dif), ~RAND.1>)>, 
                                                 '5G', ~idSN.2>)
                                           >
                                     ) ▶₁ #vr.40 ) )
                          case receive_secure_case_1
                          by sorry
                        next
                          case receive_secure_case_2
                          step( solve( (#vr = #vr.8)  ∥
                                       (∃ #k. (UE_End( ) @ #k) ∧ (#vr < #k) ∧ (#k < #vr.8))  ∥
                                       (∃ #k. (UE_End( ) @ #k) ∧ (#vr.8 < #k) ∧ (#k < #vr)) ) )
                            case case_2
                            by sorry
                          next
                            case case_3
                            step( solve( (∃ #k.
                                           (UE_End( ) @ #k) ∧ (#vr.8 < #k) ∧ (#k < #vr))  ∥
                                         (∃ #k. (UE_End( ) @ #k) ∧ (#vr < #k) ∧ (#k < #vr.8)) ) )
                              case case_1
                              step( solve( St_3_UE( ~supi.2, ~supi_relay.3, ~User_info_remote.1,
                                                    ~User_info_relay.2, ~idHN.1, ~k.2, ~sqn_root.1,
                                                    ~RSC.3, ~Nonce1.3, ~DUCK.1, ~DUIK.1, ~SeCap.1,
                                                    ~CP_Se_Po.1, ~UP_Se_Po.1, ~MSB_KsessID.1,
                                                    idSN.2, CP_PRUK, CP_PRUKID, K_NRprose,
                                                    K_relay_sess, K_relay_enc, K_relay_int, KsessID
                                           ) ▶₀ #k.1 ) )
                                case ue_receive_DSMCommand_step13
                                step( solve( (∃ #k.
                                               (UE_End( ) @ #k) ∧ (#vr < #k) ∧ (#k < #vr.8))  ∥
                                             (∃ #k.
                                               (UE_End( ) @ #k) ∧ (#vr.8 < #k) ∧ (#k < #vr)) ) )
                                  case case_1
                                  by step( contradiction /* cyclic */ )
                                next
                                  case case_2
                                  step( solve( !KU( KDF(KDF(KDF(KDF(KDF(KDF(KDF(<f3(~k, ~RAND.1), 
                                                                                 f4(~k, ~RAND.1)>,
                                                                                <<'5G', ~idSN.2>, 
                                                                                 (f5(~k, ~RAND.1)⊕
                                                                                  ('1'+~sqn_root+dif
                                                                                  )
                                                                                 )
                                                                                >),
                                                                            <'EAPAKA', ~supi, 
                                                                             'K_ausf'>),
                                                                        <~supi, ~RSC.3>),
                                                                    <~Nonce1.3, ~Nonce2>),
                                                                <~Nonce1.3, ~Nonce2>),
                                                            <'0x01', 'integrity_algorithm'>),
                                                        <~CP_Se_Po.1, ~Nonce2, ~LSB_KsessID>)
                                               ) @ #vk.75 ) )
                                    case c_KDF
                                    by sorry
                                  next
                                    case relay_receive_relaykeyresponse_step12_case_1
                                    step( solve( RcvS( ~transactionid.2, ~idSN.4, ~supi_relay.6,
                                                       <'relay_auth_request', ~transactionid.2, 
                                                        ~RAND.2, 
                                                        <(f5(~k, ~RAND.2)⊕('1'+~sqn_root+count.1)), 
                                                         f1(~k, <('1'+~sqn_root+count.1), ~RAND.2>)
                                                        >, 
                                                        <'5G', ~idSN.5>, 
                                                        KDF(KDF(KDF(<f3(~k, ~RAND.2), 
                                                                     f4(~k, ~RAND.2)>,
                                                                    <<'5G', ~idSN.5>, 
                                                                     (f5(~k, ~RAND.2)⊕
                                                                      ('1'+~sqn_root+count.1))
                                                                    >),
                                                                <'EAPAKA', ~supi, 'K_aut'>),
                                                            <~RAND.2, 
                                                             <
                                                              (f5(~k, ~RAND.2)⊕
                                                               ('1'+~sqn_root+count.1)), 
                                                              f1(~k,
                                                                 <('1'+~sqn_root+count.1), ~RAND.2>)
                                                             >, 
                                                             '5G', ~idSN.5>)
                                                       >
                                                 ) ▶₁ #vr.48 ) )
                                      case receive_secure_case_1
                                      by sorry
                                    next
                                      case receive_secure_case_2
                                      step( solve( RcvS( ~cid.5, ~idHN.1, ~idSN.7,
                                                         <'ProseAuthenticateResponse2', CP_PRUKID, 
                                                          KDF(KDF(KDF(KDF(<f3(~k, ~RAND.1), 
                                                                           f4(~k, ~RAND.1)>,
                                                                          <<'5G', ~idSN.2>, 
                                                                           (f5(~k, ~RAND.1)⊕
                                                                            ('1'+~sqn_root+dif))
                                                                          >),
                                                                      <'EAPAKA', ~supi, 'K_ausf'>),
                                                                  <~supi, ~RSC.3>),
                                                              <~Nonce1.3, ~Nonce2>), 
                                                          ~Nonce2>
                                                   ) ▶₁ #vr.51 ) )
                                        case receive_secure_case_1
                                        by sorry
                                      next
                                        case receive_secure_case_2
                                        step( solve( RcvS( ~cid.2, ~idHN, ~idSN.3,
                                                           <'ProseAuthenticateResponse', ~RAND.1, 
                                                            <
                                                             (f5(~k, ~RAND.1)⊕('1'+~sqn_root+count)
                                                             ), 
                                                             f1(~k,
                                                                <('1'+~sqn_root+count), ~RAND.1>)
                                                            >, 
                                                            <'5G', ~idSN.2>, 
                                                            KDF(KDF(KDF(<f3(~k, ~RAND.1), 
                                                                         f4(~k, ~RAND.1)>,
                                                                        <<'5G', ~idSN.2>, 
                                                                         (f5(~k, ~RAND.1)⊕
                                                                          ('1'+~sqn_root+count))
                                                                        >),
                                                                    <'EAPAKA', ~supi, 'K_aut'>),
                                                                <~RAND.1, 
                                                                 <
                                                                  (f5(~k, ~RAND.1)⊕
                                                                   ('1'+~sqn_root+count)), 
                                                                  f1(~k,
                                                                     <('1'+~sqn_root+count), ~RAND.1
                                                                     >)
                                                                 >, 
                                                                 '5G', ~idSN.2>)
                                                           >
                                                     ) ▶₁ #j.4 ) )
                                          case receive_secure_case_1
                                          by sorry
                                        next
                                          case receive_secure_case_2
                                          step( solve( RcvS( ~cid, ~idSN, ~idHN,
                                                             <'ProseAuthenticateRequest', 
                                                              <aenc(<~supi, ~R.1>, pk(~sk_HN)), 
                                                               ~idHN>, 
                                                              ~RSC.2, Nonce1.2, '5G', ~idSN>
                                                       ) ▶₁ #j.1 ) )
                                            case receive_secure
                                            step( solve( !KU( senc(<~User_info_relay.2, 
                                                                    Int(KDF(KDF(KDF(KDF(KDF(KDF(<
                                                                                                 f3(~k,
                                                                                                    ~RAND.1), 
                                                                                                 f4(~k,
                                                                                                    ~RAND.1)
                                                                                                >,
                                                                                                <
                                                                                                 <
                                                                                                  '5G', 
                                                                                                  ~idSN.2
                                                                                                 >, 
                                                                                                 (
                                                                                                  f5(~k,
                                                                                                     ~RAND.1)⊕
                                                                                                  (
                                                                                                   '1'+
                                                                                                   ~sqn_root+
                                                                                                   count
                                                                                                  )
                                                                                                 )
                                                                                                >),
                                                                                            <
                                                                                             'EAPAKA', 
                                                                                             ~supi, 
                                                                                             'K_ausf'
                                                                                            >),
                                                                                        <~supi, 
                                                                                         ~RSC.2>),
                                                                                    <~Nonce1.2, 
                                                                                     ~Nonce2>),
                                                                                <~Nonce1.2, ~Nonce2
                                                                                >),
                                                                            <'0x01', 
                                                                             'integrity_algorithm'
                                                                            >),
                                                                        <~User_info_relay.2, 
                                                                         ~LSB_KsessID, 
                                                                         ~MSB_KsessID.1>)
                                                                   >,
                                                                   KDF(KDF(KDF(KDF(KDF(KDF(<
                                                                                            f3(~k,
                                                                                               ~RAND.1), 
                                                                                            f4(~k,
                                                                                               ~RAND.1)
                                                                                           >,
                                                                                           <
                                                                                            <'5G', 
                                                                                             ~idSN.2
                                                                                            >, 
                                                                                            (
                                                                                             f5(~k,
                                                                                                ~RAND.1)⊕
                                                                                             ('1'+
                                                                                              ~sqn_root+
                                                                                              count)
                                                                                            )
                                                                                           >),
                                                                                       <'EAPAKA', 
                                                                                        ~supi, 
                                                                                        'K_ausf'>),
                                                                                   <~supi, ~RSC.2>),
                                                                               <~Nonce1.2, ~Nonce2
                                                                               >),
                                                                           <~Nonce1.2, ~Nonce2>),
                                                                       <'0x00', 
                                                                        'confidential_algorithm'>))
                                                         ) @ #vk.72 ) )
                                              case c_senc
                                              by sorry
                                            next
                                              case relay_receive_DSMComplete_step14
                                              step( solve( RcvS( ~cid.2, ~idHN, ~idSN.3,
                                                                 <'ProseAuthenticateResponse', 
                                                                  ~RAND.1, 
                                                                  <
                                                                   (f5(~k, ~RAND.1)⊕
                                                                    ('1'+~sqn_root+count)), 
                                                                   f1(~k,
                                                                      <('1'+~sqn_root+count), 
                                                                       ~RAND.1>)
                                                                  >, 
                                                                  <'5G', ~idSN.2>, 
                                                                  KDF(KDF(KDF(<f3(~k, ~RAND.1), 
                                                                               f4(~k, ~RAND.1)>,
                                                                              <<'5G', ~idSN.2>, 
                                                                               (f5(~k, ~RAND.1)⊕
                                                                                ('1'+~sqn_root+count
                                                                                )
                                                                               )
                                                                              >),
                                                                          <'EAPAKA', ~supi, 'K_aut'
                                                                          >),
                                                                      <~RAND.1, 
                                                                       <
                                                                        (f5(~k, ~RAND.1)⊕
                                                                         ('1'+~sqn_root+count)), 
                                                                        f1(~k,
                                                                           <('1'+~sqn_root+count), 
                                                                            ~RAND.1>)
                                                                       >, 
                                                                       '5G', ~idSN.2>)
                                                                 >
                                                           ) ▶₁ #j.4 ) )
                                                case receive_secure_case_1
                                                by sorry
                                              next
                                                case receive_secure_case_2
                                                step( solve( RcvS( ~cid.1, ~idSN.2, ~idHN,
                                                                   <'ProseAuthenticateRequest2', 
                                                                    f2(~k, ~RAND.1), 
                                                                    KDF(KDF(KDF(<f3(~k, ~RAND.1), 
                                                                                 f4(~k, ~RAND.1)>,
                                                                                <<'5G', ~idSN.2>, 
                                                                                 (f5(~k, ~RAND.1)⊕
                                                                                  ('1'+~sqn_root+
                                                                                   count)
                                                                                 )
                                                                                >),
                                                                            <'EAPAKA', ~supi, 
                                                                             'K_aut'>),
                                                                        f2(~k, ~RAND.1))
                                                                   >
                                                             ) ▶₁ #vr.51 ) )
                                                  case receive_secure
                                                  step( solve( !KU( senc(<~UP_Se_Po.2, 
                                                                          Int(KDF(KDF(KDF(KDF(KDF(KDF(<
                                                                                                       f3(~k,
                                                                                                          ~RAND.1), 
                                                                                                       f4(~k,
                                                                                                          ~RAND.1)
                                                                                                      >,
                                                                                                      <
                                                                                                       <
                                                                                                        '5G', 
                                                                                                        ~idSN.2
                                                                                                       >, 
                                                                                                       (
                                                                                                        f5(~k,
                                                                                                           ~RAND.1)⊕
                                                                                                        (
                                                                                                         '1'+
                                                                                                         ~sqn_root+
                                                                                                         count
                                                                                                        )
                                                                                                       )
                                                                                                      >),
                                                                                                  <
                                                                                                   'EAPAKA', 
                                                                                                   ~supi, 
                                                                                                   'K_ausf'
                                                                                                  >),
                                                                                              <
                                                                                               ~supi, 
                                                                                               ~RSC.2
                                                                                              >),
                                                                                          <
                                                                                           ~Nonce1.2, 
                                                                                           ~Nonce2
                                                                                          >),
                                                                                      <~Nonce1.2, 
                                                                                       ~Nonce2>),
                                                                                  <'0x01', 
                                                                                   'integrity_algorithm'
                                                                                  >),
                                                                              <~UP_Se_Po.2, 
                                                                               ~LSB_KsessID, 
                                                                               ~MSB_KsessID.1>)
                                                                         >,
                                                                         KDF(KDF(KDF(KDF(KDF(KDF(<
                                                                                                  f3(~k,
                                                                                                     ~RAND.1), 
                                                                                                  f4(~k,
                                                                                                     ~RAND.1)
                                                                                                 >,
                                                                                                 <
                                                                                                  <
                                                                                                   '5G', 
                                                                                                   ~idSN.2
                                                                                                  >, 
                                                                                                  (
                                                                                                   f5(~k,
                                                                                                      ~RAND.1)⊕
                                                                                                   (
                                                                                                    '1'+
                                                                                                    ~sqn_root+
                                                                                                    count
                                                                                                   )
                                                                                                  )
                                                                                                 >),
                                                                                             <
                                                                                              'EAPAKA', 
                                                                                              ~supi, 
                                                                                              'K_ausf'
                                                                                             >),
                                                                                         <~supi, 
                                                                                          ~RSC.2>),
                                                                                     <~Nonce1.2, 
                                                                                      ~Nonce2>),
                                                                                 <~Nonce1.2, ~Nonce2
                                                                                 >),
                                                                             <'0x00', 
                                                                              'confidential_algorithm'
                                                                             >))
                                                               ) @ #vk.81 ) )
                                                    case c_senc
                                                    by sorry
                                                  next
                                                    case relay_receive_DSMComplete_step14
                                                    by step( contradiction /* cyclic */ )
                                                  next
                                                    case ue_receive_DSMCommand_step13_case_1
                                                    by sorry
                                                  next
                                                    case ue_receive_DSMCommand_step13_case_2
                                                    by sorry
                                                  next
                                                    case ue_receive_DSMCommand_step13_case_3
                                                    step( solve( Sqn_HN( ~supi, ~idHN,
                                                                         ('1'+~sqn_root), ~sqn_root,
                                                                         '1'
                                                                 ) ▶₄ #j.3 ) )
                                                      case add_subscription
                                                      step( solve( RcvS( ~transactionid.1,
                                                                         ~supi_relay.3, ~idSN.2,
                                                                         <'relayauthresponse', 
                                                                          f2(~k, ~RAND.1), 
                                                                          KDF(KDF(KDF(<
                                                                                       f3(~k,
                                                                                          ~RAND.1), 
                                                                                       f4(~k,
                                                                                          ~RAND.1)
                                                                                      >,
                                                                                      <
                                                                                       <'5G', 
                                                                                        ~idSN.2>, 
                                                                                       (
                                                                                        f5(~k,
                                                                                           ~RAND.1)⊕
                                                                                        ('1'+'1'+
                                                                                         ~sqn_root)
                                                                                       )
                                                                                      >),
                                                                                  <'EAPAKA', ~supi, 
                                                                                   'K_aut'>),
                                                                              f2(~k, ~RAND.1))
                                                                         >
                                                                   ) ▶₁ #vr.48 ) )
                                                        case receive_secure
                                                        step( solve( RcvS( ~cid.2, ~idHN, ~idSN.3,
                                                                           <
                                                                            'ProseAuthenticateResponse', 
                                                                            ~RAND.1, 
                                                                            <
                                                                             (f5(~k, ~RAND.1)⊕
                                                                              ('1'+'1'+~sqn_root)), 
                                                                             f1(~k,
                                                                                <
                                                                                 ('1'+'1'+~sqn_root
                                                                                 ), 
                                                                                 ~RAND.1>)
                                                                            >, 
                                                                            <'5G', ~idSN.2>, 
                                                                            KDF(KDF(KDF(<
                                                                                         f3(~k,
                                                                                            ~RAND.1), 
                                                                                         f4(~k,
                                                                                            ~RAND.1)
                                                                                        >,
                                                                                        <
                                                                                         <'5G', 
                                                                                          ~idSN.2>, 
                                                                                         (
                                                                                          f5(~k,
                                                                                             ~RAND.1)⊕
                                                                                          ('1'+'1'+
                                                                                           ~sqn_root
                                                                                          )
                                                                                         )
                                                                                        >),
                                                                                    <'EAPAKA', 
                                                                                     ~supi, 'K_aut'
                                                                                    >),
                                                                                <~RAND.1, 
                                                                                 <
                                                                                  (f5(~k, ~RAND.1)⊕
                                                                                   ('1'+'1'+
                                                                                    ~sqn_root)
                                                                                  ), 
                                                                                  f1(~k,
                                                                                     <
                                                                                      ('1'+'1'+
                                                                                       ~sqn_root), 
                                                                                      ~RAND.1>)
                                                                                 >, 
                                                                                 '5G', ~idSN.2>)
                                                                           >
                                                                     ) ▶₁ #j.4 ) )
                                                          case receive_secure
                                                          step( solve( !KU( KDF(KDF(KDF(<
                                                                                         f3(~k,
                                                                                            ~RAND.1), 
                                                                                         f4(~k,
                                                                                            ~RAND.1)
                                                                                        >,
                                                                                        <
                                                                                         <'5G', 
                                                                                          ~idSN.2>, 
                                                                                         (
                                                                                          f5(~k,
                                                                                             ~RAND.1)⊕
                                                                                          ('1'+'1'+
                                                                                           ~sqn_root
                                                                                          )
                                                                                         )
                                                                                        >),
                                                                                    <'EAPAKA', 
                                                                                     ~supi, 'K_aut'
                                                                                    >),
                                                                                f2(~k, ~RAND.1))
                                                                       ) @ #vk.79 ) )
                                                            case c_KDF
                                                            by sorry
                                                          next
                                                            case ue_receive_EAPReq_freshness_success_send_EAPResp_step7a
                                                            step( solve( RcvS( ~cid.1, ~idSN.2,
                                                                               ~idHN,
                                                                               <
                                                                                'ProseAuthenticateRequest', 
                                                                                <
                                                                                 aenc(<~supi, ~R.2>,
                                                                                      pk(~sk_HN)), 
                                                                                 ~idHN>, 
                                                                                ~RSC.2, ~Nonce1.2, 
                                                                                '5G', ~idSN.2>
                                                                         ) ▶₁ #j.3 ) )
                                                              case receive_secure
                                                              step( solve( RcvS( ~transactionid,
                                                                                 ~supi_relay.1,
                                                                                 ~idSN,
                                                                                 <
                                                                                  'relaykeyrequest', 
                                                                                  ~transactionid, 
                                                                                  <
                                                                                   aenc(<~supi, ~R.1
                                                                                        >,
                                                                                        pk(~sk_HN)), 
                                                                                   ~idHN>, 
                                                                                  ~RSC.1, Nonce1.1>
                                                                           ) ▶₃ #vr.20 ) )
                                                                case receive_secure
                                                                step( solve( RcvS( ~transactionid.1,
                                                                                   ~supi_relay.3,
                                                                                   ~idSN.2,
                                                                                   <
                                                                                    'relaykeyrequest', 
                                                                                    ~transactionid.1, 
                                                                                    <
                                                                                     aenc(<~supi, 
                                                                                           ~R.2>,
                                                                                          pk(~sk_HN)), 
                                                                                     ~idHN>, 
                                                                                    ~RSC.2, 
                                                                                    ~Nonce1.2>
                                                                             ) ▶₃ #vr.27 ) )
                                                                  case receive_secure
                                                                  step( solve( !KU( KDF(~DUIK.1,
                                                                                        <
                                                                                         <
                                                                                          aenc(<
                                                                                                ~supi, 
                                                                                                ~R.2
                                                                                               >,
                                                                                               pk(~sk_HN)), 
                                                                                          ~idHN>, 
                                                                                         ~User_info_remote.2, 
                                                                                         ~User_info_relay.2, 
                                                                                         (~RSC.2⊕
                                                                                          KDF(~DUCK.1,
                                                                                              <
                                                                                               ~Nonce1.2, 
                                                                                               ~RSC.2
                                                                                              >)
                                                                                         ), 
                                                                                         ~Nonce1.2, 
                                                                                         ~SeCap.3, 
                                                                                         ~CP_Se_Po.1, 
                                                                                         ~MSB_KsessID.1
                                                                                        >)
                                                                               ) @ #vk.74 ) )
                                                                    case c_KDF
                                                                    by sorry
                                                                  next
                                                                    case ue_send_DCR_step1
                                                                    step( solve( !KU( KDF(~DUIK.2,
                                                                                          <
                                                                                           <
                                                                                            aenc(<
                                                                                                  ~supi, 
                                                                                                  ~R.1
                                                                                                 >,
                                                                                                 pk(~sk_HN)), 
                                                                                            ~idHN>, 
                                                                                           ~User_info_remote.1, 
                                                                                           ~User_info_relay.4, 
                                                                                           (~RSC.1⊕
                                                                                            KDF(~DUCK.2,
                                                                                                <
                                                                                                 Nonce1.1, 
                                                                                                 ~RSC.1
                                                                                                >)
                                                                                           ), 
                                                                                           Nonce1.1, 
                                                                                           ~SeCap.2, 
                                                                                           ~CP_Se_Po.2, 
                                                                                           ~MSB_KsessID.2
                                                                                          >)
                                                                                 ) @ #vk.65 ) )
                                                                      case c_KDF
                                                                      by sorry
                                                                    next
                                                                      case ue_send_DCR_step1_case_1
                                                                      step( solve( !KU( aenc(<
                                                                                              ~supi, 
                                                                                              ~R.1>,
                                                                                             pk(~sk_HN))
                                                                                   ) @ #vk.45 ) )
                                                                        case c_aenc
                                                                        by sorry
                                                                      next
                                                                        case ue_send_DCR_step1
                                                                        step( solve( Sqn_HN( ~supi,
                                                                                             ~idHN,
                                                                                             (
                                                                                              ~sqn_root+
                                                                                              count
                                                                                             ),
                                                                                             ~sqn_root,
                                                                                             count
                                                                                     ) ▶₄ #j.1 ) )
                                                                          case HN_receive_Nausf_UE_PAR_step4
                                                                          by step( contradiction
                                                                                   /* from formulas
                                                                                   */ )
                                                                        next
                                                                          case HN_receive_authSync_step10b
                                                                          by sorry // removed
                                                                        next
                                                                          case add_subscription
                                                                          step( solve( !KU( f1(~k,
                                                                                               <
                                                                                                (
                                                                                                 '1'+
                                                                                                 '1'+
                                                                                                 ~sqn_root
                                                                                                ), 
                                                                                                ~RAND
                                                                                               >)
                                                                                       ) @ #vk.34 ) )
                                                                            case c_f1
                                                                            by sorry
                                                                          next
                                                                            case relay_receive_relay_auth_request_step6
                                                                            step( solve( RcvS( ~cid.1,
                                                                                               ~idHN.1,
                                                                                               ~idSN.3,
                                                                                               <
                                                                                                'ProseAuthenticateResponse', 
                                                                                                ~RAND, 
                                                                                                <
                                                                                                 (
                                                                                                  f5(~k,
                                                                                                     ~RAND)⊕
                                                                                                  (
                                                                                                   '1'+
                                                                                                   '1'+
                                                                                                   ~sqn_root
                                                                                                  )
                                                                                                 ), 
                                                                                                 f1(~k,
                                                                                                    <
                                                                                                     (
                                                                                                      '1'+
                                                                                                      '1'+
                                                                                                      ~sqn_root
                                                                                                     ), 
                                                                                                     ~RAND
                                                                                                    >)
                                                                                                >, 
                                                                                                <
                                                                                                 '5G', 
                                                                                                 ~idSN
                                                                                                >, 
                                                                                                KDF(KDF(KDF(<
                                                                                                             f3(~k,
                                                                                                                ~RAND), 
                                                                                                             f4(~k,
                                                                                                                ~RAND)
                                                                                                            >,
                                                                                                            <
                                                                                                             <
                                                                                                              '5G', 
                                                                                                              ~idSN
                                                                                                             >, 
                                                                                                             (
                                                                                                              f5(~k,
                                                                                                                 ~RAND)⊕
                                                                                                              (
                                                                                                               '1'+
                                                                                                               '1'+
                                                                                                               ~sqn_root
                                                                                                              )
                                                                                                             )
                                                                                                            >),
                                                                                                        <
                                                                                                         'EAPAKA', 
                                                                                                         ~supi, 
                                                                                                         'K_aut'
                                                                                                        >),
                                                                                                    <
                                                                                                     ~RAND, 
                                                                                                     <
                                                                                                      (
                                                                                                       f5(~k,
                                                                                                          ~RAND)⊕
                                                                                                       (
                                                                                                        '1'+
                                                                                                        '1'+
                                                                                                        ~sqn_root
                                                                                                       )
                                                                                                      ), 
                                                                                                      f1(~k,
                                                                                                         <
                                                                                                          (
                                                                                                           '1'+
                                                                                                           '1'+
                                                                                                           ~sqn_root
                                                                                                          ), 
                                                                                                          ~RAND
                                                                                                         >)
                                                                                                     >, 
                                                                                                     '5G', 
                                                                                                     ~idSN
                                                                                                    >)
                                                                                               >
                                                                                         ) ▶₁ #j.2 ) )
                                                                              case receive_secure
                                                                              step( solve( !KU( 'DCA'
                                                                                           ) @ #vk.46 ) )
                                                                                case coerce
                                                                                by sorry
                                                                              next
                                                                                case pub
                                                                                step( solve( !KU( 'DSMComplete'
                                                                                             ) @ #vk.51 ) )
                                                                                  case coerce
                                                                                  by sorry
                                                                                next
                                                                                  case pub
                                                                                  step( solve( !KU( 'DSMCommand'
                                                                                               ) @ #vk.48 ) )
                                                                                    case coerce
                                                                                    by sorry
                                                                                  next
                                                                                    case pub
                                                                                    step( solve( !KU( f2(~k,
                                                                                                         ~RAND)
                                                                                                 ) @ #vk.51 ) )
                                                                                      case c_f2
                                                                                      by sorry
                                                                                    next
                                                                                      case ue_receive_EAPReq_freshness_success_send_EAPResp_step7a
                                                                                      step( solve( !Relay( ~User_info_relay.2,
                                                                                                           ~supi_relay.1,
                                                                                                           ~idSN
                                                                                                   ) ▶₁ #k.1 ) )
                                                                                        case init_Relay
                                                                                        step( solve( !KU( ~Nonce1.1
                                                                                                     ) @ #vk.46 ) )
                                                                                          case relay_receive_relaykeyresponse_step12_case_1
                                                                                          by sorry
                                                                                        next
                                                                                          case relay_receive_relaykeyresponse_step12_case_2
                                                                                          by sorry
                                                                                        next
                                                                                          case relay_receive_relaykeyresponse_step12_case_3
                                                                                          by sorry
                                                                                        next
                                                                                          case relay_receive_relaykeyresponse_step12_case_4
                                                                                          by sorry
                                                                                        next
                                                                                          case ue_send_DCR_step1
                                                                                          step( solve( !KU( ~LSB_KsessID
                                                                                                       ) @ #vk.51 ) )
                                                                                            case relay_receive_relaykeyresponse_step12_case_1
                                                                                            by sorry
                                                                                          next
                                                                                            case relay_receive_relaykeyresponse_step12_case_2
                                                                                            by sorry
                                                                                          next
                                                                                            case relay_receive_relaykeyresponse_step12_case_3
                                                                                            by sorry
                                                                                          next
                                                                                            case relay_receive_relaykeyresponse_step12_case_4
                                                                                            by sorry
                                                                                          next
                                                                                            case relay_receive_relaykeyresponse_step12_case_5
                                                                                            step( solve( RcvS( ~cid.1,
                                                                                                               ~idHN,
                                                                                                               ~idSN.2,
                                                                                                               <
                                                                                                                'ProseAuthenticateResponse', 
                                                                                                                ~RAND, 
                                                                                                                <
                                                                                                                 (
                                                                                                                  f5(~k,
                                                                                                                     ~RAND)⊕
                                                                                                                  (
                                                                                                                   '1'+
                                                                                                                   '1'+
                                                                                                                   ~sqn_root
                                                                                                                  )
                                                                                                                 ), 
                                                                                                                 f1(~k,
                                                                                                                    <
                                                                                                                     (
                                                                                                                      '1'+
                                                                                                                      '1'+
                                                                                                                      ~sqn_root
                                                                                                                     ), 
                                                                                                                     ~RAND
                                                                                                                    >)
                                                                                                                >, 
                                                                                                                <
                                                                                                                 '5G', 
                                                                                                                 ~idSN
                                                                                                                >, 
                                                                                                                KDF(KDF(KDF(<
                                                                                                                             f3(~k,
                                                                                                                                ~RAND), 
                                                                                                                             f4(~k,
                                                                                                                                ~RAND)
                                                                                                                            >,
                                                                                                                            <
                                                                                                                             <
                                                                                                                              '5G', 
                                                                                                                              ~idSN
                                                                                                                             >, 
                                                                                                                             (
                                                                                                                              f5(~k,
                                                                                                                                 ~RAND)⊕
                                                                                                                              (
                                                                                                                               '1'+
                                                                                                                               '1'+
                                                                                                                               ~sqn_root
                                                                                                                              )
                                                                                                                             )
                                                                                                                            >),
                                                                                                                        <
                                                                                                                         'EAPAKA', 
                                                                                                                         ~supi, 
                                                                                                                         'K_aut'
                                                                                                                        >),
                                                                                                                    <
                                                                                                                     ~RAND, 
                                                                                                                     <
                                                                                                                      (
                                                                                                                       f5(~k,
                                                                                                                          ~RAND)⊕
                                                                                                                       (
                                                                                                                        '1'+
                                                                                                                        '1'+
                                                                                                                        ~sqn_root
                                                                                                                       )
                                                                                                                      ), 
                                                                                                                      f1(~k,
                                                                                                                         <
                                                                                                                          (
                                                                                                                           '1'+
                                                                                                                           '1'+
                                                                                                                           ~sqn_root
                                                                                                                          ), 
                                                                                                                          ~RAND
                                                                                                                         >)
                                                                                                                     >, 
                                                                                                                     '5G', 
                                                                                                                     ~idSN
                                                                                                                    >)
                                                                                                               >
                                                                                                         ) ▶₁ #j.2 ) )
                                                                                              case receive_secure
                                                                                              step( solve( !KU( ~Nonce2
                                                                                                           ) @ #vk.51 ) )
                                                                                                case relay_receive_relaykeyresponse_step12_case_1
                                                                                                step( solve( RcvS( ~cid.1,
                                                                                                                   ~idHN.1,
                                                                                                                   ~idSN.2,
                                                                                                                   <
                                                                                                                    'ProseAuthenticateResponse2', 
                                                                                                                    CP_PRUKID, 
                                                                                                                    K_NRprose, 
                                                                                                                    ~Nonce2
                                                                                                                   >
                                                                                                             ) ▶₁ #vr.82 ) )
                                                                                                  case receive_secure
                                                                                                  step( solve( RcvS( ~cid.1,
                                                                                                                     ~idHN,
                                                                                                                     ~idSN.2,
                                                                                                                     <
                                                                                                                      'ProseAuthenticateResponse', 
                                                                                                                      ~RAND, 
                                                                                                                      <
                                                                                                                       (
                                                                                                                        f5(~k,
                                                                                                                           ~RAND)⊕
                                                                                                                        (
                                                                                                                         '1'+
                                                                                                                         '1'+
                                                                                                                         ~sqn_root
                                                                                                                        )
                                                                                                                       ), 
                                                                                                                       f1(~k,
                                                                                                                          <
                                                                                                                           (
                                                                                                                            '1'+
                                                                                                                            '1'+
                                                                                                                            ~sqn_root
                                                                                                                           ), 
                                                                                                                           ~RAND
                                                                                                                          >)
                                                                                                                      >, 
                                                                                                                      <
                                                                                                                       '5G', 
                                                                                                                       ~idSN
                                                                                                                      >, 
                                                                                                                      KDF(KDF(KDF(<
                                                                                                                                   f3(~k,
                                                                                                                                      ~RAND), 
                                                                                                                                   f4(~k,
                                                                                                                                      ~RAND)
                                                                                                                                  >,
                                                                                                                                  <
                                                                                                                                   <
                                                                                                                                    '5G', 
                                                                                                                                    ~idSN
                                                                                                                                   >, 
                                                                                                                                   (
                                                                                                                                    f5(~k,
                                                                                                                                       ~RAND)⊕
                                                                                                                                    (
                                                                                                                                     '1'+
                                                                                                                                     '1'+
                                                                                                                                     ~sqn_root
                                                                                                                                    )
                                                                                                                                   )
                                                                                                                                  >),
                                                                                                                              <
                                                                                                                               'EAPAKA', 
                                                                                                                               ~supi, 
                                                                                                                               'K_aut'
                                                                                                                              >),
                                                                                                                          <
                                                                                                                           ~RAND, 
                                                                                                                           <
                                                                                                                            (
                                                                                                                             f5(~k,
                                                                                                                                ~RAND)⊕
                                                                                                                             (
                                                                                                                              '1'+
                                                                                                                              '1'+
                                                                                                                              ~sqn_root
                                                                                                                             )
                                                                                                                            ), 
                                                                                                                            f1(~k,
                                                                                                                               <
                                                                                                                                (
                                                                                                                                 '1'+
                                                                                                                                 '1'+
                                                                                                                                 ~sqn_root
                                                                                                                                ), 
                                                                                                                                ~RAND
                                                                                                                               >)
                                                                                                                           >, 
                                                                                                                           '5G', 
                                                                                                                           ~idSN
                                                                                                                          >)
                                                                                                                     >
                                                                                                               ) ▶₁ #j.2 ) )
                                                                                                    case receive_secure
                                                                                                    step( solve( !KU( ~idSN
                                                                                                                 ) @ #vk.43 ) )
                                                                                                      case init_servNet
                                                                                                      step( solve( !KU( ~RAND
                                                                                                                   ) @ #vk.41 ) )
                                                                                                        case relay_receive_relay_auth_request_step6
                                                                                                        step( solve( RcvS( ~cid.1,
                                                                                                                           ~idHN.1,
                                                                                                                           ~idSN.3,
                                                                                                                           <
                                                                                                                            'ProseAuthenticateResponse', 
                                                                                                                            ~RAND, 
                                                                                                                            <
                                                                                                                             (
                                                                                                                              f5(~k,
                                                                                                                                 ~RAND)⊕
                                                                                                                              (
                                                                                                                               '1'+
                                                                                                                               '1'+
                                                                                                                               ~sqn_root
                                                                                                                              )
                                                                                                                             ), 
                                                                                                                             f1(~k,
                                                                                                                                <
                                                                                                                                 (
                                                                                                                                  '1'+
                                                                                                                                  '1'+
                                                                                                                                  ~sqn_root
                                                                                                                                 ), 
                                                                                                                                 ~RAND
                                                                                                                                >)
                                                                                                                            >, 
                                                                                                                            <
                                                                                                                             '5G', 
                                                                                                                             ~idSN
                                                                                                                            >, 
                                                                                                                            KDF(KDF(KDF(<
                                                                                                                                         f3(~k,
                                                                                                                                            ~RAND), 
                                                                                                                                         f4(~k,
                                                                                                                                            ~RAND)
                                                                                                                                        >,
                                                                                                                                        <
                                                                                                                                         <
                                                                                                                                          '5G', 
                                                                                                                                          ~idSN
                                                                                                                                         >, 
                                                                                                                                         (
                                                                                                                                          f5(~k,
                                                                                                                                             ~RAND)⊕
                                                                                                                                          (
                                                                                                                                           '1'+
                                                                                                                                           '1'+
                                                                                                                                           ~sqn_root
                                                                                                                                          )
                                                                                                                                         )
                                                                                                                                        >),
                                                                                                                                    <
                                                                                                                                     'EAPAKA', 
                                                                                                                                     ~supi, 
                                                                                                                                     'K_aut'
                                                                                                                                    >),
                                                                                                                                <
                                                                                                                                 ~RAND, 
                                                                                                                                 <
                                                                                                                                  (
                                                                                                                                   f5(~k,
                                                                                                                                      ~RAND)⊕
                                                                                                                                   (
                                                                                                                                    '1'+
                                                                                                                                    '1'+
                                                                                                                                    ~sqn_root
                                                                                                                                   )
                                                                                                                                  ), 
                                                                                                                                  f1(~k,
                                                                                                                                     <
                                                                                                                                      (
                                                                                                                                       '1'+
                                                                                                                                       '1'+
                                                                                                                                       ~sqn_root
                                                                                                                                      ), 
                                                                                                                                      ~RAND
                                                                                                                                     >)
                                                                                                                                 >, 
                                                                                                                                 '5G', 
                                                                                                                                 ~idSN
                                                                                                                                >)
                                                                                                                           >
                                                                                                                     ) ▶₁ #j.2 ) )
                                                                                                          case receive_secure
                                                                                                          step( solve( !KU( ~MSB_KsessID.1
                                                                                                                       ) @ #vk.51 ) )
                                                                                                            case relay_receive_relaykeyresponse_step12_case_1
                                                                                                            by sorry
                                                                                                          next
                                                                                                            case relay_receive_relaykeyresponse_step12_case_2
                                                                                                            by sorry
                                                                                                          next
                                                                                                            case relay_receive_relaykeyresponse_step12_case_3
                                                                                                            by sorry
                                                                                                          next
                                                                                                            case relay_receive_relaykeyresponse_step12_case_4
                                                                                                            by sorry
                                                                                                          next
                                                                                                            case ue_receive_DSMCommand_step13
                                                                                                            by step( contradiction
                                                                                                                     /*
                                                                                                                     cyclic
                                                                                                                     */ )
                                                                                                          next
                                                                                                            case ue_send_DCR_step1
                                                                                                            step( solve( !KU( ~CP_Se_Po.1
                                                                                                                         ) @ #vk.51 ) )
                                                                                                              case relay_receive_relaykeyresponse_step12_case_1
                                                                                                              by sorry
                                                                                                            next
                                                                                                              case relay_receive_relaykeyresponse_step12_case_2
                                                                                                              by sorry
                                                                                                            next
                                                                                                              case relay_receive_relaykeyresponse_step12_case_3
                                                                                                              by sorry
                                                                                                            next
                                                                                                              case relay_receive_relaykeyresponse_step12_case_4
                                                                                                              by sorry
                                                                                                            next
                                                                                                              case ue_send_DCR_step1
                                                                                                              step( solve( !KU( ~SeCap.1
                                                                                                                           ) @ #vk.51 ) )
                                                                                                                case relay_receive_relaykeyresponse_step12_case_1
                                                                                                                by sorry
                                                                                                              next
                                                                                                                case relay_receive_relaykeyresponse_step12_case_2
                                                                                                                by sorry
                                                                                                              next
                                                                                                                case relay_receive_relaykeyresponse_step12_case_3
                                                                                                                by sorry
                                                                                                              next
                                                                                                                case relay_receive_relaykeyresponse_step12_case_4
                                                                                                                by sorry
                                                                                                              next
                                                                                                                case ue_send_DCR_step1
                                                                                                                step( solve( !KU( ~User_info_relay.2
                                                                                                                             ) @ #vk.50 ) )
                                                                                                                  case relay_receive_relaykeyresponse_step12_case_1
                                                                                                                  by sorry
                                                                                                                next
                                                                                                                  case relay_receive_relaykeyresponse_step12_case_2
                                                                                                                  by sorry
                                                                                                                next
                                                                                                                  case relay_receive_relaykeyresponse_step12_case_3
                                                                                                                  by sorry
                                                                                                                next
                                                                                                                  case relay_receive_relaykeyresponse_step12_case_4
                                                                                                                  by sorry
                                                                                                                next
                                                                                                                  case ue_send_DCR_step1_case_1
                                                                                                                  step( solve( !KU( ~User_info_remote
                                                                                                                               ) @ #vk.50 ) )
                                                                                                                    case relay_receive_relaykeyresponse_step12_case_1
                                                                                                                    by sorry
                                                                                                                  next
                                                                                                                    case relay_receive_relaykeyresponse_step12_case_2
                                                                                                                    by sorry
                                                                                                                  next
                                                                                                                    case relay_receive_relaykeyresponse_step12_case_3
                                                                                                                    by sorry
                                                                                                                  next
                                                                                                                    case relay_receive_relaykeyresponse_step12_case_4
                                                                                                                    by sorry
                                                                                                                  next
                                                                                                                    case ue_send_DCR_step1_case_1
                                                                                                                    step( solve( !KU( ~idHN
                                                                                                                                 ) @ #vk.50 ) )
                                                                                                                      case init_homeNet
                                                                                                                      step( solve( !KU( '1'
                                                                                                                                   ) @ #vk.50 ) )
                                                                                                                        case coerce
                                                                                                                        by sorry
                                                                                                                      next
                                                                                                                        case pub
                                                                                                                        step( solve( !KU( '5G'
                                                                                                                                     ) @ #vk.50 ) )
                                                                                                                          case coerce
                                                                                                                          by sorry
                                                                                                                        next
                                                                                                                          case pub
                                                                                                                          step( solve( !KU( (
                                                                                                                                             ~RSC.1⊕
                                                                                                                                             KDF(~DUCK.1,
                                                                                                                                                 <
                                                                                                                                                  ~Nonce1.1, 
                                                                                                                                                  ~RSC.1
                                                                                                                                                 >)
                                                                                                                                            )
                                                                                                                                       ) @ #vk.51 ) )
                                                                                                                            case c_xor
                                                                                                                            by sorry
                                                                                                                          next
                                                                                                                            case coerce
                                                                                                                            step( solve( !KD( (
                                                                                                                                               ~RSC.1⊕
                                                                                                                                               KDF(~DUCK.1,
                                                                                                                                                   <
                                                                                                                                                    ~Nonce1.1, 
                                                                                                                                                    ~RSC.1
                                                                                                                                                   >)
                                                                                                                                              )
                                                                                                                                         ) ▶₀ #vk.50 ) )
                                                                                                                              case init_homeNet
                                                                                                                              by step( contradiction
                                                                                                                                       /*
                                                                                                                                       impossible chain
                                                                                                                                       */ )
                                                                                                                            next
                                                                                                                              case init_servNet
                                                                                                                              by step( contradiction
                                                                                                                                       /*
                                                                                                                                       impossible chain
                                                                                                                                       */ )
                                                                                                                            next
                                                                                                                              case relay_receive_DSMComplete_step14
                                                                                                                              by sorry
                                                                                                                            next
                                                                                                                              case relay_receive_relay_auth_request_step6
                                                                                                                              by sorry
                                                                                                                            next
                                                                                                                              case relay_receive_relaykeyresponse_step12
                                                                                                                              by sorry
                                                                                                                            next
                                                                                                                              case reveal_Ltk_DUCK
                                                                                                                              by step( contradiction
                                                                                                                                       /*
                                                                                                                                       impossible chain
                                                                                                                                       */ )
                                                                                                                            next
                                                                                                                              case reveal_Ltk_DUIK
                                                                                                                              by step( contradiction
                                                                                                                                       /*
                                                                                                                                       impossible chain
                                                                                                                                       */ )
                                                                                                                            next
                                                                                                                              case reveal_Ltk_RSC
                                                                                                                              by step( contradiction
                                                                                                                                       /*
                                                                                                                                       impossible chain
                                                                                                                                       */ )
                                                                                                                            next
                                                                                                                              case reveal_Ltk_supi_relay
                                                                                                                              by step( contradiction
                                                                                                                                       /*
                                                                                                                                       impossible chain
                                                                                                                                       */ )
                                                                                                                            next
                                                                                                                              case ue_receive_DSMCommand_step13
                                                                                                                              by sorry
                                                                                                                            next
                                                                                                                              case ue_receive_EAPReq_fail_freshness_send_sync_failure_step7b
                                                                                                                              by sorry
                                                                                                                            next
                                                                                                                              case ue_receive_EAPReq_freshness_success_send_EAPResp_step7a
                                                                                                                              by sorry
                                                                                                                            next
                                                                                                                              case ue_send_DCR_step1
                                                                                                                              step( solve( (#vl.8, 0) ~~> (#vk.50, 0) ) )
                                                                                                                                case d_0_fst
                                                                                                                                by sorry
                                                                                                                              next
                                                                                                                                case d_0_snd
                                                                                                                                step( solve( (#vr.106, 0) ~~> (#vk.50, 0) ) )
                                                                                                                                  case d_0_fst
                                                                                                                                  by step( contradiction
                                                                                                                                           /*
                                                                                                                                           impossible chain
                                                                                                                                           */ )
                                                                                                                                next
                                                                                                                                  case d_0_snd
                                                                                                                                  step( solve( (#vr.107, 0) ~~> (#vk.50, 0) ) )
                                                                                                                                    case d_0_fst
                                                                                                                                    by step( contradiction
                                                                                                                                             /*
                                                                                                                                             impossible chain
                                                                                                                                             */ )
                                                                                                                                  next
                                                                                                                                    case d_0_snd
                                                                                                                                    step( solve( (#vr.108, 0) ~~> (#vk.50, 0) ) )
                                                                                                                                      case d_0_fst
                                                                                                                                      step( solve( (#vr.109, 0) ~~> (#vk.50, 0) ) )
                                                                                                                                        case Xor
                                                                                                                                        step( solve( !KU( (
                                                                                                                                                           f5(~k,
                                                                                                                                                              ~RAND)⊕
                                                                                                                                                           (
                                                                                                                                                            '1'+
                                                                                                                                                            '1'+
                                                                                                                                                            ~sqn_root
                                                                                                                                                           )
                                                                                                                                                          )
                                                                                                                                                     ) @ #vk.51 ) )
                                                                                                                                          case c_xor
                                                                                                                                          by sorry
                                                                                                                                        next
                                                                                                                                          case coerce
                                                                                                                                          step( solve( !KD( (
                                                                                                                                                             f5(~k,
                                                                                                                                                                ~RAND)⊕
                                                                                                                                                             (
                                                                                                                                                              '1'+
                                                                                                                                                              '1'+
                                                                                                                                                              ~sqn_root
                                                                                                                                                             )
                                                                                                                                                            )
                                                                                                                                                       ) ▶₀ #vk.51 ) )
                                                                                                                                            case init_homeNet
                                                                                                                                            by step( contradiction
                                                                                                                                                     /*
                                                                                                                                                     impossible chain
                                                                                                                                                     */ )
                                                                                                                                          next
                                                                                                                                            case init_servNet
                                                                                                                                            by step( contradiction
                                                                                                                                                     /*
                                                                                                                                                     impossible chain
                                                                                                                                                     */ )
                                                                                                                                          next
                                                                                                                                            case relay_receive_DSMComplete_step14
                                                                                                                                            step( solve( (#vl.8, 0) ~~> (#vk.51, 0) ) )
                                                                                                                                              case d_0_fst
                                                                                                                                              by step( contradiction
                                                                                                                                                       /*
                                                                                                                                                       impossible chain
                                                                                                                                                       */ )
                                                                                                                                            next
                                                                                                                                              case d_0_snd
                                                                                                                                              by sorry
                                                                                                                                            qed
                                                                                                                                          next
                                                                                                                                            case relay_receive_relay_auth_request_step6
                                                                                                                                            step( solve( (#vl.8, 0) ~~> (#vk.51, 0) ) )
                                                                                                                                              case d_0_fst
                                                                                                                                              by sorry
                                                                                                                                            next
                                                                                                                                              case d_0_snd
                                                                                                                                              step( solve( (#vr.110, 0) ~~> (#vk.51, 0) ) )
                                                                                                                                                case d_0_fst
                                                                                                                                                step( solve( RcvS( ~transactionid.1,
                                                                                                                                                                   ~idSN.2,
                                                                                                                                                                   ~supi_relay.3,
                                                                                                                                                                   <
                                                                                                                                                                    'relay_auth_request', 
                                                                                                                                                                    ~transactionid.1, 
                                                                                                                                                                    RAND.1, 
                                                                                                                                                                    AUTN, 
                                                                                                                                                                    SNID, 
                                                                                                                                                                    AT_MAC
                                                                                                                                                                   >
                                                                                                                                                             ) ▶₁ #vr.109 ) )
                                                                                                                                                  case receive_secure_case_1
                                                                                                                                                  step( solve( (#vr.111, 0) ~~> (#vk.51, 0) ) )
                                                                                                                                                    case d_0_fst
                                                                                                                                                    step( solve( (#vr.123, 0) ~~> (#vk.51, 0) ) )
                                                                                                                                                      case Xor
                                                                                                                                                      step( solve( St_1_relay( ~transactionid.1,
                                                                                                                                                                               ~User_info_remote.2,
                                                                                                                                                                               ~supi.2,
                                                                                                                                                                               ~User_info_relay.5,
                                                                                                                                                                               ~idSN.3,
                                                                                                                                                                               idHN.2,
                                                                                                                                                                               ~supi_relay.4,
                                                                                                                                                                               ~RSC.3,
                                                                                                                                                                               Nonce1.3,
                                                                                                                                                                               ~SeCap.3,
                                                                                                                                                                               ~CP_Se_Po.3,
                                                                                                                                                                               ~MSB_KsessID.3
                                                                                                                                                                   ) ▶₀ #vr.109 ) )
                                                                                                                                                        case relay_send_relaykeyrequest_step2
                                                                                                                                                        step( solve( RcvS( ~cid.1,
                                                                                                                                                                           ~idHN.1,
                                                                                                                                                                           ~idSN.2,
                                                                                                                                                                           <
                                                                                                                                                                            'ProseAuthenticateResponse', 
                                                                                                                                                                            ~RAND, 
                                                                                                                                                                            <
                                                                                                                                                                             (
                                                                                                                                                                              f5(~k,
                                                                                                                                                                                 ~RAND)⊕
                                                                                                                                                                              (
                                                                                                                                                                               '1'+
                                                                                                                                                                               '1'+
                                                                                                                                                                               ~sqn_root
                                                                                                                                                                              )
                                                                                                                                                                             ), 
                                                                                                                                                                             f1(~k,
                                                                                                                                                                                <
                                                                                                                                                                                 (
                                                                                                                                                                                  '1'+
                                                                                                                                                                                  '1'+
                                                                                                                                                                                  ~sqn_root
                                                                                                                                                                                 ), 
                                                                                                                                                                                 ~RAND
                                                                                                                                                                                >)
                                                                                                                                                                            >, 
                                                                                                                                                                            <
                                                                                                                                                                             '5G', 
                                                                                                                                                                             ~idSN
                                                                                                                                                                            >, 
                                                                                                                                                                            KDF(KDF(KDF(<
                                                                                                                                                                                         f3(~k,
                                                                                                                                                                                            ~RAND), 
                                                                                                                                                                                         f4(~k,
                                                                                                                                                                                            ~RAND)
                                                                                                                                                                                        >,
                                                                                                                                                                                        <
                                                                                                                                                                                         <
                                                                                                                                                                                          '5G', 
                                                                                                                                                                                          ~idSN
                                                                                                                                                                                         >, 
                                                                                                                                                                                         (
                                                                                                                                                                                          f5(~k,
                                                                                                                                                                                             ~RAND)⊕
                                                                                                                                                                                          (
                                                                                                                                                                                           '1'+
                                                                                                                                                                                           '1'+
                                                                                                                                                                                           ~sqn_root
                                                                                                                                                                                          )
                                                                                                                                                                                         )
                                                                                                                                                                                        >),
                                                                                                                                                                                    <
                                                                                                                                                                                     'EAPAKA', 
                                                                                                                                                                                     ~supi, 
                                                                                                                                                                                     'K_aut'
                                                                                                                                                                                    >),
                                                                                                                                                                                <
                                                                                                                                                                                 ~RAND, 
                                                                                                                                                                                 <
                                                                                                                                                                                  (
                                                                                                                                                                                   f5(~k,
                                                                                                                                                                                      ~RAND)⊕
                                                                                                                                                                                   (
                                                                                                                                                                                    '1'+
                                                                                                                                                                                    '1'+
                                                                                                                                                                                    ~sqn_root
                                                                                                                                                                                   )
                                                                                                                                                                                  ), 
                                                                                                                                                                                  f1(~k,
                                                                                                                                                                                     <
                                                                                                                                                                                      (
                                                                                                                                                                                       '1'+
                                                                                                                                                                                       '1'+
                                                                                                                                                                                       ~sqn_root
                                                                                                                                                                                      ), 
                                                                                                                                                                                      ~RAND
                                                                                                                                                                                     >)
                                                                                                                                                                                 >, 
                                                                                                                                                                                 '5G', 
                                                                                                                                                                                 ~idSN
                                                                                                                                                                                >)
                                                                                                                                                                           >
                                                                                                                                                                     ) ▶₁ #vr.114 ) )
                                                                                                                                                          case receive_secure
                                                                                                                                                          by ATTACK // trace found
                                                                                                                                                        qed
                                                                                                                                                      qed
                                                                                                                                                    next
                                                                                                                                                      case d_xor_case_1
                                                                                                                                                      by sorry
                                                                                                                                                    next
                                                                                                                                                      case d_xor_case_2
                                                                                                                                                      by sorry
                                                                                                                                                    next
                                                                                                                                                      case d_xor_case_3
                                                                                                                                                      by step( contradiction
                                                                                                                                                               /*
                                                                                                                                                               impossible chain
                                                                                                                                                               */ )
                                                                                                                                                    next
                                                                                                                                                      case d_xor_case_4
                                                                                                                                                      by sorry
                                                                                                                                                    qed
                                                                                                                                                  next
                                                                                                                                                    case d_0_snd
                                                                                                                                                    by sorry
                                                                                                                                                  qed
                                                                                                                                                next
                                                                                                                                                  case receive_secure_case_2
                                                                                                                                                  by sorry
                                                                                                                                                qed
                                                                                                                                              next
                                                                                                                                                case d_0_snd
                                                                                                                                                step( solve( (#vr.111, 0) ~~> (#vk.51, 0) ) )
                                                                                                                                                  case d_0_fst
                                                                                                                                                  by sorry
                                                                                                                                                next
                                                                                                                                                  case d_0_snd
                                                                                                                                                  by sorry
                                                                                                                                                qed
                                                                                                                                              qed
                                                                                                                                            qed
                                                                                                                                          next
                                                                                                                                            case relay_receive_relaykeyresponse_step12
                                                                                                                                            by sorry
                                                                                                                                          next
                                                                                                                                            case reveal_Ltk_DUCK
                                                                                                                                            by step( contradiction
                                                                                                                                                     /*
                                                                                                                                                     impossible chain
                                                                                                                                                     */ )
                                                                                                                                          next
                                                                                                                                            case reveal_Ltk_DUIK
                                                                                                                                            by step( contradiction
                                                                                                                                                     /*
                                                                                                                                                     impossible chain
                                                                                                                                                     */ )
                                                                                                                                          next
                                                                                                                                            case reveal_Ltk_RSC
                                                                                                                                            by step( contradiction
                                                                                                                                                     /*
                                                                                                                                                     impossible chain
                                                                                                                                                     */ )
                                                                                                                                          next
                                                                                                                                            case reveal_Ltk_supi_relay
                                                                                                                                            by step( contradiction
                                                                                                                                                     /*
                                                                                                                                                     impossible chain
                                                                                                                                                     */ )
                                                                                                                                          next
                                                                                                                                            case ue_receive_DSMCommand_step13
                                                                                                                                            by sorry
                                                                                                                                          next
                                                                                                                                            case ue_receive_EAPReq_fail_freshness_send_sync_failure_step7b
                                                                                                                                            by sorry
                                                                                                                                          next
                                                                                                                                            case ue_receive_EAPReq_freshness_success_send_EAPResp_step7a
                                                                                                                                            by sorry
                                                                                                                                          next
                                                                                                                                            case ue_send_DCR_step1
                                                                                                                                            by sorry
                                                                                                                                          qed
                                                                                                                                        qed
                                                                                                                                      next
                                                                                                                                        case d_xor_case_1
                                                                                                                                        by sorry
                                                                                                                                      next
                                                                                                                                        case d_xor_case_2
                                                                                                                                        by sorry
                                                                                                                                      next
                                                                                                                                        case d_xor_case_3
                                                                                                                                        by step( contradiction
                                                                                                                                                 /*
                                                                                                                                                 impossible chain
                                                                                                                                                 */ )
                                                                                                                                      next
                                                                                                                                        case d_xor_case_4
                                                                                                                                        by step( contradiction
                                                                                                                                                 /*
                                                                                                                                                 impossible chain
                                                                                                                                                 */ )
                                                                                                                                      qed
                                                                                                                                    next
                                                                                                                                      case d_0_snd
                                                                                                                                      by sorry
                                                                                                                                    qed
                                                                                                                                  qed
                                                                                                                                qed
                                                                                                                              qed
                                                                                                                            qed
                                                                                                                          qed
                                                                                                                        qed
                                                                                                                      qed
                                                                                                                    next
                                                                                                                      case relay_receive_relaykeyresponse_step12_case_1
                                                                                                                      by sorry
                                                                                                                    next
                                                                                                                      case relay_receive_relaykeyresponse_step12_case_2
                                                                                                                      by sorry
                                                                                                                    next
                                                                                                                      case relay_receive_relaykeyresponse_step12_case_3
                                                                                                                      by sorry
                                                                                                                    next
                                                                                                                      case relay_receive_relaykeyresponse_step12_case_4
                                                                                                                      by sorry
                                                                                                                    next
                                                                                                                      case ue_send_DCR_step1_case_1
                                                                                                                      by sorry
                                                                                                                    next
                                                                                                                      case ue_send_DCR_step1_case_2
                                                                                                                      by step( contradiction
                                                                                                                               /*
                                                                                                                               cyclic
                                                                                                                               */ )
                                                                                                                    qed
                                                                                                                  next
                                                                                                                    case ue_send_DCR_step1_case_2
                                                                                                                    by step( contradiction
                                                                                                                             /*
                                                                                                                             cyclic
                                                                                                                             */ )
                                                                                                                  qed
                                                                                                                next
                                                                                                                  case ue_send_DCR_step1_case_2
                                                                                                                  by step( contradiction
                                                                                                                           /*
                                                                                                                           cyclic
                                                                                                                           */ )
                                                                                                                qed
                                                                                                              qed
                                                                                                            qed
                                                                                                          qed
                                                                                                        qed
                                                                                                      next
                                                                                                        case relay_receive_relaykeyresponse_step12_case_1
                                                                                                        by sorry
                                                                                                      next
                                                                                                        case relay_receive_relaykeyresponse_step12_case_2
                                                                                                        by sorry
                                                                                                      next
                                                                                                        case relay_receive_relaykeyresponse_step12_case_3
                                                                                                        by sorry
                                                                                                      next
                                                                                                        case relay_receive_relaykeyresponse_step12_case_4
                                                                                                        by sorry
                                                                                                      qed
                                                                                                    next
                                                                                                      case relay_receive_relay_auth_request_step6_case_1
                                                                                                      by sorry
                                                                                                    next
                                                                                                      case relay_receive_relay_auth_request_step6_case_2
                                                                                                      by sorry
                                                                                                    next
                                                                                                      case relay_receive_relaykeyresponse_step12_case_1
                                                                                                      by sorry
                                                                                                    next
                                                                                                      case relay_receive_relaykeyresponse_step12_case_2
                                                                                                      by sorry
                                                                                                    next
                                                                                                      case relay_receive_relaykeyresponse_step12_case_3
                                                                                                      by sorry
                                                                                                    next
                                                                                                      case relay_receive_relaykeyresponse_step12_case_4
                                                                                                      by sorry
                                                                                                    qed
                                                                                                  qed
                                                                                                qed
                                                                                              next
                                                                                                case relay_receive_relaykeyresponse_step12_case_2
                                                                                                by sorry
                                                                                              next
                                                                                                case relay_receive_relaykeyresponse_step12_case_3
                                                                                                by sorry
                                                                                              next
                                                                                                case relay_receive_relaykeyresponse_step12_case_4
                                                                                                by sorry
                                                                                              qed
                                                                                            qed
                                                                                          qed
                                                                                        qed
                                                                                      qed
                                                                                    qed
                                                                                  qed
                                                                                qed
                                                                              qed
                                                                            qed
                                                                          qed
                                                                        qed
                                                                      qed
                                                                    next
                                                                      case ue_send_DCR_step1_case_2
                                                                      by sorry
                                                                    qed
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case ue_receive_DSMCommand_step13_case_4
                                                    by sorry
                                                  next
                                                    case ue_receive_DSMCommand_step13_case_5
                                                    by sorry
                                                  next
                                                    case ue_receive_DSMCommand_step13_case_6
                                                    by sorry
                                                  next
                                                    case ue_receive_DSMCommand_step13_case_7
                                                    by sorry
                                                  qed
                                                qed
                                              next
                                                case receive_secure_case_3
                                                by sorry
                                              qed
                                            qed
                                          qed
                                        next
                                          case receive_secure_case_3
                                          by sorry
                                        qed
                                      next
                                        case receive_secure_case_3
                                        by sorry
                                      qed
                                    next
                                      case receive_secure_case_3
                                      by sorry
                                    qed
                                  next
                                    case relay_receive_relaykeyresponse_step12_case_2
                                    by sorry
                                  next
                                    case relay_receive_relaykeyresponse_step12_case_3
                                    by sorry
                                  next
                                    case relay_receive_relaykeyresponse_step12_case_4
                                    step( solve( RcvS( ~transactionid.2, ~idSN.4, ~supi_relay.6,
                                                       <'relay_auth_request', ~transactionid.2, 
                                                        ~RAND.2, 
                                                        <
                                                         (f5(~k.2, ~RAND.2)⊕
                                                          ('1'+~sqn_root.1+count.1)), 
                                                         f1(~k.2,
                                                            <('1'+~sqn_root.1+count.1), ~RAND.2>)
                                                        >, 
                                                        <'5G', ~idSN.5>, 
                                                        KDF(KDF(KDF(<f3(~k.2, ~RAND.2), 
                                                                     f4(~k.2, ~RAND.2)>,
                                                                    <<'5G', ~idSN.5>, 
                                                                     (f5(~k.2, ~RAND.2)⊕
                                                                      ('1'+~sqn_root.1+count.1))
                                                                    >),
                                                                <'EAPAKA', ~b, 'K_aut'>),
                                                            <~RAND.2, 
                                                             <
                                                              (f5(~k.2, ~RAND.2)⊕
                                                               ('1'+~sqn_root.1+count.1)), 
                                                              f1(~k.2,
                                                                 <('1'+~sqn_root.1+count.1), ~RAND.2
                                                                 >)
                                                             >, 
                                                             '5G', ~idSN.5>)
                                                       >
                                                 ) ▶₁ #vr.48 ) )
                                      case receive_secure_case_1
                                      by sorry
                                    next
                                      case receive_secure_case_2
                                      by step( solve( RcvS( ~cid.5, ~idHN.2, ~idSN.7,
                                                            <'ProseAuthenticateResponse2', 
                                                             CP_PRUKID, 
                                                             KDF(KDF(KDF(KDF(<f3(~k, ~RAND.1), 
                                                                              f4(~k, ~RAND.1)>,
                                                                             <<'5G', ~idSN.2>, 
                                                                              (f5(~k, ~RAND.1)⊕
                                                                               ('1'+~sqn_root+dif))
                                                                             >),
                                                                         <'EAPAKA', ~supi, 'K_ausf'
                                                                         >),
                                                                     <~supi, ~RSC.3>),
                                                                 <~Nonce1.3, ~Nonce2>), 
                                                             ~Nonce2>
                                                      ) ▶₁ #vr.51 ) )
                                    next
                                      case receive_secure_case_3
                                      by sorry
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case case_2
                              by step( contradiction /* cyclic */ )
                            qed
                          qed
                        next
                          case receive_secure_case_3
                          by sorry
                        qed
                      next
                        case receive_secure_case_3
                        by sorry
                      qed
                    next
                      case receive_secure_case_3
                      by sorry
                    qed
                  next
                    case receive_secure_case_3
                    by sorry
                  qed
                next
                  case receive_secure_case_3
                  by sorry
                qed
              next
                case receive_secure_case_3
                by sorry
              qed
            next
              case relay_receive_relay_auth_request_step6_case_3
              by sorry
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    by sorry
  qed
next
  case Rule_ue_receive_EAPReq_freshness_success_send_EAPResp_step7a
  by sorry
next
  case Rule_ue_send_DCR_step1
  by sorry
qed

end