theory UP_5G_Prose_authentication_protocol begin

// Function signature and definition of the equational theory E

builtins: multiset, xor
functions: Int/2, KDF/2, adec/2, aenc/2, f1/2, f1_star/2, f2/2,
           f3/2, f4/2, f5/2, f5_star/2, fst/1, pair/2, pk/1, sdec/2, senc/2,
           snd/1
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2



/* looping facts with injective instances: Sqn_HN/5, Sqn_UE/5 */

rule (modulo E) send_secure:
   [ SndS( ~cid, A, B, m ) ] --> [ Sec( ~cid, A, B, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) receive_secure:
   [ Sec( ~cid, A, B, m ) ] --> [ RcvS( ~cid, A, B, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) secureChannel_compromised_in:
   [ In( <~cid, A, B, x> ) ]
  --[ Rev( A, 'secureChannel' ), Injected( x ) ]->
   [ Sec( ~cid, A, B, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) secureChannel_compromised_out:
   [ Sec( ~cid, A, B, m ) ]
  --[ Rev( B, 'secureChannel' ) ]->
   [ Out( <~cid, m> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) init_PKMF_relay:
   [ Fr( ~idPKMF ) ]
  --[ PKMF_relay( ~idPKMF ) ]->
   [ !PKMF( ~idPKMF ), Out( ~idPKMF ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) init_homeNet:
   [ Fr( ~sk_HN ), Fr( ~idHN ) ]
  --[ HomeNet( ~idHN ) ]->
   [
   !HN( ~idHN, ~sk_HN ), !Pk( ~idHN, pk(~sk_HN) ),
   Out( <~idHN, pk(~sk_HN)> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) add_RSC:
   [ Fr( ~RSC ), Fr( ~DUCK ), Fr( ~DUIK ) ]
  -->
   [ !Ltk_Prose( ~RSC, ~DUCK, ~DUIK ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) add_subscription:
   [
   Fr( ~supi ), Fr( ~k ), Fr( ~sqn_root ), Fr( ~User_info_remote ),
   !HN( ~idHN, ~sk_HN )
   ]
  --[
  Subscribe( ~supi, ~idHN ), Sqn_Create( ~supi, ~idHN, ~sqn_root ),
  CreateUser( ~supi, ~k, ~idHN )
  ]->
   [
   !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root, ~User_info_remote ),
   Sqn_UE( ~supi, ~idHN, ('1'+~sqn_root), ~sqn_root, '1' ),
   Sqn_HN( ~supi, ~idHN, ('1'+~sqn_root), ~sqn_root, '1' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) init_Relay:
   [ Fr( ~User_info_relay ), !PKMF( ~idPKMF ), Fr( ~supi_relay ) ]
  --[ CreateRelay( ~supi_relay ) ]->
   [ !Relay( ~User_info_relay, ~supi_relay, ~idPKMF ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) reveal_Ltk_Sym:
   [ !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root, ~User_info_remote ) ]
  --[ Rev( ~supi, <'k', ~k> ), Rev( ~idHN, <'k', ~k> ) ]->
   [ Out( ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) reveal_Ltk_Sqn:
   [ !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root, ~User_info_remote ) ]
  --[
  Rev( ~supi, <'sqn', ~sqn_root> ), Rev( ~idHN, <'sqn', ~sqn_root> )
  ]->
   [ Out( ~sqn_root ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) reveal_Ltk_supi:
   [ !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root, ~User_info_remote ) ]
  --[ Rev( ~supi, <'supi', ~supi> ), Rev( ~idHN, <'supi', ~supi> )
  ]->
   [ Out( ~supi ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) reveal_Ltk_supi_relay:
   [ !Relay( ~User_info_relay, ~supi_relay, ~idPKMF ) ]
  --[
  Rev( ~supi_relay, <'supi_relay', ~supi_relay> ),
  Rev( ~idPKMF, <'supi_relay', ~supi_relay> )
  ]->
   [ Out( ~supi_relay ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) reveal_Ltk_RSC:
   [
   !Ltk_Prose( ~RSC, ~DUCK, ~DUIK ),
   !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root, ~User_info_remote ),
   !Relay( ~User_info_relay, ~supi_relay, ~idPKMF )
   ]
  --[ Rev( ~supi, <'RSC', ~RSC> ), Rev( ~supi_relay, <'RSC', ~RSC> )
  ]->
   [ Out( ~RSC ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) reveal_Ltk_DUIK:
   [
   !Ltk_Prose( ~RSC, ~DUCK, ~DUIK ),
   !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root, ~User_info_remote ),
   !Relay( ~User_info_relay, ~supi_relay, ~idPKMF )
   ]
  --[
  Rev( ~supi, <'DUIK', ~DUIK> ), Rev( ~supi_relay, <'DUIK', ~DUIK> )
  ]->
   [ Out( ~DUIK ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) reveal_Ltk_DUCK:
   [
   !Ltk_Prose( ~RSC, ~DUCK, ~DUIK ),
   !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root, ~User_info_remote ),
   !Relay( ~User_info_relay, ~supi_relay, ~idPKMF )
   ]
  --[
  Rev( ~supi, <'DUCK', ~DUCK> ), Rev( ~supi_relay, <'DUCK', ~DUCK> )
  ]->
   [ Out( ~DUCK ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) reveal_sk_HN:
   [ !HN( ~idHN, ~sk_HN ) ]
  --[ Rev( ~idHN, <'skHN', ~sk_HN> ) ]->
   [ Out( ~sk_HN ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ue_sqn_increase:
   [ Sqn_UE( ~supi, ~idHN, Sqn, ~sqn_root, count ), In( m ) ]
  --[
  Sqn_UE_Invariance( ~supi, ~idHN, (Sqn+m), ~sqn_root, (count+m) ),
  Sqn_UE_Change( ~supi, ~idHN, (Sqn+m) ), Sqn_UE_Desync( )
  ]->
   [ Sqn_UE( ~supi, ~idHN, (Sqn+m), ~sqn_root, (count+m) ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) ue_send_DCR_step1:
   [
   !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root, ~User_info_remote ),
   !Ltk_Prose( ~RSC, ~DUCK, ~DUIK ), !Pk( ~idHN, pk_HN ),
   !Relay( ~User_info_relay, ~supi_relay, ~idPKMF ), Fr( ~SeCap ),
   Fr( ~CP_Se_Po ), Fr( ~UP_Se_Po ), Fr( ~R ), Fr( ~MSB_KsessID ),
   Fr( ~Nonce1 )
   ]
  --[
  Start_UE_Session( ~supi ),
  Running( ~supi, ~idHN, <'HN', 'remote', 'RSC', ~RSC> ),
  Running( ~supi, ~idHN, <'HN', 'remote', 'supi', ~supi> )
  ]->
   [
   St_1_UE( ~supi_relay, ~supi, ~User_info_remote, ~User_info_relay,
            ~idHN, ~k, ~sqn_root, ~RSC, ~Nonce1, ~DUCK, ~DUIK, ~SeCap,
            ~CP_Se_Po, ~UP_Se_Po, ~MSB_KsessID
   ),
   Out( <<aenc(<~supi, ~R>, pk_HN), ~idHN>, ~User_info_remote, 
         ~User_info_relay, (~RSC⊕KDF(~DUCK, <~Nonce1, ~RSC>)), ~Nonce1, 
         ~SeCap, ~CP_Se_Po, ~MSB_KsessID, 
         KDF(~DUIK,
             <<aenc(<~supi, ~R>, pk_HN), ~idHN>, ~User_info_remote, 
              ~User_info_relay, (~RSC⊕KDF(~DUCK, <~Nonce1, ~RSC>)), ~Nonce1, 
              ~SeCap, ~CP_Se_Po, ~MSB_KsessID>)
        >
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) relay_send_relaykeyrequest_step2:
   [
   Fr( ~transactionid ),
   In( <<aenc(<~supi, ~R>, pk_HN), ~idHN>, ~User_info_remote, 
        ~User_info_relay, (~RSC⊕KDF(~DUCK, <Nonce1, ~RSC>)), Nonce1, 
        ~SeCap, ~CP_Se_Po, ~MSB_KsessID, 
        KDF(~DUIK,
            <<aenc(<~supi, ~R>, pk_HN), ~idHN>, ~User_info_remote, 
             ~User_info_relay, (~RSC⊕KDF(~DUCK, <Nonce1, ~RSC>)), Nonce1, 
             ~SeCap, ~CP_Se_Po, ~MSB_KsessID>)
       >
   ),
   !Ltk_Prose( ~RSC, ~DUCK, ~DUIK ),
   !Relay( ~User_info_relay, ~supi_relay, ~idPKMF )
   ]
  --[
  Out_relay( ~transactionid, <aenc(<~supi, ~R>, pk_HN), ~idHN>, ~RSC,
             Nonce1
  ),
  Start_relay_Session( ~supi_relay ),
  Running( ~supi_relay, ~idPKMF, <'PKMF', 'relay', 'RSC', ~RSC> ),
  Running( ~supi_relay, ~idPKMF,
           <'PKMF', 'relay', 'supi_relay', ~supi_relay>
  )
  ]->
   [
   St_1_relay( ~transactionid, <aenc(<~supi, ~R>, pk_HN), ~idHN>,
               ~supi, ~User_info_relay, ~idPKMF, ~idHN, ~supi_relay, ~RSC, Nonce1,
               ~SeCap, ~CP_Se_Po, ~MSB_KsessID
   ),
   SndS( ~transactionid, ~supi_relay, ~idPKMF,
         <'relaykeyrequest', ~transactionid, 
          <aenc(<~supi, ~R>, pk_HN), ~idHN>, ~RSC, Nonce1>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) PKMF_receive_relaykeyrequest_step3:
   [
   !PKMF( ~idPKMF ), Fr( ~cid ),
   !Relay( ~User_info_relay, supi_relay, ~idPKMF ),
   RcvS( transactionid, supi_relay, ~idPKMF,
         <'relaykeyrequest', transactionid, 
          <aenc(<~supi, ~R>, pk_HN), idHN>, RSC, Nonce1>
   )
   ]
  --[
  Start_PKMF_Session( ~idPKMF ),
  In_PKMF( transactionid, <aenc(<~supi, ~R>, pk_HN), idHN>, RSC,
           Nonce1
  ),
  Running( ~idPKMF, idHN, <'HN', 'PKMF', 'RSC', RSC> )
  ]->
   [
   St_1_PKMF( transactionid, <aenc(<~supi, ~R>, pk_HN), idHN>,
              ~User_info_relay, ~supi, ~idPKMF, supi_relay, idHN, RSC, Nonce1,
              ~cid
   ),
   SndS( ~cid, ~idPKMF, idHN,
         <'ProseAuthenticateRequest', <aenc(<~supi, ~R>, pk_HN), idHN>, 
          RSC, Nonce1>
   )
   ]

  // loop breaker: [3]
  /* has exactly the trivial AC variant */

rule (modulo E) HN_receive_Nausf_UE_PAR_step4:
   [
   !HN( ~idHN, ~sk_HN ),
   RcvS( ~cid, idPKMF, ~idHN,
         <'ProseAuthenticateRequest', 
          <aenc(<~supi, ~R>, pk(~sk_HN)), ~idHN>, ~RSC, Nonce1>
   ),
   !Ltk_Sym( ~supi, ~idHN, ~k, ~sqn_root, ~User_info_remote ),
   !Relay( ~User_info_relay, ~supi_relay, idPKMF ),
   Sqn_HN( ~supi, ~idHN, SqnHN, ~sqn_root, count ), Fr( ~RAND ),
   Fr( UP_PRUKID ), Fr( ~Nonce2 ), In( count )
   ]
  --[
  Sqn_HN_Invariance( ~idHN, ~supi, ('1'+SqnHN), ~sqn_root,
                     ('1'+count)
  ),
  Out_HN( <
           KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>, <~RAND, ~supi, ~idHN>),
               <~RSC, Nonce1, ~Nonce2>), 
           ~Nonce2, UP_PRUKID, ~RAND, 
           <(f5(~k, ~RAND)⊕('1'+SqnHN)), f1(~k, <('1'+SqnHN), ~RAND>)>, 
           senc(UP_PRUKID,
                KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                    <~RAND, ~supi, 'GPI_confidentiality'>)), 
           Int(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                   <~RAND, ~supi, 'GPI_integrity'>),
               <~RAND, 
                <(f5(~k, ~RAND)⊕('1'+SqnHN)), f1(~k, <('1'+SqnHN), ~RAND>)>, 
                senc(UP_PRUKID,
                     KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                         <~RAND, ~supi, 'GPI_confidentiality'>))
               >)
          >
  ),
  Start_HN_Session( ~idHN ),
  Secret( <'HN', ~idHN>, 'UPPRUK',
          KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>, <~RAND, ~supi, ~idHN>)
  ),
  Secret( <'HN', ~idHN>, 'UPPRUKID', UP_PRUKID ),
  Secret( <'HN', ~idHN>, 'RSC', ~RSC ),
  Secret( <'HN', ~idHN>, 'supi', ~supi ),
  Secret( <'HN', ~idHN>, 'K_NRp',
          KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>, <~RAND, ~supi, ~idHN>),
              <~RSC, Nonce1, ~Nonce2>)
  ),
  Running( ~idHN, ~supi, <'remote', 'HN', 'RSC', ~RSC> ),
  Running( ~idHN, ~supi,
           <'remote', 'HN', 'UP_PRUK', 
            KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>, <~RAND, ~supi, ~idHN>)>
  ),
  Running( ~idHN, ~supi, <'remote', 'HN', 'UP_PRUKID', UP_PRUKID> ),
  Running( ~idHN, ~supi, <'remote', 'HN', 'supi', ~supi> ),
  Running( ~idHN, idPKMF, <'PKMF', 'HN', 'RSC', ~RSC> ),
  Running( ~idHN, ~supi_relay, <'relay', 'HN', 'RSC', ~RSC> ),
  Running( ~idHN, ~supi_relay,
           <'relay', 'HN', 'UP_PRUKID', UP_PRUKID>
  ),
  Running( ~idHN, ~supi_relay,
           <'relay', 'HN', 'K_NRp', 
            KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>, <~RAND, ~supi, ~idHN>),
                <~RSC, Nonce1, ~Nonce2>)
           >
  ),
  Commit( ~idHN, ~supi, <'HN', 'remote', 'RSC', ~RSC> ),
  Commit( ~idHN, ~supi, <'HN', 'remote', 'supi', ~supi> ),
  Commit( ~idHN, idPKMF, <'HN', 'PKMF', 'RSC', ~RSC> ),
  Honest( ~supi ), Honest( ~supi_relay ), Honest( ~idHN ),
  Honest( idPKMF )
  ]->
   [
   St_1_HN( ~idHN, <aenc(<~supi, ~R>, pk(~sk_HN)), ~idHN>, ~supi,
            ~User_info_relay, ~supi_relay, idPKMF, ~k, ('1'+SqnHN), ~RAND,
            ~sqn_root, ~sk_HN, ~cid, ~RSC, Nonce1,
            KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>, <~RAND, ~supi, ~idHN>),
            UP_PRUKID
   ),
   Sqn_HN( ~supi, ~idHN, ('1'+SqnHN), ~sqn_root, ('1'+count) ),
   SndS( ~cid, ~idHN, idPKMF,
         <'ProseAuthenticateResponse', 
          KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>, <~RAND, ~supi, ~idHN>),
              <~RSC, Nonce1, ~Nonce2>), 
          ~Nonce2, UP_PRUKID, ~RAND, 
          <(f5(~k, ~RAND)⊕('1'+SqnHN)), f1(~k, <('1'+SqnHN), ~RAND>)>, 
          senc(UP_PRUKID,
               KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                   <~RAND, ~supi, 'GPI_confidentiality'>)), 
          Int(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                  <~RAND, ~supi, 'GPI_integrity'>),
              <~RAND, 
               <(f5(~k, ~RAND)⊕('1'+SqnHN)), f1(~k, <('1'+SqnHN), ~RAND>)>, 
               senc(UP_PRUKID,
                    KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                        <~RAND, ~supi, 'GPI_confidentiality'>))
              >)
         >
   )
   ]

  // loop breakers: [1,4]
  /* has exactly the trivial AC variant */

rule (modulo E) PKMF_receive_Nausf_UE_PAResponse_step5:
   [
   St_1_PKMF( transactionid, suci, User_info_relay, ~supi, ~idPKMF,
              supi_relay, idHN, RSC, Nonce1, ~cid
   ),
   RcvS( ~cid, idHN, ~idPKMF,
         <'ProseAuthenticateResponse', K_NRp, ~Nonce2, UP_PRUKID, RAND, 
          AUTN, P_TID, GPI_MAC>
   )
   ]
  --[
  In_PKMF2( <K_NRp, ~Nonce2, UP_PRUKID, RAND, AUTN, P_TID, GPI_MAC>
  ),
  Out_PKMF2( K_NRp, ~Nonce2, UP_PRUKID, <RAND, AUTN, P_TID, GPI_MAC>
  ),
  PKMF_End( ), Secret( <'PKMF', ~idPKMF>, 'UPPRUKID', UP_PRUKID ),
  Secret( <'PKMF', ~idPKMF>, 'RSC', RSC ),
  Secret( <'PKMF', ~idPKMF>, 'K_NRp', K_NRp ),
  Running( ~idPKMF, supi_relay, <'relay', 'PKMF', 'RSC', RSC> ),
  Running( ~idPKMF, supi_relay,
           <'relay', 'PKMF', 'supi_relay', supi_relay>
  ),
  Commit( ~idPKMF, supi_relay, <'PKMF', 'relay', 'RSC', RSC> ),
  Commit( ~idPKMF, supi_relay,
          <'PKMF', 'relay', 'supi_relay', supi_relay>
  ),
  Commit( ~idPKMF, idHN, <'PKMF', 'HN', 'RSC', RSC> ),
  Commit( ~idPKMF, ~supi, <'PKMF', 'remote', 'RSC', RSC> ),
  Honest( ~supi ), Honest( supi_relay ), Honest( idHN ),
  Honest( ~idPKMF )
  ]->
   [
   St_2_PKMF( transactionid, suci, User_info_relay, ~supi, ~idPKMF,
              supi_relay, idHN, RSC, Nonce1, ~cid, RAND
   ),
   SndS( transactionid, ~idPKMF, supi_relay,
         <'relay_auth_request', K_NRp, ~Nonce2, UP_PRUKID, RAND, AUTN, 
          P_TID, GPI_MAC>
   )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) relay_receive_relay_auth_request_step6:
   [
   Fr( ~LSB_KsessID ),
   St_1_relay( ~transactionid, suci, ~supi, ~User_info_relay, ~idPKMF,
               idHN, ~supi_relay, ~RSC, Nonce1, ~SeCap, ~CP_Se_Po, ~MSB_KsessID
   ),
   RcvS( ~transactionid, ~idPKMF, ~supi_relay,
         <'relay_auth_request', K_NRp, ~Nonce2, UP_PRUKID, RAND, AUTN, 
          P_TID, GPI_MAC>
   )
   ]
  --[
  In_relay2( K_NRp, ~Nonce2, UP_PRUKID, <RAND, AUTN, P_TID, GPI_MAC>
  ),
  Commit( ~supi_relay, ~idPKMF, <'relay', 'PKMF', 'RSC', ~RSC> ),
  Commit( ~supi_relay, ~idPKMF,
          <'relay', 'PKMF', 'supi_relay', ~supi_relay>
  ),
  Commit( ~supi_relay, idHN, <'relay', 'HN', 'RSC', ~RSC> ),
  Commit( ~supi_relay, idHN, <'relay', 'HN', 'UP_PRUKID', UP_PRUKID>
  ),
  Commit( ~supi_relay, idHN, <'relay', 'HN', 'K_NRp', K_NRp> ),
  Honest( ~supi ), Honest( ~supi_relay ), Honest( idHN ),
  Honest( ~idPKMF )
  ]->
   [
   St_2_relay( ~transactionid, suci, ~supi, ~User_info_relay, ~idPKMF,
               idHN, ~supi_relay, ~RSC, Nonce1, ~SeCap, ~CP_Se_Po, ~MSB_KsessID,
               RAND, K_NRp, UP_PRUKID, ~Nonce2, KDF(K_NRp, <Nonce1, ~Nonce2>),
               KDF(KDF(K_NRp, <Nonce1, ~Nonce2>),
                   <'0x00', 'confidential_algorithm'>),
               KDF(KDF(K_NRp, <Nonce1, ~Nonce2>),
                   <'0x01', 'integrity_algorithm'>),
               <~LSB_KsessID, ~MSB_KsessID>
   ),
   Out( <'DSMCommand', ~Nonce2, ~CP_Se_Po, ~SeCap, ~LSB_KsessID, 
         <RAND, AUTN, P_TID, GPI_MAC>, 
         KDF(KDF(KDF(K_NRp, <Nonce1, ~Nonce2>),
                 <'0x01', 'integrity_algorithm'>),
             <~CP_Se_Po, ~Nonce2, ~SeCap, ~LSB_KsessID, RAND, AUTN, P_TID, 
              GPI_MAC>)
        >
   )
   ]

  // loop breaker: [2]
  /* has exactly the trivial AC variant */

rule (modulo E) ue_receive_DSMCommand_step7a:
   [
   St_1_UE( ~supi_relay, ~supi, ~User_info_remote, ~User_info_relay,
            ~idHN, ~k, ~sqn_root, ~RSC, Nonce1, ~DUCK, ~DUIK, ~SeCap,
            ~CP_Se_Po, ~UP_Se_Po, ~MSB_KsessID
   ),
   Sqn_UE( ~supi, ~idHN, SqnUE, ~sqn_root, count ), !PKMF( idPKMF ),
   In( <'DSMCommand', ~Nonce2, ~CP_Se_Po, ~SeCap, ~LSB_KsessID, 
        <RAND, <(f5(~k, RAND)⊕(SqnUE+dif)), f1(~k, <(SqnUE+dif), RAND>)>, 
         senc(UP_PRUKID,
              KDF(<f3(~k, RAND), f4(~k, RAND)>,
                  <RAND, ~supi, 'GPI_confidentiality'>)), 
         Int(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                 <RAND, ~supi, 'GPI_integrity'>),
             <RAND, <(f5(~k, RAND)⊕(SqnUE+dif)), f1(~k, <(SqnUE+dif), RAND>)>, 
              senc(UP_PRUKID,
                   KDF(<f3(~k, RAND), f4(~k, RAND)>,
                       <RAND, ~supi, 'GPI_confidentiality'>))
             >)
        >, 
        KDF(KDF(KDF(KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                            <RAND, ~supi, ~idHN>),
                        <~RSC, Nonce1, ~Nonce2>),
                    <Nonce1, ~Nonce2>),
                <'0x01', 'integrity_algorithm'>),
            <~CP_Se_Po, ~Nonce2, ~SeCap, ~LSB_KsessID, RAND, 
             <(f5(~k, RAND)⊕(SqnUE+dif)), f1(~k, <(SqnUE+dif), RAND>)>, 
             senc(UP_PRUKID,
                  KDF(<f3(~k, RAND), f4(~k, RAND)>,
                      <RAND, ~supi, 'GPI_confidentiality'>)), 
             Int(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                     <RAND, ~supi, 'GPI_integrity'>),
                 <RAND, <(f5(~k, RAND)⊕(SqnUE+dif)), f1(~k, <(SqnUE+dif), RAND>)>, 
                  senc(UP_PRUKID,
                       KDF(<f3(~k, RAND), f4(~k, RAND)>,
                           <RAND, ~supi, 'GPI_confidentiality'>))
                 >)
            >)
       >
   )
   ]
  --[
  Sqn_UE_Invariance( ~supi, ~idHN, (SqnUE+dif), ~sqn_root,
                     (count+dif)
  ),
  Sqn_UE_Change( ~supi, ~idHN, (SqnUE+dif) ),
  Sqn_UE_Use( ~supi, ~idHN, (SqnUE+dif) ),
  Running( ~supi, ~supi_relay,
           <'relay', 'remote', 'UP_PRUKID', UP_PRUKID>
  ),
  Running( ~supi, ~supi_relay,
           <'relay', 'remote', 'K_NRp', 
            KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>, <RAND, ~supi, ~idHN>),
                <~RSC, Nonce1, ~Nonce2>)
           >
  ),
  Running( ~supi, ~supi_relay, <'relay', 'remote', 'RSC', ~RSC> ),
  Running( ~supi, ~supi_relay,
           <'relay', 'remote', 'K_sessID', ~LSB_KsessID, ~MSB_KsessID>
  ),
  Running( ~supi, ~supi_relay,
           <'relay', 'remote', 'K_relay_sess', 
            KDF(KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>, <RAND, ~supi, ~idHN>),
                    <~RSC, Nonce1, ~Nonce2>),
                <Nonce1, ~Nonce2>)
           >
  ),
  Running( ~supi, ~supi_relay,
           <'relay', 'remote', 'K_relay_enc', 
            KDF(KDF(KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                            <RAND, ~supi, ~idHN>),
                        <~RSC, Nonce1, ~Nonce2>),
                    <Nonce1, ~Nonce2>),
                <'0x00', 'confidential_algorithm'>)
           >
  ),
  Running( ~supi, ~supi_relay,
           <'relay', 'remote', 'K_relay_int', 
            KDF(KDF(KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                            <RAND, ~supi, ~idHN>),
                        <~RSC, Nonce1, ~Nonce2>),
                    <Nonce1, ~Nonce2>),
                <'0x01', 'integrity_algorithm'>)
           >
  ),
  Running( ~supi, ~supi_relay, <'relay', 'remote', 'SeCap', ~SeCap>
  ),
  Running( ~supi, ~supi_relay,
           <'relay', 'remote', 'CPsecurity_policy', ~CP_Se_Po>
  ),
  Running( ~supi, ~supi_relay,
           <'relay', 'remote', 'UPsecurity_policy', ~UP_Se_Po>
  ),
  Honest( ~supi ), Honest( ~supi_relay ), Honest( ~idHN ),
  Honest( idPKMF )
  ]->
   [
   St_2_UE( ~supi_relay, ~supi, ~User_info_remote, ~User_info_relay,
            ~idHN, ~k, ~sqn_root, ~RSC, Nonce1, ~DUCK, ~DUIK, ~SeCap,
            ~CP_Se_Po, ~UP_Se_Po, ~MSB_KsessID, idPKMF,
            KDF(<f3(~k, RAND), f4(~k, RAND)>, <RAND, ~supi, ~idHN>), UP_PRUKID,
            KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>, <RAND, ~supi, ~idHN>),
                <~RSC, Nonce1, ~Nonce2>),
            ~Nonce2,
            KDF(KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>, <RAND, ~supi, ~idHN>),
                    <~RSC, Nonce1, ~Nonce2>),
                <Nonce1, ~Nonce2>),
            KDF(KDF(KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                            <RAND, ~supi, ~idHN>),
                        <~RSC, Nonce1, ~Nonce2>),
                    <Nonce1, ~Nonce2>),
                <'0x00', 'confidential_algorithm'>),
            KDF(KDF(KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                            <RAND, ~supi, ~idHN>),
                        <~RSC, Nonce1, ~Nonce2>),
                    <Nonce1, ~Nonce2>),
                <'0x01', 'integrity_algorithm'>),
            <~LSB_KsessID, ~MSB_KsessID>
   ),
   Out( <'DSMComplete', <~LSB_KsessID, ~MSB_KsessID>, 
         senc(<~UP_Se_Po, 
               Int(KDF(KDF(KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                                   <RAND, ~supi, ~idHN>),
                               <~RSC, Nonce1, ~Nonce2>),
                           <Nonce1, ~Nonce2>),
                       <'0x01', 'integrity_algorithm'>),
                   <~UP_Se_Po, ~LSB_KsessID, ~MSB_KsessID>)
              >,
              KDF(KDF(KDF(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                              <RAND, ~supi, ~idHN>),
                          <~RSC, Nonce1, ~Nonce2>),
                      <Nonce1, ~Nonce2>),
                  <'0x00', 'confidential_algorithm'>))
        >
   ),
   Sqn_UE( ~supi, ~idHN, (SqnUE+dif), ~sqn_root, (count+dif) )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) relay_receive_DSMComplete_step8a:
   [
   St_2_relay( ~transactionid, suci, ~supi, ~User_info_relay, ~idPKMF,
               idHN, ~supi_relay, ~RSC, Nonce1, ~SeCap, ~CP_Se_Po, ~MSB_KsessID,
               RAND, K_NRp, UP_PRUKID, ~Nonce2, K_relay_sess, K_relay_enc,
               K_relay_int, KsessID
   ),
   In( <'DSMComplete', KsessID, 
        senc(<~UP_Se_Po, Int(K_relay_int, <~UP_Se_Po, KsessID>)>,
             K_relay_enc)
       >
   )
   ]
  --[
  Commit( ~supi_relay, ~supi,
          <'relay', 'remote', 'UP_PRUKID', UP_PRUKID>
  ),
  Commit( ~supi_relay, ~supi, <'relay', 'remote', 'K_NRp', K_NRp> ),
  Commit( ~supi_relay, ~supi, <'relay', 'remote', 'RSC', ~RSC> ),
  Commit( ~supi_relay, ~supi,
          <'relay', 'remote', 'K_sessID', KsessID>
  ),
  Commit( ~supi_relay, ~supi,
          <'relay', 'remote', 'K_relay_sess', K_relay_sess>
  ),
  Commit( ~supi_relay, ~supi,
          <'relay', 'remote', 'K_relay_enc', K_relay_enc>
  ),
  Commit( ~supi_relay, ~supi,
          <'relay', 'remote', 'K_relay_int', K_relay_int>
  ),
  Commit( ~supi_relay, ~supi, <'relay', 'remote', 'SeCap', ~SeCap> ),
  Commit( ~supi_relay, ~supi,
          <'relay', 'remote', 'CPsecurity_policy', ~CP_Se_Po>
  ),
  Commit( ~supi_relay, ~supi,
          <'relay', 'remote', 'UPsecurity_policy', ~UP_Se_Po>
  ),
  Secret( <'relay', ~supi_relay>, 'K_relay_sess', K_relay_sess ),
  Secret( <'relay', ~supi_relay>, 'K_relay_enc', K_relay_enc ),
  Secret( <'relay', ~supi_relay>, 'K_relay_int', K_relay_int ),
  Secret( <'relay', ~supi_relay>, 'UPPRUKID', UP_PRUKID ),
  Secret( <'relay', ~supi_relay>, 'RSC', ~RSC ),
  Secret( <'relay', ~supi_relay>, 'K_NRp', K_NRp ),
  Running( ~supi_relay, ~supi,
           <'remote', 'relay', 'UPsecurity_policy', ~UP_Se_Po>
  ),
  Running( ~supi_relay, ~supi,
           <'remote', 'relay', 'K_sessID', KsessID>
  ),
  Running( ~supi_relay, ~supi,
           <'remote', 'relay', 'K_relay_sess', K_relay_sess>
  ),
  Running( ~supi_relay, ~supi,
           <'remote', 'relay', 'K_relay_enc', K_relay_enc>
  ),
  Running( ~supi_relay, ~supi,
           <'remote', 'relay', 'K_relay_int', K_relay_int>
  ),
  Running( ~supi_relay, ~supi,
           <'remote', 'relay', 'UP_PRUKID', UP_PRUKID>
  ),
  Running( ~supi_relay, ~supi, <'remote', 'relay', 'K_NRp', K_NRp> ),
  Running( ~supi_relay, ~supi, <'remote', 'relay', 'RSC', ~RSC> ),
  Running( ~supi_relay, ~supi, <'remote', 'relay', 'SeCap', ~SeCap>
  ),
  Running( ~supi_relay, ~supi,
           <'remote', 'relay', 'CPsecurity_policy', ~CP_Se_Po>
  ),
  Honest( ~supi ), Honest( ~supi_relay ), Honest( idHN ),
  Honest( ~idPKMF )
  ]->
   [
   Out( <'DCA', KsessID, 
         senc(<~User_info_relay, 
               Int(K_relay_int, <~User_info_relay, KsessID>)>,
              K_relay_enc)
        >
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) ue_receive_DCA_step9:
   [
   St_2_UE( ~supi_relay, ~supi, ~User_info_remote, ~User_info_relay,
            ~idHN, ~k, ~sqn_root, ~RSC, ~Nonce1, ~DUCK, ~DUIK, ~SeCap,
            ~CP_Se_Po, ~UP_Se_Po, ~MSB_KsessID, idPKMF, UP_PRUK, UP_PRUKID,
            K_NRp, ~Nonce2, K_relay_sess, K_relay_enc, K_relay_int, KsessID
   ),
   In( <'DCA', KsessID, 
        senc(<~User_info_relay, 
              Int(K_relay_int, <~User_info_relay, KsessID>)>,
             K_relay_enc)
       >
   )
   ]
  --[
  UE_End( ),
  Secret( <'remote', ~supi>, 'K_relay_sess', K_relay_sess ),
  Secret( <'remote', ~supi>, 'K_relay_enc', K_relay_enc ),
  Secret( <'remote', ~supi>, 'K_relay_int', K_relay_int ),
  Secret( <'remote', ~supi>, 'UPPRUKID', UP_PRUKID ),
  Secret( <'remote', ~supi>, 'UPPRUK', UP_PRUK ),
  Secret( <'remote', ~supi>, 'supi', ~supi ),
  Secret( <'remote', ~supi>, 'RSC', ~RSC ),
  Secret( <'remote', ~supi>, 'K_NRp', K_NRp ),
  Commit( ~supi, ~supi_relay,
          <'remote', 'relay', 'K_sessID', KsessID>
  ),
  Commit( ~supi, ~supi_relay,
          <'remote', 'relay', 'K_relay_sess', K_relay_sess>
  ),
  Commit( ~supi, ~supi_relay,
          <'remote', 'relay', 'K_relay_enc', K_relay_enc>
  ),
  Commit( ~supi, ~supi_relay,
          <'remote', 'relay', 'K_relay_int', K_relay_int>
  ),
  Commit( ~supi, ~supi_relay,
          <'remote', 'relay', 'UP_PRUKID', UP_PRUKID>
  ),
  Commit( ~supi, ~supi_relay, <'remote', 'relay', 'K_NRp', K_NRp> ),
  Commit( ~supi, ~supi_relay, <'remote', 'relay', 'RSC', ~RSC> ),
  Commit( ~supi, ~supi_relay, <'remote', 'relay', 'SeCap', ~SeCap> ),
  Commit( ~supi, ~supi_relay,
          <'remote', 'relay', 'CPsecurity_policy', ~CP_Se_Po>
  ),
  Commit( ~supi, ~supi_relay,
          <'remote', 'relay', 'UPsecurity_policy', ~UP_Se_Po>
  ),
  Commit( ~supi, ~idHN, <'remote', 'HN', 'RSC', ~RSC> ),
  Commit( ~supi, ~idHN, <'remote', 'HN', 'supi', ~supi> ),
  Commit( ~supi, ~idHN, <'remote', 'HN', 'UP_PRUK', UP_PRUK> ),
  Commit( ~supi, ~idHN, <'remote', 'HN', 'UP_PRUKID', UP_PRUKID> ),
  Honest( ~supi ), Honest( ~supi_relay ), Honest( ~idHN ),
  Honest( idPKMF ), Remote_EndConf( )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) ue_Direct_Security_Mode_Failure_step7b:
   [
   St_1_UE( ~supi_relay, ~supi, ~User_info_remote, ~User_info_relay,
            ~idHN, ~k, ~sqn_root, ~RSC, ~Nonce1, ~DUCK, ~DUIK, ~SeCap,
            ~CP_Se_Po, ~UP_Se_Po, ~MSB_KsessID
   ),
   Sqn_UE( ~supi, ~idHN, SqnUE, ~sqn_root, count ),
   In( <'DSMCommand', ~Nonce2, ~CP_Se_Po, ~SeCap, ~LSB_KsessID, 
        <RAND, <(SqnHN⊕f5(~k, RAND)), f1(~k, <SqnHN, RAND>)>, 
         senc(UP_PRUKID,
              KDF(<f3(~k, RAND), f4(~k, RAND)>,
                  <RAND, ~supi, 'GPI_confidentiality'>)), 
         Int(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                 <RAND, ~supi, 'GPI_integrity'>),
             <RAND, <(SqnHN⊕f5(~k, RAND)), f1(~k, <SqnHN, RAND>)>, 
              senc(UP_PRUKID,
                   KDF(<f3(~k, RAND), f4(~k, RAND)>,
                       <RAND, ~supi, 'GPI_confidentiality'>))
             >)
        >, 
        KDF(K_relay_int,
            <~CP_Se_Po, ~Nonce2, ~SeCap, ~LSB_KsessID, RAND, 
             <(SqnHN⊕f5(~k, RAND)), f1(~k, <SqnHN, RAND>)>, 
             senc(UP_PRUKID,
                  KDF(<f3(~k, RAND), f4(~k, RAND)>,
                      <RAND, ~supi, 'GPI_confidentiality'>)), 
             Int(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                     <RAND, ~supi, 'GPI_integrity'>),
                 <RAND, <(SqnHN⊕f5(~k, RAND)), f1(~k, <SqnHN, RAND>)>, 
                  senc(UP_PRUKID,
                       KDF(<f3(~k, RAND), f4(~k, RAND)>,
                           <RAND, ~supi, 'GPI_confidentiality'>))
                 >)
            >)
       >
   ),
   In( count )
   ]
  --[
  Greater_Or_Equal_Than( SqnUE, SqnHN ),
  Sqn_UE_Invariance( ~supi, ~idHN, SqnUE, ~sqn_root, count ),
  Sqn_UE_Nochange( ~supi, ~idHN, SqnUE )
  ]->
   [
   Out( <RAND, (SqnUE⊕f5_star(~k, RAND)), f1_star(~k, <SqnUE, RAND>)>
   ),
   Sqn_UE( ~supi, ~idHN, SqnUE, ~sqn_root, count )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) ue_Direct_Security_Mode_Failure_step7b:
     [
     St_1_UE( ~supi_relay, ~supi, ~User_info_remote, ~User_info_relay,
              ~idHN, ~k, ~sqn_root, ~RSC, ~Nonce1, ~DUCK, ~DUIK, ~SeCap,
              ~CP_Se_Po, ~UP_Se_Po, ~MSB_KsessID
     ),
     Sqn_UE( ~supi, ~idHN, SqnUE, ~sqn_root, count ),
     In( <'DSMCommand', ~Nonce2, ~CP_Se_Po, ~SeCap, ~LSB_KsessID, 
          <RAND, <z, f1(~k, <SqnHN, RAND>)>, 
           senc(UP_PRUKID,
                KDF(<f3(~k, RAND), f4(~k, RAND)>,
                    <RAND, ~supi, 'GPI_confidentiality'>)), 
           Int(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                   <RAND, ~supi, 'GPI_integrity'>),
               <RAND, <z, f1(~k, <SqnHN, RAND>)>, 
                senc(UP_PRUKID,
                     KDF(<f3(~k, RAND), f4(~k, RAND)>,
                         <RAND, ~supi, 'GPI_confidentiality'>))
               >)
          >, 
          KDF(K_relay_int,
              <~CP_Se_Po, ~Nonce2, ~SeCap, ~LSB_KsessID, RAND, 
               <z, f1(~k, <SqnHN, RAND>)>, 
               senc(UP_PRUKID,
                    KDF(<f3(~k, RAND), f4(~k, RAND)>,
                        <RAND, ~supi, 'GPI_confidentiality'>)), 
               Int(KDF(<f3(~k, RAND), f4(~k, RAND)>,
                       <RAND, ~supi, 'GPI_integrity'>),
                   <RAND, <z, f1(~k, <SqnHN, RAND>)>, 
                    senc(UP_PRUKID,
                         KDF(<f3(~k, RAND), f4(~k, RAND)>,
                             <RAND, ~supi, 'GPI_confidentiality'>))
                   >)
              >)
         >
     ),
     In( count )
     ]
    --[
    Greater_Or_Equal_Than( SqnUE, SqnHN ),
    Sqn_UE_Invariance( ~supi, ~idHN, SqnUE, ~sqn_root, count ),
    Sqn_UE_Nochange( ~supi, ~idHN, SqnUE )
    ]->
     [
     Out( <RAND, z.1, f1_star(~k, <SqnUE, RAND>)> ),
     Sqn_UE( ~supi, ~idHN, SqnUE, ~sqn_root, count )
     ]
    variants (modulo AC)
     1. ~k    = ~k.35
        RAND  = RAND.40
        SqnHN = f5(~k.35, RAND.40)
        SqnUE = f5_star(~k.35, RAND.40)
        z     = zero
        z.1   = zero
    
     2. ~k    = ~k.35
        RAND  = RAND.40
        SqnHN = f5(~k.35, RAND.40)
        SqnUE = zero
        z     = zero
        z.1   = f5_star(~k.35, RAND.40)
    
     3. ~k    = ~k.35
        RAND  = RAND.40
        SqnHN = zero
        SqnUE = f5_star(~k.35, RAND.40)
        z     = f5(~k.35, RAND.40)
        z.1   = zero
    
     4. ~k    = ~k.35
        RAND  = RAND.40
        SqnHN = zero
        SqnUE = zero
        z     = f5(~k.35, RAND.40)
        z.1   = f5_star(~k.35, RAND.40)
    
     5. ~k    = ~k.36
        RAND  = RAND.41
        SqnHN = SqnHN.42
        SqnUE = f5_star(~k.36, RAND.41)
        z     = (SqnHN.42⊕f5(~k.36, RAND.41))
        z.1   = zero
    
     6. ~k    = ~k.36
        RAND  = RAND.41
        SqnHN = SqnHN.42
        SqnUE = zero
        z     = (SqnHN.42⊕f5(~k.36, RAND.41))
        z.1   = f5_star(~k.36, RAND.41)
    
     7. ~k    = ~k.37
        RAND  = RAND.42
        SqnHN = SqnHN.43
        SqnUE = SqnUE.44
        z     = (SqnHN.43⊕f5(~k.37, RAND.42))
        z.1   = (SqnUE.44⊕f5_star(~k.37, RAND.42))
    
     8. ~k    = ~k.37
        RAND  = RAND.42
        SqnHN = f5(~k.37, RAND.42)
        SqnUE = SqnUE.44
        z     = zero
        z.1   = (SqnUE.44⊕f5_star(~k.37, RAND.42))
    
     9. ~k    = ~k.37
        RAND  = RAND.42
        SqnHN = zero
        SqnUE = SqnUE.44
        z     = f5(~k.37, RAND.42)
        z.1   = (SqnUE.44⊕f5_star(~k.37, RAND.42))
    
    10. ~k    = ~k.41
        RAND  = RAND.46
        SqnHN = (z.52⊕f5(~k.41, RAND.46))
        SqnUE = SqnUE.48
        z     = z.52
        z.1   = (SqnUE.48⊕f5_star(~k.41, RAND.46))
    
    11. ~k    = ~k.41
        RAND  = RAND.46
        SqnHN = (z.52⊕f5(~k.41, RAND.46))
        SqnUE = f5_star(~k.41, RAND.46)
        z     = z.52
        z.1   = zero
    
    12. ~k    = ~k.41
        RAND  = RAND.46
        SqnHN = (z.52⊕f5(~k.41, RAND.46))
        SqnUE = zero
        z     = z.52
        z.1   = f5_star(~k.41, RAND.46)
    
    13. ~k    = ~k.44
        RAND  = RAND.49
        SqnHN = SqnHN.50
        SqnUE = (z.58⊕f5_star(~k.44, RAND.49))
        z     = (SqnHN.50⊕f5(~k.44, RAND.49))
        z.1   = z.58
    
    14. ~k    = ~k.44
        RAND  = RAND.49
        SqnHN = f5(~k.44, RAND.49)
        SqnUE = (z.58⊕f5_star(~k.44, RAND.49))
        z     = zero
        z.1   = z.58
    
    15. ~k    = ~k.44
        RAND  = RAND.49
        SqnHN = zero
        SqnUE = (z.58⊕f5_star(~k.44, RAND.49))
        z     = f5(~k.44, RAND.49)
        z.1   = z.58
    
    16. ~k    = ~k.44
        RAND  = RAND.49
        SqnHN = (z.55⊕f5(~k.44, RAND.49))
        SqnUE = (z.58⊕f5_star(~k.44, RAND.49))
        z     = z.55
        z.1   = z.58
    // loop breaker: [1]
  */

rule (modulo E) relay_receive_syncFailure_authResp_step8b:
   [
   St_2_relay( ~transactionid, suci, ~supi, ~User_info_relay, ~idPKMF,
               idHN, ~supi_relay, RSC, Nonce1, ~SeCap, ~CP_Se_Po, ~MSB_KsessID,
               RAND, K_NRp, UP_PRUKID, ~Nonce2, K_relay_sess, K_relay_enc,
               K_relay_int, KsessID
   ),
   In( <RAND, AUTS> )
   ]
  --[ Out_relay5( idHN, suci, RSC, Nonce1, RAND, AUTS ) ]->
   [
   SndS( ~transactionid, ~supi_relay, ~idPKMF,
         <'resync', idHN, suci, RSC, Nonce1, RAND, AUTS>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) PKMF_receive_syncFailure_send_authSync_step9b:
   [
   St_2_PKMF( transactionid, suci, User_info_relay, ~supi, ~idPKMF,
              supi_relay, idHN, RSC, Nonce1, ~cid, RAND
   ),
   RcvS( transactionid, supi_relay, ~idPKMF,
         <'resync', idHN, suci, RSC, Nonce1, RAND, AUTS>
   )
   ]
  --[ In_PKMF5( idHN, suci, RSC, Nonce1, RAND, AUTS ) ]->
   [
   SndS( ~cid, ~idPKMF, idHN,
         <'resync', idHN, suci, RSC, Nonce1, RAND, AUTS>
   )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) HN_receive_authSync_step10b:
   [
   St_1_HN( ~idHN, suci, ~supi, ~User_info_relay, ~supi_relay, idPKMF,
            ~k, SqnNext, ~RAND, ~sqn_root, ~sk_HN, ~cid, ~RSC, Nonce1, UP_PRUK,
            UP_PRUKID
   ),
   Sqn_HN( ~supi, ~idHN, SqnHN, ~sqn_root, count ),
   RcvS( ~cid, idPKMF, ~idHN,
         <'resync', ~idHN, suci, ~RSC, Nonce1, ~RAND, 
          (f5_star(~k, ~RAND)⊕(SqnHN+dif)), f1_star(~k, <(SqnHN+dif), ~RAND>)
         >
   ),
   In( (count+dif) )
   ]
  --[
  Sqn_HN_Invariance( ~idHN, ~supi, (SqnHN+dif), ~sqn_root,
                     (count+dif)
  ),
  HN_Resync_End( (count+dif) )
  ]->
   [ Sqn_HN( ~supi, ~idHN, (SqnHN+dif), ~sqn_root, (count+dif) ) ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

restriction subscribe_once:
  "∀ HN1 HN2 supi #i #j.
    ((Subscribe( supi, HN1 ) @ #i) ∧ (Subscribe( supi, HN2 ) @ #j)) ⇒
    ((#i = #j) ∧ (HN1 = HN2))"
  // safety formula

restriction greater_or_equal_than:
  "∀ x y #i.
    (Greater_Or_Equal_Than( x, y ) @ #i) ⇒ (¬(∃ z. (x+z) = y))"
  // safety formula

lemma dummy:
  all-traces "¬(⊥)"
/*
guarded formula characterizing all counter-examples:
"⊥"
*/
by sorry

lemma src_1 [sources]:
  all-traces
  "∀ transactionid suci RSC Nonce1 #i.
    (In_PKMF( transactionid, suci, RSC, Nonce1 ) @ #i) ⇒
    ((∃ #j.
       (Out_relay( transactionid, suci, RSC, Nonce1 ) @ #j) ∧ (#j < #i)) ∨
     (∃ #j.
       (Injected( <'relaykeyrequest', transactionid, suci, RSC, Nonce1>
        ) @ #j) ∧
       (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ transactionid suci RSC Nonce1 #i.
  (In_PKMF( transactionid, suci, RSC, Nonce1 ) @ #i)
 ∧
  (∀ #j.
    (Out_relay( transactionid, suci, RSC, Nonce1 ) @ #j)
   ⇒
    ¬(#j < #i)) ∧
  (∀ #j.
    (Injected( <'relaykeyrequest', transactionid, suci, RSC, Nonce1>
     ) @ #j)
   ⇒
    ¬(#j < #i))"
*/
by sorry

lemma src_2 [sources]:
  all-traces
  "∀ K_NRp Nonce2 UP_PRUKID RAND AUTN P_TID GPI_MAC #i.
    (In_PKMF2( <K_NRp, Nonce2, UP_PRUKID, RAND, AUTN, P_TID, GPI_MAC>
     ) @ #i) ⇒
    ((∃ #j.
       (Out_HN( <K_NRp, Nonce2, UP_PRUKID, RAND, AUTN, P_TID, GPI_MAC>
        ) @ #j) ∧
       (#j < #i)) ∨
     (∃ #j.
       (Injected( <'ProseAuthenticateResponse', K_NRp, Nonce2, UP_PRUKID, 
                   RAND, AUTN, P_TID, GPI_MAC>
        ) @ #j) ∧
       (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ K_NRp Nonce2 UP_PRUKID RAND AUTN P_TID GPI_MAC #i.
  (In_PKMF2( <K_NRp, Nonce2, UP_PRUKID, RAND, AUTN, P_TID, GPI_MAC>
   ) @ #i)
 ∧
  (∀ #j.
    (Out_HN( <K_NRp, Nonce2, UP_PRUKID, RAND, AUTN, P_TID, GPI_MAC>
     ) @ #j)
   ⇒
    ¬(#j < #i)) ∧
  (∀ #j.
    (Injected( <'ProseAuthenticateResponse', K_NRp, Nonce2, UP_PRUKID, 
                RAND, AUTN, P_TID, GPI_MAC>
     ) @ #j)
   ⇒
    ¬(#j < #i))"
*/
by sorry

lemma src_3 [sources]:
  all-traces
  "∀ K_NRp Nonce2 UP_PRUKID RAND AUTN P_TID GPI_MAC #i.
    (In_relay2( K_NRp, Nonce2, UP_PRUKID, <RAND, AUTN, P_TID, GPI_MAC>
     ) @ #i) ⇒
    ((∃ #j.
       (Out_PKMF2( K_NRp, Nonce2, UP_PRUKID, <RAND, AUTN, P_TID, GPI_MAC>
        ) @ #j) ∧
       (#j < #i)) ∨
     (∃ #j.
       (Injected( <'relay_auth_request', K_NRp, Nonce2, UP_PRUKID, RAND, 
                   AUTN, P_TID, GPI_MAC>
        ) @ #j) ∧
       (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ K_NRp Nonce2 UP_PRUKID RAND AUTN P_TID GPI_MAC #i.
  (In_relay2( K_NRp, Nonce2, UP_PRUKID, <RAND, AUTN, P_TID, GPI_MAC>
   ) @ #i)
 ∧
  (∀ #j.
    (Out_PKMF2( K_NRp, Nonce2, UP_PRUKID, <RAND, AUTN, P_TID, GPI_MAC>
     ) @ #j)
   ⇒
    ¬(#j < #i)) ∧
  (∀ #j.
    (Injected( <'relay_auth_request', K_NRp, Nonce2, UP_PRUKID, RAND, 
                AUTN, P_TID, GPI_MAC>
     ) @ #j)
   ⇒
    ¬(#j < #i))"
*/
by sorry

lemma src_4 [sources]:
  all-traces
  "∀ idHN suci RSC Nonce1 RAND AUTS #i.
    (In_PKMF5( idHN, suci, RSC, Nonce1, RAND, AUTS ) @ #i) ⇒
    ((∃ #j.
       (Out_relay5( idHN, suci, RSC, Nonce1, RAND, AUTS ) @ #j) ∧
       (#j < #i)) ∨
     (∃ #j.
       (Injected( <'resync', idHN, suci, RSC, Nonce1, RAND, AUTS>
        ) @ #j) ∧
       (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ idHN suci RSC Nonce1 RAND AUTS #i.
  (In_PKMF5( idHN, suci, RSC, Nonce1, RAND, AUTS ) @ #i)
 ∧
  (∀ #j.
    (Out_relay5( idHN, suci, RSC, Nonce1, RAND, AUTS ) @ #j)
   ⇒
    ¬(#j < #i)) ∧
  (∀ #j.
    (Injected( <'resync', idHN, suci, RSC, Nonce1, RAND, AUTS> ) @ #j)
   ⇒
    ¬(#j < #i))"
*/
by sorry

lemma sqn_ue_invariance [use_induction, sources]:
  all-traces
  "∀ supi HN Sqn sqn_root count #i.
    (Sqn_UE_Invariance( supi, HN, Sqn, sqn_root, count ) @ #i) ⇒
    ((count+sqn_root) = Sqn)"
/*
guarded formula characterizing all counter-examples:
"∃ supi HN Sqn sqn_root count #i.
  (Sqn_UE_Invariance( supi, HN, Sqn, sqn_root, count ) @ #i)
 ∧
  ¬((count+sqn_root) = Sqn)"
*/
by sorry

lemma sqn_HN_invariance [use_induction, sources]:
  all-traces
  "∀ HN supi Sqn sqn_root count #i.
    (Sqn_HN_Invariance( HN, supi, Sqn, sqn_root, count ) @ #i) ⇒
    ((count+sqn_root) = Sqn)"
/*
guarded formula characterizing all counter-examples:
"∃ HN supi Sqn sqn_root count #i.
  (Sqn_HN_Invariance( HN, supi, Sqn, sqn_root, count ) @ #i)
 ∧
  ¬((count+sqn_root) = Sqn)"
*/
by sorry

lemma sqn_ue_src [use_induction, reuse]:
  all-traces
  "∀ supi HN Sqn sqn_root count #i.
    (Sqn_UE_Invariance( supi, HN, Sqn, sqn_root, count ) @ #i) ⇒
    (∃ #j. (Sqn_Create( supi, HN, sqn_root ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ supi HN Sqn sqn_root count #i.
  (Sqn_UE_Invariance( supi, HN, Sqn, sqn_root, count ) @ #i)
 ∧
  ∀ #j. (Sqn_Create( supi, HN, sqn_root ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

lemma sqn_HN_src [reuse]:
  all-traces
  "∀ HN supi Sqn sqn_root count #i.
    (Sqn_HN_Invariance( HN, supi, Sqn, sqn_root, count ) @ #i) ⇒
    (∃ #j. (Sqn_Create( supi, HN, sqn_root ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ HN supi Sqn sqn_root count #i.
  (Sqn_HN_Invariance( HN, supi, Sqn, sqn_root, count ) @ #i)
 ∧
  ∀ #j. (Sqn_Create( supi, HN, sqn_root ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

lemma sqn_ue_nodecrease [use_induction, reuse]:
  all-traces
  "(((∀ supi HN Sqni Sqnj #i #j.
       (((Sqn_UE_Change( supi, HN, Sqnj ) @ #j) ∧
         (Sqn_UE_Change( supi, HN, Sqni ) @ #i)) ∧
        (#i < #j)) ⇒
       (∃ dif. Sqnj = (Sqni+dif))) ∧
     (∀ supi HN Sqni Sqnj #i #j.
       (((Sqn_UE_Change( supi, HN, Sqnj ) @ #j) ∧
         (Sqn_UE_Nochange( supi, HN, Sqni ) @ #i)) ∧
        (#i < #j)) ⇒
       (∃ dif. Sqnj = (Sqni+dif)))) ∧
    (∀ supi HN Sqni Sqnj #i #j.
      (((Sqn_UE_Nochange( supi, HN, Sqnj ) @ #j) ∧
        (Sqn_UE_Change( supi, HN, Sqni ) @ #i)) ∧
       (#i < #j)) ⇒
      ((Sqnj = Sqni) ∨ (∃ dif. Sqnj = (Sqni+dif))))) ∧
   (∀ supi HN Sqni Sqnj #i #j.
     (((Sqn_UE_Nochange( supi, HN, Sqnj ) @ #j) ∧
       (Sqn_UE_Nochange( supi, HN, Sqni ) @ #i)) ∧
      (#i < #j)) ⇒
     ((Sqnj = Sqni) ∨ (∃ dif. Sqnj = (Sqni+dif))))"
/*
guarded formula characterizing all counter-examples:
"((∃ supi HN Sqni Sqnj #i #j.
    (Sqn_UE_Change( supi, HN, Sqnj ) @ #j) ∧
    (Sqn_UE_Change( supi, HN, Sqni ) @ #i)
   ∧
    (#i < #j) ∧ (∀ dif. (Sqnj = (Sqni+dif)) ⇒ ⊥)) ∨
  (∃ supi HN Sqni Sqnj #i #j.
    (Sqn_UE_Change( supi, HN, Sqnj ) @ #j) ∧
    (Sqn_UE_Nochange( supi, HN, Sqni ) @ #i)
   ∧
    (#i < #j) ∧ (∀ dif. (Sqnj = (Sqni+dif)) ⇒ ⊥)) ∨
  (∃ supi HN Sqni Sqnj #i #j.
    (Sqn_UE_Nochange( supi, HN, Sqnj ) @ #j) ∧
    (Sqn_UE_Change( supi, HN, Sqni ) @ #i)
   ∧
    (#i < #j) ∧ (¬(Sqnj = Sqni)) ∧ (∀ dif. (Sqnj = (Sqni+dif)) ⇒ ⊥)) ∨
  (∃ supi HN Sqni Sqnj #i #j.
    (Sqn_UE_Nochange( supi, HN, Sqnj ) @ #j) ∧
    (Sqn_UE_Nochange( supi, HN, Sqni ) @ #i)
   ∧
    (#i < #j) ∧ (¬(Sqnj = Sqni)) ∧ (∀ dif. (Sqnj = (Sqni+dif)) ⇒ ⊥)))"
*/
by sorry

lemma sqn_ue_unique [reuse, hide_lemma=sqn_ue_src,
                     hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi HN Sqn #i #j.
    ((Sqn_UE_Use( supi, HN, Sqn ) @ #i) ∧
     (Sqn_UE_Use( supi, HN, Sqn ) @ #j)) ⇒
    (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ supi HN Sqn #i #j.
  (Sqn_UE_Use( supi, HN, Sqn ) @ #i) ∧
  (Sqn_UE_Use( supi, HN, Sqn ) @ #j)
 ∧
  ¬(#i = #j)"
*/
by sorry

lemma executability_honest:
  exists-trace
  "∃ #i.
    (((((((((Remote_EndConf( ) @ #i) ∧
            (¬(∃ X data #r. Rev( X, data ) @ #r))) ∧
           (∀ HN1 HN2 #j #k.
             ((HomeNet( HN1 ) @ #j) ∧ (HomeNet( HN2 ) @ #k)) ⇒ (#j = #k))) ∧
          (∀ S1 S2 HN1 HN2 #j #k.
            ((Subscribe( S1, HN1 ) @ #j) ∧ (Subscribe( S2, HN2 ) @ #k)) ⇒
            (#j = #k))) ∧
         (∀ PKMF1 PKMF2 #j #k.
           ((PKMF_relay( PKMF1 ) @ #j) ∧ (PKMF_relay( PKMF2 ) @ #k)) ⇒
           (#j = #k))) ∧
        (∀ relay1 relay2 #j #k.
          ((CreateRelay( relay1 ) @ #j) ∧ (CreateRelay( relay2 ) @ #k)) ⇒
          (#j = #k))) ∧
       (∀ PKMFID1 PKMFID2 #j #k.
         ((Start_PKMF_Session( PKMFID1 ) @ #j) ∧
          (Start_PKMF_Session( PKMFID2 ) @ #k)) ⇒
         (#j = #k))) ∧
      (∀ supi_relay1 supi_relay2 #j #k.
        ((Start_relay_Session( supi_relay1 ) @ #j) ∧
         (Start_relay_Session( supi_relay2 ) @ #k)) ⇒
        (#j = #k))) ∧
     (∀ UE1 UE2 #j #k.
       ((Start_UE_Session( UE1 ) @ #j) ∧ (Start_UE_Session( UE2 ) @ #k)) ⇒
       (#j = #k))) ∧
    (∀ HN1 HN2 #j #k.
      ((Start_HN_Session( HN1 ) @ #j) ∧ (Start_HN_Session( HN2 ) @ #k)) ⇒
      (#j = #k))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i.
  (Remote_EndConf( ) @ #i)
 ∧
  (∀ X data #r. (Rev( X, data ) @ #r) ⇒ ⊥) ∧
  (∀ HN1 HN2 #j #k.
    (HomeNet( HN1 ) @ #j) ∧ (HomeNet( HN2 ) @ #k) ⇒ #j = #k) ∧
  (∀ S1 S2 HN1 HN2 #j #k.
    (Subscribe( S1, HN1 ) @ #j) ∧ (Subscribe( S2, HN2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ PKMF1 PKMF2 #j #k.
    (PKMF_relay( PKMF1 ) @ #j) ∧ (PKMF_relay( PKMF2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ relay1 relay2 #j #k.
    (CreateRelay( relay1 ) @ #j) ∧ (CreateRelay( relay2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ PKMFID1 PKMFID2 #j #k.
    (Start_PKMF_Session( PKMFID1 ) @ #j) ∧
    (Start_PKMF_Session( PKMFID2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ supi_relay1 supi_relay2 #j #k.
    (Start_relay_Session( supi_relay1 ) @ #j) ∧
    (Start_relay_Session( supi_relay2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ UE1 UE2 #j #k.
    (Start_UE_Session( UE1 ) @ #j) ∧ (Start_UE_Session( UE2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ HN1 HN2 #j #k.
    (Start_HN_Session( HN1 ) @ #j) ∧ (Start_HN_Session( HN2 ) @ #k)
   ⇒
    #j = #k)"
*/
by sorry

lemma executability_desync:
  exists-trace
  "∃ dif #i.
    ((((((((((HN_Resync_End( dif ) @ #i) ∧
             (¬(∃ X data #r. Rev( X, data ) @ #r))) ∧
            (∀ HN1 HN2 #j #k.
              ((HomeNet( HN1 ) @ #j) ∧ (HomeNet( HN2 ) @ #k)) ⇒ (#j = #k))) ∧
           (∀ S1 S2 HN1 HN2 #j #k.
             ((Subscribe( S1, HN1 ) @ #j) ∧ (Subscribe( S2, HN2 ) @ #k)) ⇒
             (#j = #k))) ∧
          (∀ PKMF1 PKMF2 #j #k.
            ((PKMF_relay( PKMF1 ) @ #j) ∧ (PKMF_relay( PKMF2 ) @ #k)) ⇒
            (#j = #k))) ∧
         (∀ relay1 relay2 #j #k.
           ((CreateRelay( relay1 ) @ #j) ∧ (CreateRelay( relay2 ) @ #k)) ⇒
           (#j = #k))) ∧
        (∀ PKMFID1 PKMFID2 #j #k.
          ((Start_PKMF_Session( PKMFID1 ) @ #j) ∧
           (Start_PKMF_Session( PKMFID2 ) @ #k)) ⇒
          (#j = #k))) ∧
       (∀ supi_relay1 supi_relay2 #j #k.
         ((Start_relay_Session( supi_relay1 ) @ #j) ∧
          (Start_relay_Session( supi_relay2 ) @ #k)) ⇒
         (#j = #k))) ∧
      (∀ UE1 UE2 #j #k.
        ((Start_UE_Session( UE1 ) @ #j) ∧ (Start_UE_Session( UE2 ) @ #k)) ⇒
        (#j = #k))) ∧
     (∀ #j #k.
       ((Sqn_UE_Desync( ) @ #j) ∧ (Sqn_UE_Desync( ) @ #k)) ⇒ (#j = #k))) ∧
    (∀ HN1 HN2 #j #k.
      ((Start_HN_Session( HN1 ) @ #j) ∧ (Start_HN_Session( HN2 ) @ #k)) ⇒
      (#j = #k))"
/*
guarded formula characterizing all satisfying traces:
"∃ dif #i.
  (HN_Resync_End( dif ) @ #i)
 ∧
  (∀ X data #r. (Rev( X, data ) @ #r) ⇒ ⊥) ∧
  (∀ HN1 HN2 #j #k.
    (HomeNet( HN1 ) @ #j) ∧ (HomeNet( HN2 ) @ #k) ⇒ #j = #k) ∧
  (∀ S1 S2 HN1 HN2 #j #k.
    (Subscribe( S1, HN1 ) @ #j) ∧ (Subscribe( S2, HN2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ PKMF1 PKMF2 #j #k.
    (PKMF_relay( PKMF1 ) @ #j) ∧ (PKMF_relay( PKMF2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ relay1 relay2 #j #k.
    (CreateRelay( relay1 ) @ #j) ∧ (CreateRelay( relay2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ PKMFID1 PKMFID2 #j #k.
    (Start_PKMF_Session( PKMFID1 ) @ #j) ∧
    (Start_PKMF_Session( PKMFID2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ supi_relay1 supi_relay2 #j #k.
    (Start_relay_Session( supi_relay1 ) @ #j) ∧
    (Start_relay_Session( supi_relay2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ UE1 UE2 #j #k.
    (Start_UE_Session( UE1 ) @ #j) ∧ (Start_UE_Session( UE2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ #j #k.
    (Sqn_UE_Desync( ) @ #j) ∧ (Sqn_UE_Desync( ) @ #k) ⇒ #j = #k) ∧
  (∀ HN1 HN2 #j #k.
    (Start_HN_Session( HN1 ) @ #j) ∧ (Start_HN_Session( HN2 ) @ #k)
   ⇒
    #j = #k)"
*/
by sorry

lemma executability_resync:
  exists-trace
  "∃ #i1 #i2 #i3 #i4 X.
    (((((((((((((((((((Start_HN_Session( X ) @ #i1) ∧
                      (HN_Resync_End( ('1'+'1'+'1'+'1') ) @ #i2)) ∧
                     (Start_HN_Session( X ) @ #i3)) ∧
                    (Remote_EndConf( ) @ #i4)) ∧
                   (#i1 < #i2)) ∧
                  (#i2 < #i3)) ∧
                 (#i3 < #i4)) ∧
                (¬(∃ X.1 data #r. Rev( X.1, data ) @ #r))) ∧
               (∀ #j #k.
                 ((Sqn_UE_Desync( ) @ #j) ∧ (Sqn_UE_Desync( ) @ #k)) ⇒ (#j = #k))) ∧
              (∀ a b #j #k.
                ((HN_Resync_End( a ) @ #j) ∧ (HN_Resync_End( b ) @ #k)) ⇒
                (#j = #k))) ∧
             (∀ #j #k.
               ((Remote_EndConf( ) @ #j) ∧ (Remote_EndConf( ) @ #k)) ⇒
               (#j = #k))) ∧
            (∀ HN1 HN2 #j #k.
              ((HomeNet( HN1 ) @ #j) ∧ (HomeNet( HN2 ) @ #k)) ⇒ (#j = #k))) ∧
           (∀ PKMF1 PKMF2 #j #k.
             ((PKMF_relay( PKMF1 ) @ #j) ∧ (PKMF_relay( PKMF2 ) @ #k)) ⇒
             (#j = #k))) ∧
          (∀ S1 S2 HN1 HN2 #j #k.
            ((Subscribe( S1, HN1 ) @ #j) ∧ (Subscribe( S2, HN2 ) @ #k)) ⇒
            (#j = #k))) ∧
         (∀ relay1 relay2 #j #k.
           ((CreateRelay( relay1 ) @ #j) ∧ (CreateRelay( relay2 ) @ #k)) ⇒
           (#j = #k))) ∧
        (∀ S1 S2 H1 H2 sqn_root1 sqn_root2 #k #j.
          ((Sqn_Create( S1, H1, sqn_root1 ) @ #j) ∧
           (Sqn_Create( S2, H2, sqn_root2 ) @ #k)) ⇒
          (#j = #k))) ∧
       (∀ UE1 UE2 UE3 #j #k #l.
         ((((Start_UE_Session( UE1 ) @ #j) ∧
            (Start_UE_Session( UE2 ) @ #k)) ∧
           (Start_UE_Session( UE3 ) @ #l)) ∧
          (¬(#j = #k))) ⇒
         ((#j = #l) ∨ (#k = #l)))) ∧
      (∀ HN1 HN2 HN3 #j #k #l.
        ((((Start_HN_Session( HN1 ) @ #j) ∧
           (Start_HN_Session( HN2 ) @ #k)) ∧
          (Start_HN_Session( HN3 ) @ #l)) ∧
         (¬(#j = #k))) ⇒
        ((#j = #l) ∨ (#k = #l)))) ∧
     (∀ supi_relay1 supi_relay2 supi_relay3 #j #k #l.
       ((((Start_relay_Session( supi_relay1 ) @ #j) ∧
          (Start_relay_Session( supi_relay2 ) @ #k)) ∧
         (Start_relay_Session( supi_relay3 ) @ #l)) ∧
        (¬(#j = #k))) ⇒
       ((#j = #l) ∨ (#k = #l)))) ∧
    (∀ PKMFID1 PKMFID2 PKMFID3 #j #k #l.
      ((((Start_PKMF_Session( PKMFID1 ) @ #j) ∧
         (Start_PKMF_Session( PKMFID2 ) @ #k)) ∧
        (Start_PKMF_Session( PKMFID3 ) @ #l)) ∧
       (¬(#j = #k))) ⇒
      ((#j = #l) ∨ (#k = #l)))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i1 #i2 #i3 #i4 X.
  (Start_HN_Session( X ) @ #i1) ∧
  (HN_Resync_End( ('1'+'1'+'1'+'1') ) @ #i2) ∧
  (Start_HN_Session( X ) @ #i3) ∧
  (Remote_EndConf( ) @ #i4)
 ∧
  (#i1 < #i2) ∧
  (#i2 < #i3) ∧
  (#i3 < #i4) ∧
  (∀ X.1 data #r. (Rev( X.1, data ) @ #r) ⇒ ⊥) ∧
  (∀ #j #k.
    (Sqn_UE_Desync( ) @ #j) ∧ (Sqn_UE_Desync( ) @ #k) ⇒ #j = #k) ∧
  (∀ a b #j #k.
    (HN_Resync_End( a ) @ #j) ∧ (HN_Resync_End( b ) @ #k) ⇒ #j = #k) ∧
  (∀ #j #k.
    (Remote_EndConf( ) @ #j) ∧ (Remote_EndConf( ) @ #k) ⇒ #j = #k) ∧
  (∀ HN1 HN2 #j #k.
    (HomeNet( HN1 ) @ #j) ∧ (HomeNet( HN2 ) @ #k) ⇒ #j = #k) ∧
  (∀ PKMF1 PKMF2 #j #k.
    (PKMF_relay( PKMF1 ) @ #j) ∧ (PKMF_relay( PKMF2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ S1 S2 HN1 HN2 #j #k.
    (Subscribe( S1, HN1 ) @ #j) ∧ (Subscribe( S2, HN2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ relay1 relay2 #j #k.
    (CreateRelay( relay1 ) @ #j) ∧ (CreateRelay( relay2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ S1 S2 H1 H2 sqn_root1 sqn_root2 #k #j.
    (Sqn_Create( S1, H1, sqn_root1 ) @ #j) ∧
    (Sqn_Create( S2, H2, sqn_root2 ) @ #k)
   ⇒
    #j = #k) ∧
  (∀ UE1 UE2 UE3 #j #k #l.
    (Start_UE_Session( UE1 ) @ #j) ∧
    (Start_UE_Session( UE2 ) @ #k) ∧
    (Start_UE_Session( UE3 ) @ #l)
   ⇒
    ((#j = #k) ∨ (#j = #l) ∨ (#k = #l))) ∧
  (∀ HN1 HN2 HN3 #j #k #l.
    (Start_HN_Session( HN1 ) @ #j) ∧
    (Start_HN_Session( HN2 ) @ #k) ∧
    (Start_HN_Session( HN3 ) @ #l)
   ⇒
    ((#j = #k) ∨ (#j = #l) ∨ (#k = #l))) ∧
  (∀ supi_relay1 supi_relay2 supi_relay3 #j #k #l.
    (Start_relay_Session( supi_relay1 ) @ #j) ∧
    (Start_relay_Session( supi_relay2 ) @ #k) ∧
    (Start_relay_Session( supi_relay3 ) @ #l)
   ⇒
    ((#j = #k) ∨ (#j = #l) ∨ (#k = #l))) ∧
  (∀ PKMFID1 PKMFID2 PKMFID3 #j #k #l.
    (Start_PKMF_Session( PKMFID1 ) @ #j) ∧
    (Start_PKMF_Session( PKMFID2 ) @ #k) ∧
    (Start_PKMF_Session( PKMFID3 ) @ #l)
   ⇒
    ((#j = #k) ∨ (#j = #l) ∨ (#k = #l)))"
*/
by sorry

lemma secrecy_remote_K_relay_sess_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                                        hide_lemma=sqn_ue_src,
                                                                                        hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi t #i.
    (Secret( <'remote', supi>, 'K_relay_sess', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (Secret( <'remote', supi>, 'K_relay_sess', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_remote_K_relay_enc_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                                       hide_lemma=sqn_ue_src,
                                                                                       hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi t #i.
    (Secret( <'remote', supi>, 'K_relay_enc', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (Secret( <'remote', supi>, 'K_relay_enc', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_remote_K_relay_int_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                                       hide_lemma=sqn_ue_src,
                                                                                       hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi t #i.
    (Secret( <'remote', supi>, 'K_relay_int', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (Secret( <'remote', supi>, 'K_relay_int', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_remote_UP_PRUK_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                                   hide_lemma=sqn_ue_src,
                                                                                   hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi t #i.
    (Secret( <'remote', supi>, 'UPPRUK', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (Secret( <'remote', supi>, 'UPPRUK', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_remote_UP_PRUK_ID_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                                      hide_lemma=sqn_ue_src,
                                                                                      hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi t #i.
    (Secret( <'remote', supi>, 'UPPRUKID', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (Secret( <'remote', supi>, 'UPPRUKID', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_remote_SUPI_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                                hide_lemma=sqn_ue_src,
                                                                                hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi t #i.
    (Secret( <'remote', supi>, 'supi', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (Secret( <'remote', supi>, 'supi', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_remote_RSC_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                               hide_lemma=sqn_ue_src,
                                                                               hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi t #i.
    (Secret( <'remote', supi>, 'RSC', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (Secret( <'remote', supi>, 'RSC', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_remote_K_NRp_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                                 hide_lemma=sqn_ue_src,
                                                                                 hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi t #i.
    (Secret( <'remote', supi>, 'K_NRp', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (Secret( <'remote', supi>, 'K_NRp', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_relay_K_relay_sess_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                                       hide_lemma=sqn_ue_src,
                                                                                       hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi_relay t #i.
    (Secret( <'relay', supi_relay>, 'K_relay_sess', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ supi_relay t #i.
  (Secret( <'relay', supi_relay>, 'K_relay_sess', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_relay_K_relay_enc_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                                      hide_lemma=sqn_ue_src,
                                                                                      hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi_relay t #i.
    (Secret( <'relay', supi_relay>, 'K_relay_enc', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ supi_relay t #i.
  (Secret( <'relay', supi_relay>, 'K_relay_enc', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_relay_K_relay_int_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                                      hide_lemma=sqn_ue_src,
                                                                                      hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi_relay t #i.
    (Secret( <'relay', supi_relay>, 'K_relay_int', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ supi_relay t #i.
  (Secret( <'relay', supi_relay>, 'K_relay_int', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_relay_UP_PRUK_ID_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                                     hide_lemma=sqn_ue_src,
                                                                                     hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi_relay t #i.
    (Secret( <'relay', supi_relay>, 'UPPRUKID', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ supi_relay t #i.
  (Secret( <'relay', supi_relay>, 'UPPRUKID', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_relay_RSC_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                              hide_lemma=sqn_ue_src,
                                                                              hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi_relay t #i.
    (Secret( <'relay', supi_relay>, 'RSC', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ supi_relay t #i.
  (Secret( <'relay', supi_relay>, 'RSC', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_relay_K_NRp_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                                hide_lemma=sqn_ue_src,
                                                                                hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi_relay t #i.
    (Secret( <'relay', supi_relay>, 'K_NRp', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ supi_relay t #i.
  (Secret( <'relay', supi_relay>, 'K_NRp', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_PKMF_UP_PRUK_ID_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                                    hide_lemma=sqn_ue_src,
                                                                                    hide_lemma=sqn_HN_src]:
  all-traces
  "∀ idPKMF t #i.
    (Secret( <'PKMF', idPKMF>, 'UPPRUKID', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ idPKMF t #i.
  (Secret( <'PKMF', idPKMF>, 'UPPRUKID', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_PKMF_RSC_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                             hide_lemma=sqn_ue_src,
                                                                             hide_lemma=sqn_HN_src]:
  all-traces
  "∀ idPKMF t #i.
    (Secret( <'PKMF', idPKMF>, 'RSC', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ idPKMF t #i.
  (Secret( <'PKMF', idPKMF>, 'RSC', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_PKMF_K_NRp_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                               hide_lemma=sqn_ue_src,
                                                                               hide_lemma=sqn_HN_src]:
  all-traces
  "∀ idPKMF t #i.
    (Secret( <'PKMF', idPKMF>, 'K_NRp', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ idPKMF t #i.
  (Secret( <'PKMF', idPKMF>, 'K_NRp', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_HN_UP_PRUK_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                               hide_lemma=sqn_ue_src,
                                                                               hide_lemma=sqn_HN_src]:
  all-traces
  "∀ idHN t #i.
    (Secret( <'HN', idHN>, 'UPPRUK', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ idHN t #i.
  (Secret( <'HN', idHN>, 'UPPRUK', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_HN_UP_PRUK_ID_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                                  hide_lemma=sqn_ue_src,
                                                                                  hide_lemma=sqn_HN_src]:
  all-traces
  "∀ idHN t #i.
    (Secret( <'HN', idHN>, 'UPPRUKID', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ idHN t #i.
  (Secret( <'HN', idHN>, 'UPPRUKID', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_HN_SUPI_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                            hide_lemma=sqn_ue_src,
                                                                            hide_lemma=sqn_HN_src]:
  all-traces
  "∀ supi t #i.
    (Secret( <'HN', supi>, 'supi', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ supi t #i.
  (Secret( <'HN', supi>, 'supi', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_HN_RSC_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                           hide_lemma=sqn_ue_src,
                                                                           hide_lemma=sqn_HN_src]:
  all-traces
  "∀ idHN t #i.
    (Secret( <'HN', idHN>, 'RSC', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ idHN t #i.
  (Secret( <'HN', idHN>, 'RSC', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma secrecy_HN_K_NRp_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_nodecrease,
                                                                             hide_lemma=sqn_ue_src,
                                                                             hide_lemma=sqn_HN_src]:
  all-traces
  "∀ idHN t #i.
    (Secret( <'HN', idHN>, 'K_NRp', t ) @ #i) ⇒
    (((((((¬(∃ #j. K( t ) @ #j)) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ idHN t #i.
  (Secret( <'HN', idHN>, 'K_NRp', t ) @ #i)
 ∧
  (∃ #j. (K( t ) @ #j)) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_remote_relay_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                       hide_lemma=sqn_HN_src,
                                                                                       hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'relay', t> ) @ #i) ⇒
    (((((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'relay', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_relay_remote_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                       hide_lemma=sqn_HN_src,
                                                                                       hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'remote', t> ) @ #i) ⇒
    (((((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'remote', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_remote_HN_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                    hide_lemma=sqn_HN_src,
                                                                                    hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'HN', t> ) @ #i) ⇒
    (((((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'HN', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_HN_remote_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                    hide_lemma=sqn_HN_src,
                                                                                    hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'HN', 'remote', t> ) @ #i) ⇒
    (((((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'HN', 'remote', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_relay_PKMF_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                     hide_lemma=sqn_HN_src,
                                                                                     hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'PKMF', t> ) @ #i) ⇒
    (((((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'PKMF', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_PKMF_relay_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                     hide_lemma=sqn_HN_src,
                                                                                     hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'PKMF', 'relay', t> ) @ #i) ⇒
    (((((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'PKMF', 'relay', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_relay_HN_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                   hide_lemma=sqn_HN_src,
                                                                                   hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'HN', t> ) @ #i) ⇒
    (((((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'HN', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_HN_PKMF_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                  hide_lemma=sqn_HN_src,
                                                                                  hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'HN', 'PKMF', t> ) @ #i) ⇒
    (((((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'HN', 'PKMF', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma weakagreement_PKMF_HN_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                  hide_lemma=sqn_HN_src,
                                                                                  hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'PKMF', 'HN', t> ) @ #i) ⇒
    (((((((∃ t2 #j. Running( b, a, t2 ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'PKMF', 'HN', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, t2 ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_remote_relay_SeCap_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                     hide_lemma=sqn_HN_src,
                                                                                                     hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'relay', 'SeCap', t> ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'remote', 'relay', 'SeCap', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'relay', 'SeCap', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'remote', 'relay', 'SeCap', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_relay_remote_SeCap_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                     hide_lemma=sqn_HN_src,
                                                                                                     hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'remote', 'SeCap', t> ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'relay', 'remote', 'SeCap', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'remote', 'SeCap', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'relay', 'remote', 'SeCap', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_remote_relay_CPsecuritypolicy_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                                hide_lemma=sqn_HN_src,
                                                                                                                hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'relay', 'CPsecurity_policy', t>
     ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'remote', 'relay', 'CPsecurity_policy', t>
            ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'relay', 'CPsecurity_policy', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'remote', 'relay', 'CPsecurity_policy', t> ) @ #j)
   ⇒
    ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_relay_remote_CPsecuritypolicy_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                                hide_lemma=sqn_HN_src,
                                                                                                                hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'remote', 'CPsecurity_policy', t>
     ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'relay', 'remote', 'CPsecurity_policy', t>
            ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'remote', 'CPsecurity_policy', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'relay', 'remote', 'CPsecurity_policy', t> ) @ #j)
   ⇒
    ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'relay', 'remote', 'CPsecurity_policy', t>
       ) @ #i )
  case relay_receive_DSMComplete_step8a
  solve( St_2_relay( ~transactionid, suci, ~supi, ~User_info_relay,
                     ~idPKMF, idHN, ~supi_relay, ~RSC, Nonce1, ~SeCap, ~CP_Se_Po,
                     ~MSB_KsessID, RAND, K_NRp, UP_PRUKID, ~Nonce2, K_relay_sess,
                     K_relay_enc, K_relay_int, KsessID
         ) ▶₀ #i )
    case relay_receive_relay_auth_request_step6
    solve( RcvS( ~transactionid, ~idPKMF, ~supi_relay,
                 <'relay_auth_request', K_NRp, ~Nonce2, UP_PRUKID, RAND, AUTN, 
                  P_TID, GPI_MAC>
           ) ▶₂ #vr )
      case receive_secure_case_1
      solve( RcvS( ~cid, idHN.1, ~idPKMF,
                   <'ProseAuthenticateResponse', K_NRp, ~Nonce2, UP_PRUKID, RAND, 
                    AUTN, P_TID, GPI_MAC>
             ) ▶₁ #vr.7 )
        case receive_secure_case_1
        solve( !KU( senc(<~UP_Se_Po, 
                          Int(KDF(KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                              <~RAND, ~supi.1, ~idHN.1>),
                                          <~RSC.1, Nonce1.1, ~Nonce2>),
                                      <Nonce1, ~Nonce2>),
                                  <'0x01', 'integrity_algorithm'>),
                              <~UP_Se_Po, ~LSB_KsessID, ~MSB_KsessID>)
                         >,
                         KDF(KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                         <~RAND, ~supi.1, ~idHN.1>),
                                     <~RSC.1, Nonce1.1, ~Nonce2>),
                                 <Nonce1, ~Nonce2>),
                             <'0x00', 'confidential_algorithm'>))
               ) @ #vk.4 )
          case c_senc
          by sorry
        next
          case relay_receive_DSMComplete_step8a
          by contradiction /* cyclic */
        next
          case ue_receive_DSMCommand_step7a
          solve( !KU( Int(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                              <~RAND, ~supi.1, 'GPI_integrity'>),
                          <~RAND, 
                           <(f5(~k, ~RAND)⊕(~sqn_root+dif+count.1)), 
                            f1(~k, <(~sqn_root+dif+count.1), ~RAND>)>, 
                           senc(UP_PRUKID,
                                KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                    <~RAND, ~supi.1, 'GPI_confidentiality'>))
                          >)
                 ) @ #vk.44 )
            case c_Int
            by sorry
          next
            case relay_receive_relay_auth_request_step6_case_01
            by sorry
          next
            case relay_receive_relay_auth_request_step6_case_02
            by sorry
          next
            case relay_receive_relay_auth_request_step6_case_03
            solve( RcvS( ~transactionid.1, ~idPKMF.3, ~supi_relay.3,
                         <'relay_auth_request', 
                          KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>, <~RAND, ~supi.1, ~idHN.1>),
                              <~RSC.1, ~Nonce1, ~Nonce2>), 
                          ~Nonce2, ~n, ~RAND, 
                          <(f5(~k, ~RAND)⊕('1'+~sqn_root+count)), 
                           f1(~k, <('1'+~sqn_root+count), ~RAND>)>, 
                          senc(~n,
                               KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                   <~RAND, ~supi.1, 'GPI_confidentiality'>)), 
                          Int(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                  <~RAND, ~supi.1, 'GPI_integrity'>),
                              <~RAND, 
                               <(f5(~k, ~RAND)⊕('1'+~sqn_root+count)), 
                                f1(~k, <('1'+~sqn_root+count), ~RAND>)>, 
                               senc(~n,
                                    KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                        <~RAND, ~supi.1, 'GPI_confidentiality'>))
                              >)
                         >
                   ) ▶₂ #vr.23 )
              case receive_secure_case_1
              solve( RcvS( ~cid, idHN.2, ~idPKMF.1,
                           <'ProseAuthenticateResponse', 
                            KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>, <~RAND, ~supi.1, ~idHN.1>),
                                <~RSC.1, ~Nonce1, ~Nonce2>), 
                            ~Nonce2, ~n, ~RAND, 
                            <(f5(~k, ~RAND)⊕('1'+~sqn_root+count)), 
                             f1(~k, <('1'+~sqn_root+count), ~RAND>)>, 
                            senc(~n,
                                 KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                     <~RAND, ~supi.1, 'GPI_confidentiality'>)), 
                            Int(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                    <~RAND, ~supi.1, 'GPI_integrity'>),
                                <~RAND, 
                                 <(f5(~k, ~RAND)⊕('1'+~sqn_root+count)), 
                                  f1(~k, <('1'+~sqn_root+count), ~RAND>)>, 
                                 senc(~n,
                                      KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                          <~RAND, ~supi.1, 'GPI_confidentiality'>))
                                >)
                           >
                     ) ▶₁ #j )
                case receive_secure_case_1
                by sorry
              next
                case receive_secure_case_2
                solve( RcvS( ~cid.1, idHN.3, ~idPKMF.3,
                             <'ProseAuthenticateResponse', 
                              KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>, <~RAND, ~supi.1, ~idHN.1>),
                                  <~RSC.1, ~Nonce1, ~Nonce2>), 
                              ~Nonce2, ~n, ~RAND, 
                              <(f5(~k, ~RAND)⊕('1'+~sqn_root+count)), 
                               f1(~k, <('1'+~sqn_root+count), ~RAND>)>, 
                              senc(~n,
                                   KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                       <~RAND, ~supi.1, 'GPI_confidentiality'>)), 
                              Int(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                      <~RAND, ~supi.1, 'GPI_integrity'>),
                                  <~RAND, 
                                   <(f5(~k, ~RAND)⊕('1'+~sqn_root+count)), 
                                    f1(~k, <('1'+~sqn_root+count), ~RAND>)>, 
                                   senc(~n,
                                        KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                            <~RAND, ~supi.1, 'GPI_confidentiality'>))
                                  >)
                             >
                       ) ▶₁ #vr.38 )
                  case receive_secure_case_1
                  by sorry
                next
                  case receive_secure_case_2
                  solve( !KU( KDF(KDF(KDF(KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                                  <~RAND, ~supi.1, ~idHN.1>),
                                              <~RSC.1, ~Nonce1, ~Nonce2>),
                                          <~Nonce1, ~Nonce2>),
                                      <'0x01', 'integrity_algorithm'>),
                                  <~CP_Se_Po.1, ~Nonce2, ~SeCap.1, ~LSB_KsessID, ~RAND, 
                                   <(f5(~k, ~RAND)⊕('1'+~sqn_root+count)), 
                                    f1(~k, <('1'+~sqn_root+count), ~RAND>)>, 
                                   senc(~n,
                                        KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                            <~RAND, ~supi.1, 'GPI_confidentiality'>)), 
                                   Int(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                           <~RAND, ~supi.1, 'GPI_integrity'>),
                                       <~RAND, 
                                        <(f5(~k, ~RAND)⊕('1'+~sqn_root+count)), 
                                         f1(~k, <('1'+~sqn_root+count), ~RAND>)>, 
                                        senc(~n,
                                             KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                                 <~RAND, ~supi.1, 'GPI_confidentiality'>))
                                       >)
                                  >)
                         ) @ #vk.45 )
                    case c_KDF
                    by sorry
                  next
                    case relay_receive_relay_auth_request_step6
                    solve( !KU( aenc(<~supi, ~R>, pk_HN) ) @ #vk.14 )
                      case c_aenc
                      by sorry
                    next
                      case secureChannel_compromised_out_case_1
                      by contradiction /* from formulas */
                    next
                      case secureChannel_compromised_out_case_2
                      by contradiction /* from formulas */
                    next
                      case ue_send_DCR_step1
                      solve( !KU( KDF(~DUIK,
                                      <<aenc(<~supi, ~R>, pk(~sk_HN)), ~idHN>, ~User_info_remote, 
                                       ~User_info_relay, (~RSC⊕KDF(~DUCK, <~Nonce1, ~RSC>)), 
                                       ~Nonce1, ~SeCap, ~CP_Se_Po, ~MSB_KsessID>)
                             ) @ #vk.34 )
                        case c_KDF
                        solve( !KU( ~DUIK ) @ #vk.51 )
                          case relay_receive_relay_auth_request_step6
                          by sorry
                        next
                          case reveal_Ltk_DUIK
                          solve( Sqn_UE( ~supi.1, ~idHN.1, (~sqn_root+count), ~sqn_root,
                                         count
                                 ) ▶₁ #vr.14 )
                            case add_subscription
                            solve( Sqn_HN( ~supi.1, ~idHN.1, ('1'+~sqn_root), ~sqn_root, '1'
                                   ) ▶₄ #vr.10 )
                              case add_subscription
                              solve( !KU( senc(~n,
                                               KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                                   <~RAND, ~supi.1, 'GPI_confidentiality'>))
                                     ) @ #vk.51 )
                                case c_senc
                                by sorry
                              next
                                case relay_receive_relay_auth_request_step6
                                solve( RcvS( ~cid.1, idHN.4, ~idPKMF.5,
                                             <'ProseAuthenticateResponse', 
                                              KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                                      <~RAND, ~supi.1, ~idHN.1>),
                                                  <~RSC.1, ~Nonce1, ~Nonce2>), 
                                              ~Nonce2, ~n, ~RAND, 
                                              <(f5(~k, ~RAND)⊕('1'+'1'+~sqn_root)), 
                                               f1(~k, <('1'+'1'+~sqn_root), ~RAND>)>, 
                                              senc(~n,
                                                   KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                                       <~RAND, ~supi.1, 'GPI_confidentiality'>)), 
                                              Int(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                                      <~RAND, ~supi.1, 'GPI_integrity'>),
                                                  <~RAND, 
                                                   <(f5(~k, ~RAND)⊕('1'+'1'+~sqn_root)), 
                                                    f1(~k, <('1'+'1'+~sqn_root), ~RAND>)>, 
                                                   senc(~n,
                                                        KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                                            <~RAND, ~supi.1, 'GPI_confidentiality'
                                                            >))
                                                  >)
                                             >
                                       ) ▶₁ #j.1 )
                                  case receive_secure_case_1
                                  solve( !KU( f1(~k, <('1'+'1'+~sqn_root), ~RAND>) ) @ #vk.51 )
                                    case c_f1
                                    by sorry
                                  next
                                    case relay_receive_relay_auth_request_step6
                                    solve( RcvS( ~cid.1, idHN.4, ~idPKMF.5,
                                                 <'ProseAuthenticateResponse', 
                                                  KDF(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                                          <~RAND, ~supi.1, ~idHN.1>),
                                                      <~RSC.1, ~Nonce1, ~Nonce2>), 
                                                  ~Nonce2, ~n, ~RAND, 
                                                  <(f5(~k, ~RAND)⊕('1'+'1'+~sqn_root)), 
                                                   f1(~k, <('1'+'1'+~sqn_root), ~RAND>)>, 
                                                  senc(~n,
                                                       KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                                           <~RAND, ~supi.1, 'GPI_confidentiality'
                                                           >)), 
                                                  Int(KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                                          <~RAND, ~supi.1, 'GPI_integrity'>),
                                                      <~RAND, 
                                                       <(f5(~k, ~RAND)⊕('1'+'1'+~sqn_root)), 
                                                        f1(~k, <('1'+'1'+~sqn_root), ~RAND>)>, 
                                                       senc(~n,
                                                            KDF(<f3(~k, ~RAND), f4(~k, ~RAND)>,
                                                                <~RAND, ~supi.1, 
                                                                 'GPI_confidentiality'>))
                                                      >)
                                                 >
                                           ) ▶₁ #j.1 )
                                      case receive_secure_case_1
                                      solve( RcvS( ~cid, ~idPKMF, ~idHN.1,
                                                   <'ProseAuthenticateRequest', 
                                                    <aenc(<~supi.1, ~R.2>, pk(~sk_HN.1)), ~idHN.1>, 
                                                    ~RSC.1, ~Nonce1>
                                             ) ▶₁ #vr.10 )
                                        case receive_secure_case_1
                                        solve( RcvS( ~transactionid, ~supi_relay, ~idPKMF,
                                                     <'relaykeyrequest', ~transactionid, 
                                                      <aenc(<~supi.1, ~R.1>, pk(~sk_HN.1)), ~idHN.1
                                                      >, 
                                                      ~RSC.1, ~Nonce1>
                                               ) ▶₃ #vr.7 )
                                          case receive_secure_case_1
                                          solve( !KU( ~idHN ) @ #vk.32 )
                                            case init_homeNet
                                            solve( !KU( ~User_info_remote ) @ #vk.33 )
                                              case fresh
                                              solve( !KU( ~User_info_relay ) @ #vk.35 )
                                                case relay_receive_relay_auth_request_step6
                                                by sorry
                                              next
                                                case secureChannel_compromised_out_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_3
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_4
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_5
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_6
                                                by contradiction /* from formulas */
                                              next
                                                case secureChannel_compromised_out_case_7
                                                by contradiction /* from formulas */
                                              next
                                                case ue_send_DCR_step1
                                                solve( !KU( ~SeCap ) @ #vk.41 )
                                                  case relay_receive_relay_auth_request_step6
                                                  by sorry
                                                next
                                                  case secureChannel_compromised_out_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_3
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_4
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_5
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_6
                                                  by contradiction /* from formulas */
                                                next
                                                  case secureChannel_compromised_out_case_7
                                                  by contradiction /* from formulas */
                                                next
                                                  case ue_send_DCR_step1
                                                  solve( !KU( ~CP_Se_Po ) @ #vk.43 )
                                                    case relay_receive_relay_auth_request_step6
                                                    by sorry
                                                  next
                                                    case secureChannel_compromised_out_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_3
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_4
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_5
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_6
                                                    by contradiction /* from formulas */
                                                  next
                                                    case secureChannel_compromised_out_case_7
                                                    by contradiction /* from formulas */
                                                  next
                                                    case ue_send_DCR_step1
                                                    solve( !KU( ~MSB_KsessID ) @ #vk.45 )
                                                      case relay_receive_relay_auth_request_step6
                                                      by sorry
                                                    next
                                                      case secureChannel_compromised_out_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case secureChannel_compromised_out_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case secureChannel_compromised_out_case_3
                                                      by contradiction /* from formulas */
                                                    next
                                                      case secureChannel_compromised_out_case_4
                                                      by contradiction /* from formulas */
                                                    next
                                                      case secureChannel_compromised_out_case_5
                                                      by contradiction /* from formulas */
                                                    next
                                                      case secureChannel_compromised_out_case_6
                                                      by contradiction /* from formulas */
                                                    next
                                                      case secureChannel_compromised_out_case_7
                                                      by contradiction /* from formulas */
                                                    next
                                                      case ue_receive_DSMCommand_step7a
                                                      by contradiction /* cyclic */
                                                    next
                                                      case ue_send_DCR_step1
                                                      solve( !KU( ~LSB_KsessID ) @ #vk.46 )
                                                        case relay_receive_relay_auth_request_step6_case_1
                                                        by sorry
                                                      next
                                                        case relay_receive_relay_auth_request_step6_case_2
                                                        solve( !KU( ~Nonce2 ) @ #vk.49 )
                                                          case relay_receive_relay_auth_request_step6
                                                          solve( RcvS( ~transactionid.1, ~idPKMF.5,
                                                                       ~supi_relay.5,
                                                                       <'relay_auth_request', 
                                                                        K_NRp, ~Nonce2, UP_PRUKID, 
                                                                        RAND.1, AUTN, P_TID, GPI_MAC
                                                                       >
                                                                 ) ▶₂ #vr.68 )
                                                            case receive_secure_case_1
                                                            solve( RcvS( ~cid.1, idHN.4, ~idPKMF.5,
                                                                         <
                                                                          'ProseAuthenticateResponse', 
                                                                          K_NRp, ~Nonce2, 
                                                                          UP_PRUKID, RAND.1, AUTN, 
                                                                          P_TID, GPI_MAC>
                                                                   ) ▶₁ #vr.77 )
                                                              case receive_secure_case_1
                                                              solve( !KU( ~RAND ) @ #vk.50 )
                                                                case relay_receive_relay_auth_request_step6_case_1
                                                                by sorry
                                                              next
                                                                case relay_receive_relay_auth_request_step6_case_2
                                                                solve( RcvS( ~cid.1, idHN.3,
                                                                             ~idPKMF.5,
                                                                             <
                                                                              'ProseAuthenticateResponse', 
                                                                              KDF(KDF(<
                                                                                       f3(~k,
                                                                                          ~RAND), 
                                                                                       f4(~k, ~RAND)
                                                                                      >,
                                                                                      <~RAND, 
                                                                                       ~supi, ~idHN
                                                                                      >),
                                                                                  <~RSC, ~Nonce1, 
                                                                                   ~Nonce2>), 
                                                                              ~Nonce2, ~n, ~RAND, 
                                                                              <
                                                                               (f5(~k, ~RAND)⊕
                                                                                ('1'+'1'+~sqn_root)
                                                                               ), 
                                                                               f1(~k,
                                                                                  <
                                                                                   ('1'+'1'+
                                                                                    ~sqn_root), 
                                                                                   ~RAND>)
                                                                              >, 
                                                                              senc(~n,
                                                                                   KDF(<
                                                                                        f3(~k,
                                                                                           ~RAND), 
                                                                                        f4(~k,
                                                                                           ~RAND)
                                                                                       >,
                                                                                       <~RAND, 
                                                                                        ~supi, 
                                                                                        'GPI_confidentiality'
                                                                                       >)), 
                                                                              Int(KDF(<
                                                                                       f3(~k,
                                                                                          ~RAND), 
                                                                                       f4(~k, ~RAND)
                                                                                      >,
                                                                                      <~RAND, 
                                                                                       ~supi, 
                                                                                       'GPI_integrity'
                                                                                      >),
                                                                                  <~RAND, 
                                                                                   <
                                                                                    (f5(~k, ~RAND)⊕
                                                                                     ('1'+'1'+
                                                                                      ~sqn_root)
                                                                                    ), 
                                                                                    f1(~k,
                                                                                       <
                                                                                        ('1'+'1'+
                                                                                         ~sqn_root
                                                                                        ), 
                                                                                        ~RAND>)
                                                                                   >, 
                                                                                   senc(~n,
                                                                                        KDF(<
                                                                                             f3(~k,
                                                                                                ~RAND), 
                                                                                             f4(~k,
                                                                                                ~RAND)
                                                                                            >,
                                                                                            <~RAND, 
                                                                                             ~supi, 
                                                                                             'GPI_confidentiality'
                                                                                            >))
                                                                                  >)
                                                                             >
                                                                       ) ▶₁ #j.1 )
                                                                  case receive_secure_case_1
                                                                  solve( !KU( ~Nonce1 ) @ #vk.48 )
                                                                    case relay_receive_relay_auth_request_step6
                                                                    by sorry
                                                                  next
                                                                    case secureChannel_compromised_out_case_1
                                                                    by contradiction
                                                                       /* from formulas */
                                                                  next
                                                                    case secureChannel_compromised_out_case_2
                                                                    by contradiction
                                                                       /* from formulas */
                                                                  next
                                                                    case secureChannel_compromised_out_case_3
                                                                    by contradiction
                                                                       /* from formulas */
                                                                  next
                                                                    case secureChannel_compromised_out_case_4
                                                                    by contradiction
                                                                       /* from formulas */
                                                                  next
                                                                    case secureChannel_compromised_out_case_5
                                                                    by contradiction
                                                                       /* from formulas */
                                                                  next
                                                                    case secureChannel_compromised_out_case_6
                                                                    by contradiction
                                                                       /* from formulas */
                                                                  next
                                                                    case secureChannel_compromised_out_case_7
                                                                    by contradiction
                                                                       /* from formulas */
                                                                  next
                                                                    case ue_send_DCR_step1
                                                                    solve( !KU( (~RSC⊕
                                                                                 KDF(~DUCK,
                                                                                     <~Nonce1, ~RSC
                                                                                     >)
                                                                                )
                                                                           ) @ #vk.48 )
                                                                      case c_xor
                                                                      by sorry
                                                                    next
                                                                      case coerce
                                                                      solve( !KD( (~RSC⊕
                                                                                   KDF(~DUCK,
                                                                                       <~Nonce1, 
                                                                                        ~RSC>)
                                                                                  )
                                                                             ) ▶₀ #vk.18 )
                                                                        case init_PKMF_relay
                                                                        by contradiction
                                                                           /* impossible chain */
                                                                      next
                                                                        case init_homeNet
                                                                        by contradiction
                                                                           /* impossible chain */
                                                                      next
                                                                        case relay_receive_DSMComplete_step8a
                                                                        by sorry
                                                                      next
                                                                        case relay_receive_relay_auth_request_step6
                                                                        by sorry
                                                                      next
                                                                        case reveal_Ltk_DUCK
                                                                        by contradiction
                                                                           /* impossible chain */
                                                                      next
                                                                        case reveal_Ltk_DUIK
                                                                        by contradiction
                                                                           /* impossible chain */
                                                                      next
                                                                        case reveal_Ltk_RSC
                                                                        by contradiction
                                                                           /* impossible chain */
                                                                      next
                                                                        case reveal_Ltk_Sqn
                                                                        by contradiction
                                                                           /* impossible chain */
                                                                      next
                                                                        case reveal_Ltk_Sym
                                                                        by contradiction
                                                                           /* impossible chain */
                                                                      next
                                                                        case reveal_Ltk_supi
                                                                        by contradiction
                                                                           /* impossible chain */
                                                                      next
                                                                        case reveal_Ltk_supi_relay
                                                                        by contradiction
                                                                           /* impossible chain */
                                                                      next
                                                                        case reveal_sk_HN
                                                                        by contradiction
                                                                           /* impossible chain */
                                                                      next
                                                                        case secureChannel_compromised_out
                                                                        by contradiction
                                                                           /* from formulas */
                                                                      next
                                                                        case ue_Direct_Security_Mode_Failure_step7b
                                                                        by sorry
                                                                      next
                                                                        case ue_receive_DSMCommand_step7a
                                                                        by sorry
                                                                      next
                                                                        case ue_send_DCR_step1
                                                                        solve( (#vl.7, 0) ~~> (#vk.18, 0) )
                                                                          case d_0_fst
                                                                          by sorry
                                                                        next
                                                                          case d_0_snd
                                                                          solve( (#vr.72, 0) ~~> (#vk.18, 0) )
                                                                            case d_0_fst
                                                                            by contradiction
                                                                               /* impossible chain
                                                                               */
                                                                          next
                                                                            case d_0_snd
                                                                            solve( (#vr.73, 0) ~~> (#vk.18, 0) )
                                                                              case d_0_fst
                                                                              by contradiction
                                                                                 /* impossible chain
                                                                                 */
                                                                            next
                                                                              case d_0_snd
                                                                              solve( (#vr.74, 0) ~~> (#vk.18, 0) )
                                                                                case d_0_fst
                                                                                solve( (#vr.75, 0) ~~> (#vk.18, 0) )
                                                                                  case Xor
                                                                                  solve( !KU( (
                                                                                               f5(~k,
                                                                                                  ~RAND)⊕
                                                                                               ('1'+
                                                                                                '1'+
                                                                                                ~sqn_root
                                                                                               )
                                                                                              )
                                                                                         ) @ #vk.51 )
                                                                                    case c_xor
                                                                                    by sorry
                                                                                  next
                                                                                    case coerce
                                                                                    solve( !KD( (
                                                                                                 f5(~k,
                                                                                                    ~RAND)⊕
                                                                                                 (
                                                                                                  '1'+
                                                                                                  '1'+
                                                                                                  ~sqn_root
                                                                                                 )
                                                                                                )
                                                                                           ) ▶₀ #vk.19 )
                                                                                      case init_PKMF_relay
                                                                                      by contradiction
                                                                                         /*
                                                                                         impossible chain
                                                                                         */
                                                                                    next
                                                                                      case init_homeNet
                                                                                      by contradiction
                                                                                         /*
                                                                                         impossible chain
                                                                                         */
                                                                                    next
                                                                                      case relay_receive_DSMComplete_step8a
                                                                                      by sorry
                                                                                    next
                                                                                      case relay_receive_relay_auth_request_step6
                                                                                      solve( (#vl.7, 0) ~~> (#vk.19, 0) )
                                                                                        case d_0_fst
                                                                                        by contradiction
                                                                                           /*
                                                                                           forbidden KD-fact
                                                                                           */
                                                                                      next
                                                                                        case d_0_snd
                                                                                        solve( (#vr.73, 0) ~~> (#vk.19, 0) )
                                                                                          case d_0_fst
                                                                                          by contradiction
                                                                                             /*
                                                                                             impossible chain
                                                                                             */
                                                                                        next
                                                                                          case d_0_snd
                                                                                          solve( (#vr.74, 0) ~~> (#vk.19, 0) )
                                                                                            case d_0_fst
                                                                                            by contradiction
                                                                                               /*
                                                                                               impossible chain
                                                                                               */
                                                                                          next
                                                                                            case d_0_snd
                                                                                            solve( (#vr.75, 0) ~~> (#vk.19, 0) )
                                                                                              case d_0_fst
                                                                                              by contradiction
                                                                                                 /*
                                                                                                 impossible chain
                                                                                                 */
                                                                                            next
                                                                                              case d_0_snd
                                                                                              solve( (#vr.76, 0) ~~> (#vk.19, 0) )
                                                                                                case d_0_fst
                                                                                                by contradiction
                                                                                                   /*
                                                                                                   impossible chain
                                                                                                   */
                                                                                              next
                                                                                                case d_0_snd
                                                                                                solve( (#vr.77, 0) ~~> (#vk.19, 0) )
                                                                                                  case d_0_fst
                                                                                                  solve( (#vr.78, 0) ~~> (#vk.19, 0) )
                                                                                                    case d_0_fst
                                                                                                    by sorry
                                                                                                       /*
                                                                                                       removed
                                                                                                       */
                                                                                                  next
                                                                                                    case d_0_snd
                                                                                                    solve( (#vr.79, 0) ~~> (#vk.19, 0) )
                                                                                                      case d_0_fst
                                                                                                      solve( RcvS( ~transactionid.1,
                                                                                                                   ~idPKMF.5,
                                                                                                                   ~supi_relay.5,
                                                                                                                   <
                                                                                                                    'relay_auth_request', 
                                                                                                                    K_NRp, 
                                                                                                                    ~Nonce2.1, 
                                                                                                                    UP_PRUKID, 
                                                                                                                    RAND.1, 
                                                                                                                    AUTN, 
                                                                                                                    P_TID, 
                                                                                                                    GPI_MAC
                                                                                                                   >
                                                                                                             ) ▶₂ #vr.72 )
                                                                                                        case receive_secure_case_1
                                                                                                        solve( RcvS( ~cid.1,
                                                                                                                     idHN.4,
                                                                                                                     ~idPKMF.5,
                                                                                                                     <
                                                                                                                      'ProseAuthenticateResponse', 
                                                                                                                      K_NRp, 
                                                                                                                      ~Nonce2.1, 
                                                                                                                      UP_PRUKID, 
                                                                                                                      RAND.1, 
                                                                                                                      AUTN, 
                                                                                                                      P_TID, 
                                                                                                                      GPI_MAC
                                                                                                                     >
                                                                                                               ) ▶₁ #vr.83 )
                                                                                                          case receive_secure_case_1
                                                                                                          solve( (#vr.80, 0) ~~> (#vk.19, 0) )
                                                                                                            case d_0_fst
                                                                                                            solve( (#vr.93, 0) ~~> (#vk.19, 0) )
                                                                                                              case Xor
                                                                                                              SOLVED // trace found
                                                                                                            next
                                                                                                              case d_xor_case_1
                                                                                                              by sorry
                                                                                                            next
                                                                                                              case d_xor_case_2
                                                                                                              by sorry
                                                                                                            next
                                                                                                              case d_xor_case_3
                                                                                                              by contradiction
                                                                                                                 /*
                                                                                                                 impossible chain
                                                                                                                 */
                                                                                                            next
                                                                                                              case d_xor_case_4
                                                                                                              by sorry
                                                                                                            qed
                                                                                                          next
                                                                                                            case d_0_snd
                                                                                                            by sorry
                                                                                                          qed
                                                                                                        next
                                                                                                          case receive_secure_case_2
                                                                                                          by contradiction
                                                                                                             /*
                                                                                                             cyclic
                                                                                                             */
                                                                                                        qed
                                                                                                      next
                                                                                                        case receive_secure_case_2
                                                                                                        by contradiction
                                                                                                           /*
                                                                                                           cyclic
                                                                                                           */
                                                                                                      qed
                                                                                                    next
                                                                                                      case d_0_snd
                                                                                                      by sorry
                                                                                                    qed
                                                                                                  qed
                                                                                                next
                                                                                                  case d_0_snd
                                                                                                  by sorry
                                                                                                qed
                                                                                              qed
                                                                                            qed
                                                                                          qed
                                                                                        qed
                                                                                      qed
                                                                                    next
                                                                                      case reveal_Ltk_DUCK
                                                                                      by contradiction
                                                                                         /*
                                                                                         impossible chain
                                                                                         */
                                                                                    next
                                                                                      case reveal_Ltk_DUIK
                                                                                      by contradiction
                                                                                         /*
                                                                                         impossible chain
                                                                                         */
                                                                                    next
                                                                                      case reveal_Ltk_RSC
                                                                                      by contradiction
                                                                                         /*
                                                                                         impossible chain
                                                                                         */
                                                                                    next
                                                                                      case reveal_Ltk_Sqn
                                                                                      by contradiction
                                                                                         /*
                                                                                         impossible chain
                                                                                         */
                                                                                    next
                                                                                      case reveal_Ltk_Sym
                                                                                      by contradiction
                                                                                         /*
                                                                                         impossible chain
                                                                                         */
                                                                                    next
                                                                                      case reveal_Ltk_supi
                                                                                      by contradiction
                                                                                         /*
                                                                                         impossible chain
                                                                                         */
                                                                                    next
                                                                                      case reveal_Ltk_supi_relay
                                                                                      by contradiction
                                                                                         /*
                                                                                         impossible chain
                                                                                         */
                                                                                    next
                                                                                      case reveal_sk_HN
                                                                                      by contradiction
                                                                                         /*
                                                                                         impossible chain
                                                                                         */
                                                                                    next
                                                                                      case secureChannel_compromised_out
                                                                                      by contradiction
                                                                                         /*
                                                                                         from formulas
                                                                                         */
                                                                                    next
                                                                                      case ue_Direct_Security_Mode_Failure_step7b
                                                                                      by sorry
                                                                                    next
                                                                                      case ue_receive_DSMCommand_step7a
                                                                                      by sorry
                                                                                    next
                                                                                      case ue_send_DCR_step1
                                                                                      by sorry
                                                                                         /* removed
                                                                                         */
                                                                                    qed
                                                                                  qed
                                                                                next
                                                                                  case d_xor_case_1
                                                                                  by sorry
                                                                                next
                                                                                  case d_xor_case_2
                                                                                  by sorry
                                                                                next
                                                                                  case d_xor_case_3
                                                                                  by contradiction
                                                                                     /*
                                                                                     impossible chain
                                                                                     */
                                                                                next
                                                                                  case d_xor_case_4
                                                                                  by contradiction
                                                                                     /*
                                                                                     impossible chain
                                                                                     */
                                                                                qed
                                                                              next
                                                                                case d_0_snd
                                                                                by sorry
                                                                              qed
                                                                            qed
                                                                          qed
                                                                        qed
                                                                      qed
                                                                    qed
                                                                  qed
                                                                next
                                                                  case receive_secure_case_2
                                                                  by contradiction /* cyclic */
                                                                qed
                                                              next
                                                                case secureChannel_compromised_out_case_1
                                                                by contradiction /* from formulas */
                                                              next
                                                                case secureChannel_compromised_out_case_2
                                                                by contradiction /* from formulas */
                                                              next
                                                                case secureChannel_compromised_out_case_3
                                                                by contradiction /* from formulas */
                                                              next
                                                                case secureChannel_compromised_out_case_4
                                                                by contradiction /* from formulas */
                                                              next
                                                                case secureChannel_compromised_out_case_5
                                                                by contradiction /* from formulas */
                                                              next
                                                                case secureChannel_compromised_out_case_6
                                                                by contradiction /* from formulas */
                                                              next
                                                                case secureChannel_compromised_out_case_7
                                                                by contradiction /* from formulas */
                                                              next
                                                                case secureChannel_compromised_out_case_8
                                                                by contradiction /* from formulas */
                                                              qed
                                                            next
                                                              case receive_secure_case_2
                                                              by contradiction /* cyclic */
                                                            qed
                                                          next
                                                            case receive_secure_case_2
                                                            by contradiction /* cyclic */
                                                          qed
                                                        next
                                                          case secureChannel_compromised_out_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case secureChannel_compromised_out_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case secureChannel_compromised_out_case_3
                                                          by contradiction /* from formulas */
                                                        next
                                                          case secureChannel_compromised_out_case_4
                                                          by contradiction /* from formulas */
                                                        next
                                                          case secureChannel_compromised_out_case_5
                                                          by contradiction /* from formulas */
                                                        next
                                                          case secureChannel_compromised_out_case_6
                                                          by contradiction /* from formulas */
                                                        next
                                                          case secureChannel_compromised_out_case_7
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case secureChannel_compromised_out_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case secureChannel_compromised_out_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case secureChannel_compromised_out_case_3
                                                        by contradiction /* from formulas */
                                                      next
                                                        case secureChannel_compromised_out_case_4
                                                        by contradiction /* from formulas */
                                                      next
                                                        case secureChannel_compromised_out_case_5
                                                        by contradiction /* from formulas */
                                                      next
                                                        case secureChannel_compromised_out_case_6
                                                        by contradiction /* from formulas */
                                                      next
                                                        case secureChannel_compromised_out_case_7
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case init_PKMF_relay
                                              by sorry
                                            next
                                              case init_homeNet
                                              by sorry
                                            next
                                              case relay_receive_relay_auth_request_step6_case_1
                                              by sorry
                                            next
                                              case relay_receive_relay_auth_request_step6_case_2
                                              by sorry
                                            next
                                              case relay_receive_relay_auth_request_step6_case_3
                                              by sorry
                                            next
                                              case relay_receive_relay_auth_request_step6_case_4
                                              by sorry
                                            next
                                              case relay_receive_relay_auth_request_step6_case_5
                                              by sorry
                                            next
                                              case reveal_Ltk_DUCK
                                              by sorry
                                            next
                                              case reveal_Ltk_DUIK
                                              by sorry
                                            next
                                              case reveal_Ltk_RSC
                                              by sorry
                                            next
                                              case reveal_Ltk_Sqn
                                              by sorry
                                            next
                                              case reveal_Ltk_Sym
                                              by sorry
                                            next
                                              case reveal_Ltk_supi
                                              by sorry
                                            next
                                              case reveal_Ltk_supi_relay
                                              by sorry
                                            next
                                              case reveal_sk_HN
                                              by sorry
                                            next
                                              case secureChannel_compromised_out_case_01
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_02
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_03
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_04
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_05
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_06
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_07
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_08
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_09
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_10
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_11
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_12
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_13
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_14
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_15
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_16
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_17
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_18
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_19
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_20
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_21
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_22
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_23
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_24
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_25
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_26
                                              by contradiction /* from formulas */
                                            next
                                              case secureChannel_compromised_out_case_27
                                              by contradiction /* from formulas */
                                            next
                                              case ue_Direct_Security_Mode_Failure_step7b_case_1
                                              by sorry
                                            next
                                              case ue_Direct_Security_Mode_Failure_step7b_case_2
                                              by sorry
                                            next
                                              case ue_Direct_Security_Mode_Failure_step7b_case_3
                                              by sorry
                                            next
                                              case ue_Direct_Security_Mode_Failure_step7b_case_4
                                              by sorry
                                            next
                                              case ue_receive_DSMCommand_step7a_case_1
                                              by sorry
                                            next
                                              case ue_receive_DSMCommand_step7a_case_2
                                              by sorry
                                            next
                                              case ue_send_DCR_step1_case_01
                                              by sorry
                                            next
                                              case ue_send_DCR_step1_case_02
                                              by sorry
                                            next
                                              case ue_send_DCR_step1_case_03
                                              by sorry
                                            next
                                              case ue_send_DCR_step1_case_04
                                              by sorry
                                            next
                                              case ue_send_DCR_step1_case_05
                                              by sorry
                                            next
                                              case ue_send_DCR_step1_case_06
                                              by sorry
                                            next
                                              case ue_send_DCR_step1_case_07
                                              by sorry
                                            next
                                              case ue_send_DCR_step1_case_08
                                              by sorry
                                            next
                                              case ue_send_DCR_step1_case_09
                                              by sorry
                                            next
                                              case ue_send_DCR_step1_case_10
                                              by sorry
                                            qed
                                          next
                                            case relay_receive_relay_auth_request_step6
                                            by sorry
                                          next
                                            case secureChannel_compromised_out_case_1
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_2
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_3
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_4
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_5
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_6
                                            by contradiction /* from formulas */
                                          next
                                            case secureChannel_compromised_out_case_7
                                            by contradiction /* from formulas */
                                          next
                                            case ue_send_DCR_step1
                                            by sorry
                                          qed
                                        next
                                          case receive_secure_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case receive_secure_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    next
                                      case receive_secure_case_2
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                next
                                  case receive_secure_case_2
                                  by contradiction /* cyclic */
                                qed
                              qed
                            qed
                          next
                            case ue_Direct_Security_Mode_Failure_step7b
                            by sorry
                          next
                            case ue_receive_DSMCommand_step7a
                            by sorry
                          next
                            case ue_sqn_increase
                            by sorry
                          qed
                        next
                          case secureChannel_compromised_out_case_1
                          by contradiction /* from formulas */
                        next
                          case secureChannel_compromised_out_case_2
                          by contradiction /* from formulas */
                        next
                          case secureChannel_compromised_out_case_3
                          by contradiction /* from formulas */
                        next
                          case secureChannel_compromised_out_case_4
                          by contradiction /* from formulas */
                        next
                          case secureChannel_compromised_out_case_5
                          by contradiction /* from formulas */
                        next
                          case secureChannel_compromised_out_case_6
                          by contradiction /* from formulas */
                        next
                          case secureChannel_compromised_out_case_7
                          by contradiction /* from formulas */
                        qed
                      next
                        case ue_send_DCR_step1
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case receive_secure_case_3
                  by sorry
                next
                  case receive_secure_case_4
                  by contradiction /* cyclic */
                qed
              next
                case receive_secure_case_3
                by sorry
              next
                case receive_secure_case_4
                by contradiction /* cyclic */
              qed
            next
              case receive_secure_case_2
              by contradiction /* cyclic */
            qed
          next
            case relay_receive_relay_auth_request_step6_case_04
            by sorry
          next
            case relay_receive_relay_auth_request_step6_case_05
            by sorry
          next
            case relay_receive_relay_auth_request_step6_case_06
            by sorry
          next
            case relay_receive_relay_auth_request_step6_case_07
            by sorry
          next
            case relay_receive_relay_auth_request_step6_case_08
            by sorry
          next
            case relay_receive_relay_auth_request_step6_case_09
            by sorry
          next
            case relay_receive_relay_auth_request_step6_case_10
            by sorry
          next
            case relay_receive_relay_auth_request_step6_case_11
            by sorry
          next
            case relay_receive_relay_auth_request_step6_case_12
            by sorry
          next
            case relay_receive_relay_auth_request_step6_case_13
            by sorry
          next
            case relay_receive_relay_auth_request_step6_case_14
            by sorry
          next
            case relay_receive_relay_auth_request_step6_case_15
            by sorry
          next
            case relay_receive_relay_auth_request_step6_case_16
            by sorry
          next
            case secureChannel_compromised_out_case_01
            by contradiction /* from formulas */
          next
            case secureChannel_compromised_out_case_02
            by contradiction /* from formulas */
          next
            case secureChannel_compromised_out_case_03
            by contradiction /* from formulas */
          next
            case secureChannel_compromised_out_case_04
            by contradiction /* from formulas */
          next
            case secureChannel_compromised_out_case_05
            by contradiction /* from formulas */
          next
            case secureChannel_compromised_out_case_06
            by contradiction /* from formulas */
          next
            case secureChannel_compromised_out_case_07
            by contradiction /* from formulas */
          next
            case secureChannel_compromised_out_case_08
            by contradiction /* from formulas */
          next
            case secureChannel_compromised_out_case_09
            by contradiction /* from formulas */
          next
            case secureChannel_compromised_out_case_10
            by contradiction /* from formulas */
          next
            case secureChannel_compromised_out_case_11
            by contradiction /* from formulas */
          next
            case secureChannel_compromised_out_case_12
            by contradiction /* from formulas */
          next
            case secureChannel_compromised_out_case_13
            by contradiction /* from formulas */
          next
            case secureChannel_compromised_out_case_14
            by contradiction /* from formulas */
          next
            case secureChannel_compromised_out_case_15
            by contradiction /* from formulas */
          next
            case secureChannel_compromised_out_case_16
            by contradiction /* from formulas */
          qed
        qed
      next
        case receive_secure_case_2
        by contradiction /* from formulas */
      qed
    next
      case receive_secure_case_2
      by contradiction /* from formulas */
    qed
  qed
qed

lemma noninjectiveagreement_remote_relay_UPsecuritypolicy_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                                hide_lemma=sqn_HN_src,
                                                                                                                hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'relay', 'UPsecurity_policy', t>
     ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'remote', 'relay', 'UPsecurity_policy', t>
            ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'relay', 'UPsecurity_policy', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'remote', 'relay', 'UPsecurity_policy', t> ) @ #j)
   ⇒
    ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_relay_remote_UPsecuritypolicy_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                                hide_lemma=sqn_HN_src,
                                                                                                                hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'remote', 'UPsecurity_policy', t>
     ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'relay', 'remote', 'UPsecurity_policy', t>
            ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'remote', 'UPsecurity_policy', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'relay', 'remote', 'UPsecurity_policy', t> ) @ #j)
   ⇒
    ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_relay_remote_UP_PRUKID_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                         hide_lemma=sqn_HN_src,
                                                                                                         hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'remote', 'UP_PRUKID', t> ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'relay', 'remote', 'UP_PRUKID', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'remote', 'UP_PRUKID', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'relay', 'remote', 'UP_PRUKID', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_remote_relay_UP_PRUKID_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                         hide_lemma=sqn_HN_src,
                                                                                                         hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'relay', 'UP_PRUKID', t> ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'remote', 'relay', 'UP_PRUKID', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'relay', 'UP_PRUKID', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'remote', 'relay', 'UP_PRUKID', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_relay_remote_RSC_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                   hide_lemma=sqn_HN_src,
                                                                                                   hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'remote', 'RSC', t> ) @ #i) ⇒
    (((((((∃ #j. Running( b, a, <'relay', 'remote', 'RSC', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'remote', 'RSC', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'relay', 'remote', 'RSC', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_remote_relay_RSC_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                   hide_lemma=sqn_HN_src,
                                                                                                   hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'relay', 'RSC', t> ) @ #i) ⇒
    (((((((∃ #j. Running( b, a, <'remote', 'relay', 'RSC', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'relay', 'RSC', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'remote', 'relay', 'RSC', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_relay_remote_K_NRp_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                     hide_lemma=sqn_HN_src,
                                                                                                     hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'remote', 'K_NRp', t> ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'relay', 'remote', 'K_NRp', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'remote', 'K_NRp', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'relay', 'remote', 'K_NRp', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_remote_relay_K_NRp_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                     hide_lemma=sqn_HN_src,
                                                                                                     hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'relay', 'K_NRp', t> ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'remote', 'relay', 'K_NRp', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'relay', 'K_NRp', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'remote', 'relay', 'K_NRp', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_remote_HN_UP_PRUK_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                    hide_lemma=sqn_HN_src,
                                                                                                    hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'HN', 'UP_PRUK', t> ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'remote', 'HN', 'UP_PRUK', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'HN', 'UP_PRUK', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'remote', 'HN', 'UP_PRUK', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_HN_remote_UP_PRUK_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                    hide_lemma=sqn_HN_src,
                                                                                                    hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'HN', 'remote', 'UP_PRUK', t> ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'HN', 'remote', 'UP_PRUK', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'HN', 'remote', 'UP_PRUK', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'HN', 'remote', 'UP_PRUK', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_remote_HN_UP_PRUKID_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                      hide_lemma=sqn_HN_src,
                                                                                                      hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'HN', 'UP_PRUKID', t> ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'remote', 'HN', 'UP_PRUKID', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'HN', 'UP_PRUKID', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'remote', 'HN', 'UP_PRUKID', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_HN_remote_UP_PRUKID_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                      hide_lemma=sqn_HN_src,
                                                                                                      hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'HN', 'remote', 'UP_PRUKID', t> ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'HN', 'remote', 'UP_PRUKID', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'HN', 'remote', 'UP_PRUKID', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'HN', 'remote', 'UP_PRUKID', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_remote_HN_RSC_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                hide_lemma=sqn_HN_src,
                                                                                                hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'HN', 'RSC', t> ) @ #i) ⇒
    (((((((∃ #j. Running( b, a, <'remote', 'HN', 'RSC', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'HN', 'RSC', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'remote', 'HN', 'RSC', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_HN_remote_RSC_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                hide_lemma=sqn_HN_src,
                                                                                                hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'HN', 'remote', 'RSC', t> ) @ #i) ⇒
    (((((((∃ #j. Running( b, a, <'HN', 'remote', 'RSC', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'HN', 'remote', 'RSC', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'HN', 'remote', 'RSC', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_remote_HN_supi_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                 hide_lemma=sqn_HN_src,
                                                                                                 hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'HN', 'supi', t> ) @ #i) ⇒
    (((((((∃ #j. Running( b, a, <'remote', 'HN', 'supi', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'HN', 'supi', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'remote', 'HN', 'supi', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_HN_remote_supi_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                 hide_lemma=sqn_HN_src,
                                                                                                 hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'HN', 'remote', 'supi', t> ) @ #i) ⇒
    (((((((∃ #j. Running( b, a, <'HN', 'remote', 'supi', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'HN', 'remote', 'supi', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'HN', 'remote', 'supi', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_PKMF_relay_supi_relay_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                        hide_lemma=sqn_HN_src,
                                                                                                        hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'PKMF', 'relay', 'supi_relay', t> ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'PKMF', 'relay', 'supi_relay', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'PKMF', 'relay', 'supi_relay', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'PKMF', 'relay', 'supi_relay', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_relay_PKMF_supi_relay_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                        hide_lemma=sqn_HN_src,
                                                                                                        hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'PKMF', 'supi_relay', t> ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'relay', 'PKMF', 'supi_relay', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'PKMF', 'supi_relay', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'relay', 'PKMF', 'supi_relay', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_relay_PKMF_RSC_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                 hide_lemma=sqn_HN_src,
                                                                                                 hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'PKMF', 'RSC', t> ) @ #i) ⇒
    (((((((∃ #j. Running( b, a, <'relay', 'PKMF', 'RSC', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'PKMF', 'RSC', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'relay', 'PKMF', 'RSC', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_PKMF_relay_RSC_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                 hide_lemma=sqn_HN_src,
                                                                                                 hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'PKMF', 'relay', 'RSC', t> ) @ #i) ⇒
    (((((((∃ #j. Running( b, a, <'PKMF', 'relay', 'RSC', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'PKMF', 'relay', 'RSC', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'PKMF', 'relay', 'RSC', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_relay_HN_UP_PRUKID_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                     hide_lemma=sqn_HN_src,
                                                                                                     hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'HN', 'UP_PRUKID', t> ) @ #i) ⇒
    (((((((∃ #j.
            Running( b, a, <'relay', 'HN', 'UP_PRUKID', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'HN', 'UP_PRUKID', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'relay', 'HN', 'UP_PRUKID', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_relay_HN_RSC_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                               hide_lemma=sqn_HN_src,
                                                                                               hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'HN', 'RSC', t> ) @ #i) ⇒
    (((((((∃ #j. Running( b, a, <'relay', 'HN', 'RSC', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'HN', 'RSC', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'relay', 'HN', 'RSC', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma noninjectiveagreement_relay_HN_K_NRp_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                 hide_lemma=sqn_HN_src,
                                                                                                 hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'HN', 'K_NRp', t> ) @ #i) ⇒
    (((((((∃ #j. Running( b, a, <'relay', 'HN', 'K_NRp', t> ) @ #j) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'HN', 'K_NRp', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'relay', 'HN', 'K_NRp', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma injectiveagreement_remote_relay_K_relay_sess_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                         hide_lemma=sqn_HN_src,
                                                                                                         hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'relay', 'K_relay_sess', t> ) @ #i) ⇒
    (((((((∃ #j.
            ((Running( b, a, <'remote', 'relay', 'K_relay_sess', t> ) @ #j) ∧
             (#j < #i)) ∧
            (¬(∃ a2 b2 #i2.
                (Commit( a2, b2, <'remote', 'relay', 'K_relay_sess', t> ) @ #i2) ∧
                (¬(#i2 = #i))))) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'relay', 'K_relay_sess', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'remote', 'relay', 'K_relay_sess', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'remote', 'relay', 'K_relay_sess', t> ) @ #i2)
      ∧
       ¬(#i2 = #i)))) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma injectiveagreement_relay_remote_K_relay_sess_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                         hide_lemma=sqn_HN_src,
                                                                                                         hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'remote', 'K_relay_sess', t> ) @ #i) ⇒
    (((((((∃ #j.
            ((Running( b, a, <'relay', 'remote', 'K_relay_sess', t> ) @ #j) ∧
             (#j < #i)) ∧
            (¬(∃ a2 b2 #i2.
                (Commit( a2, b2, <'relay', 'remote', 'K_relay_sess', t> ) @ #i2) ∧
                (¬(#i2 = #i))))) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'remote', 'K_relay_sess', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'relay', 'remote', 'K_relay_sess', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'relay', 'remote', 'K_relay_sess', t> ) @ #i2)
      ∧
       ¬(#i2 = #i)))) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma injectiveagreement_remote_relay_K_sessID_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                     hide_lemma=sqn_HN_src,
                                                                                                     hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'relay', 'K_sessID', t> ) @ #i) ⇒
    (((((((∃ #j.
            ((Running( b, a, <'remote', 'relay', 'K_sessID', t> ) @ #j) ∧
             (#j < #i)) ∧
            (¬(∃ a2 b2 #i2.
                (Commit( a2, b2, <'remote', 'relay', 'K_sessID', t> ) @ #i2) ∧
                (¬(#i2 = #i))))) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'relay', 'K_sessID', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'remote', 'relay', 'K_sessID', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'remote', 'relay', 'K_sessID', t> ) @ #i2)
      ∧
       ¬(#i2 = #i)))) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma injectiveagreement_relay_remote_K_sessID_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                     hide_lemma=sqn_HN_src,
                                                                                                     hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'remote', 'K_sessID', t> ) @ #i) ⇒
    (((((((∃ #j.
            ((Running( b, a, <'relay', 'remote', 'K_sessID', t> ) @ #j) ∧
             (#j < #i)) ∧
            (¬(∃ a2 b2 #i2.
                (Commit( a2, b2, <'relay', 'remote', 'K_sessID', t> ) @ #i2) ∧
                (¬(#i2 = #i))))) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'remote', 'K_sessID', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'relay', 'remote', 'K_sessID', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'relay', 'remote', 'K_sessID', t> ) @ #i2)
      ∧
       ¬(#i2 = #i)))) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma injectiveagreement_remote_relay_K_relay_enc_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                        hide_lemma=sqn_HN_src,
                                                                                                        hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'relay', 'K_relay_enc', t> ) @ #i) ⇒
    (((((((∃ #j.
            ((Running( b, a, <'remote', 'relay', 'K_relay_enc', t> ) @ #j) ∧
             (#j < #i)) ∧
            (¬(∃ a2 b2 #i2.
                (Commit( a2, b2, <'remote', 'relay', 'K_relay_enc', t> ) @ #i2) ∧
                (¬(#i2 = #i))))) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'relay', 'K_relay_enc', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'remote', 'relay', 'K_relay_enc', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'remote', 'relay', 'K_relay_enc', t> ) @ #i2)
      ∧
       ¬(#i2 = #i)))) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma injectiveagreement_relay_remote_K_relay_enc_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                        hide_lemma=sqn_HN_src,
                                                                                                        hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'remote', 'K_relay_enc', t> ) @ #i) ⇒
    (((((((∃ #j.
            ((Running( b, a, <'relay', 'remote', 'K_relay_enc', t> ) @ #j) ∧
             (#j < #i)) ∧
            (¬(∃ a2 b2 #i2.
                (Commit( a2, b2, <'relay', 'remote', 'K_relay_enc', t> ) @ #i2) ∧
                (¬(#i2 = #i))))) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'remote', 'K_relay_enc', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'relay', 'remote', 'K_relay_enc', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'relay', 'remote', 'K_relay_enc', t> ) @ #i2)
      ∧
       ¬(#i2 = #i)))) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma injectiveagreement_remote_relay_K_relay_int_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                        hide_lemma=sqn_HN_src,
                                                                                                        hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'remote', 'relay', 'K_relay_int', t> ) @ #i) ⇒
    (((((((∃ #j.
            ((Running( b, a, <'remote', 'relay', 'K_relay_int', t> ) @ #j) ∧
             (#j < #i)) ∧
            (¬(∃ a2 b2 #i2.
                (Commit( a2, b2, <'remote', 'relay', 'K_relay_int', t> ) @ #i2) ∧
                (¬(#i2 = #i))))) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'remote', 'relay', 'K_relay_int', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'remote', 'relay', 'K_relay_int', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'remote', 'relay', 'K_relay_int', t> ) @ #i2)
      ∧
       ¬(#i2 = #i)))) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

lemma injectiveagreement_relay_remote_K_relay_int_noKeyRev_noAsyKeyRev_noSupiRev_noSqnRev_noAllchanRev [hide_lemma=sqn_ue_src,
                                                                                                        hide_lemma=sqn_HN_src,
                                                                                                        hide_lemma=sqn_ue_nodecrease]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'relay', 'remote', 'K_relay_int', t> ) @ #i) ⇒
    (((((((∃ #j.
            ((Running( b, a, <'relay', 'remote', 'K_relay_int', t> ) @ #j) ∧
             (#j < #i)) ∧
            (¬(∃ a2 b2 #i2.
                (Commit( a2, b2, <'relay', 'remote', 'K_relay_int', t> ) @ #i2) ∧
                (¬(#i2 = #i))))) ∨
          (∃ X key #r. (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
         (∃ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
        (∃ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
       (∃ X s #r.
         (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
      (∃ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i))) ∨
     (∃ X #r. Rev( X, 'secureChannel' ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'relay', 'remote', 'K_relay_int', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'relay', 'remote', 'K_relay_int', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'relay', 'remote', 'K_relay_int', t> ) @ #i2)
      ∧
       ¬(#i2 = #i)))) ∧
  (∀ X key #r.
    (Rev( X, <'k', key> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X k #r. (Rev( X, <'skHN', k> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'sqn', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r.
    (Rev( X, <'supi_relay', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X s #r. (Rev( X, <'supi', s> ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X, 'secureChannel' ) @ #r) ⇒ ⊥)"
*/
by sorry

/* All well-formedness checks were successful. */

end